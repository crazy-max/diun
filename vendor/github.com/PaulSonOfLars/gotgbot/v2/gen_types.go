// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"encoding/json"
	"fmt"
)

type ReplyMarkup interface {
	// replyMarkup exists to avoid external types implementing this interface.
	replyMarkup()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ ReplyMarkup = ForceReply{}
	_ ReplyMarkup = InlineKeyboardMarkup{}
	_ ReplyMarkup = ReplyKeyboardMarkup{}
	_ ReplyMarkup = ReplyKeyboardRemove{}
)

// AffiliateInfo (https://core.telegram.org/bots/api#affiliateinfo)
//
// Contains information about the affiliate that received a commission via this transaction.
type AffiliateInfo struct {
	// Optional. The bot or the user that received an affiliate commission if it was received by a bot or a user
	AffiliateUser *User `json:"affiliate_user,omitempty"`
	// Optional. The chat that received an affiliate commission if it was received by a chat
	AffiliateChat *Chat `json:"affiliate_chat,omitempty"`
	// The number of Telegram Stars received by the affiliate for each 1000 Telegram Stars received by the bot from referred users
	CommissionPerMille int64 `json:"commission_per_mille"`
	// Integer amount of Telegram Stars received by the affiliate from the transaction, rounded to 0; can be negative for refunds
	Amount int64 `json:"amount"`
	// Optional. The number of 1/1000000000 shares of Telegram Stars received by the affiliate; from -999999999 to 999999999; can be negative for refunds
	NanostarAmount int64 `json:"nanostar_amount,omitempty"`
}

// Animation (https://core.telegram.org/bots/api#animation)
//
// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
type Animation struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Video width as defined by the sender
	Width int64 `json:"width"`
	// Video height as defined by the sender
	Height int64 `json:"height"`
	// Duration of the video in seconds as defined by the sender
	Duration int64 `json:"duration"`
	// Optional. Animation thumbnail as defined by the sender
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
	// Optional. Original animation filename as defined by the sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by the sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
}

// Audio (https://core.telegram.org/bots/api#audio)
//
// This object represents an audio file to be treated as music by the Telegram clients.
type Audio struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by the sender
	Duration int64 `json:"duration"`
	// Optional. Performer of the audio as defined by the sender or by audio tags
	Performer string `json:"performer,omitempty"`
	// Optional. Title of the audio as defined by the sender or by audio tags
	Title string `json:"title,omitempty"`
	// Optional. Original filename as defined by the sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by the sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
	// Optional. Thumbnail of the album cover to which the music file belongs
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
}

// BackgroundFill (https://core.telegram.org/bots/api#backgroundfill)
//
// This object describes the way a background is filled based on the selected colors. Currently, it can be one of
//   - BackgroundFillSolid
//   - BackgroundFillGradient
//   - BackgroundFillFreeformGradient
type BackgroundFill interface {
	GetType() string
	// MergeBackgroundFill returns a MergedBackgroundFill struct to simplify working with complex telegram types in a non-generic world.
	MergeBackgroundFill() MergedBackgroundFill
	// backgroundFill exists to avoid external types implementing this interface.
	backgroundFill()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ BackgroundFill = BackgroundFillSolid{}
	_ BackgroundFill = BackgroundFillGradient{}
	_ BackgroundFill = BackgroundFillFreeformGradient{}
)

// MergedBackgroundFill is a helper type to simplify interactions with the various BackgroundFill subtypes.
type MergedBackgroundFill struct {
	// Type of the background fill
	Type string `json:"type"`
	// Optional. The color of the background fill in the RGB24 format (Only for solid)
	Color int64 `json:"color,omitempty"`
	// Optional. Top color of the gradient in the RGB24 format (Only for gradient)
	TopColor int64 `json:"top_color,omitempty"`
	// Optional. Bottom color of the gradient in the RGB24 format (Only for gradient)
	BottomColor int64 `json:"bottom_color,omitempty"`
	// Optional. Clockwise rotation angle of the background fill in degrees; 0-359 (Only for gradient)
	RotationAngle int64 `json:"rotation_angle,omitempty"`
	// Optional. A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format (Only for freeform_gradient)
	Colors []int64 `json:"colors,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedBackgroundFill) GetType() string {
	return v.Type
}

// MergedBackgroundFill.backgroundFill is a dummy method to avoid interface implementation.
func (v MergedBackgroundFill) backgroundFill() {}

// MergeBackgroundFill returns a MergedBackgroundFill struct to simplify working with types in a non-generic world.
func (v MergedBackgroundFill) MergeBackgroundFill() MergedBackgroundFill {
	return v
}

// unmarshalBackgroundFillArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalBackgroundFill.
func unmarshalBackgroundFillArray(d json.RawMessage) ([]BackgroundFill, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial BackgroundFill JSON into an array: %w", err)
	}

	var vs []BackgroundFill
	for idx, d := range ds {
		v, err := unmarshalBackgroundFill(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundFill on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalBackgroundFill is a JSON unmarshal helper to marshal the right structs into a BackgroundFill interface
// based on the Type field.
func unmarshalBackgroundFill(d json.RawMessage) (BackgroundFill, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal BackgroundFill for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "solid":
		s := BackgroundFillSolid{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundFill for value 'solid': %w", err)
		}
		return s, nil

	case "gradient":
		s := BackgroundFillGradient{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundFill for value 'gradient': %w", err)
		}
		return s, nil

	case "freeform_gradient":
		s := BackgroundFillFreeformGradient{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundFill for value 'freeform_gradient': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for BackgroundFill with Type %v", t.Type)
}

// BackgroundFillFreeformGradient (https://core.telegram.org/bots/api#backgroundfillfreeformgradient)
//
// The background is a freeform gradient that rotates after every message in the chat.
type BackgroundFillFreeformGradient struct {
	// A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format
	Colors []int64 `json:"colors,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundFillFreeformGradient) GetType() string {
	return "freeform_gradient"
}

// MergeBackgroundFill returns a MergedBackgroundFill struct to simplify working with types in a non-generic world.
func (v BackgroundFillFreeformGradient) MergeBackgroundFill() MergedBackgroundFill {
	return MergedBackgroundFill{
		Type:   "freeform_gradient",
		Colors: v.Colors,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundFillFreeformGradient) MarshalJSON() ([]byte, error) {
	type alias BackgroundFillFreeformGradient
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "freeform_gradient",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundFillFreeformGradient.backgroundFill is a dummy method to avoid interface implementation.
func (v BackgroundFillFreeformGradient) backgroundFill() {}

// BackgroundFillGradient (https://core.telegram.org/bots/api#backgroundfillgradient)
//
// The background is a gradient fill.
type BackgroundFillGradient struct {
	// Top color of the gradient in the RGB24 format
	TopColor int64 `json:"top_color"`
	// Bottom color of the gradient in the RGB24 format
	BottomColor int64 `json:"bottom_color"`
	// Clockwise rotation angle of the background fill in degrees; 0-359
	RotationAngle int64 `json:"rotation_angle"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundFillGradient) GetType() string {
	return "gradient"
}

// MergeBackgroundFill returns a MergedBackgroundFill struct to simplify working with types in a non-generic world.
func (v BackgroundFillGradient) MergeBackgroundFill() MergedBackgroundFill {
	return MergedBackgroundFill{
		Type:          "gradient",
		TopColor:      v.TopColor,
		BottomColor:   v.BottomColor,
		RotationAngle: v.RotationAngle,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundFillGradient) MarshalJSON() ([]byte, error) {
	type alias BackgroundFillGradient
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "gradient",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundFillGradient.backgroundFill is a dummy method to avoid interface implementation.
func (v BackgroundFillGradient) backgroundFill() {}

// BackgroundFillSolid (https://core.telegram.org/bots/api#backgroundfillsolid)
//
// The background is filled using the selected color.
type BackgroundFillSolid struct {
	// The color of the background fill in the RGB24 format
	Color int64 `json:"color"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundFillSolid) GetType() string {
	return "solid"
}

// MergeBackgroundFill returns a MergedBackgroundFill struct to simplify working with types in a non-generic world.
func (v BackgroundFillSolid) MergeBackgroundFill() MergedBackgroundFill {
	return MergedBackgroundFill{
		Type:  "solid",
		Color: v.Color,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundFillSolid) MarshalJSON() ([]byte, error) {
	type alias BackgroundFillSolid
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "solid",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundFillSolid.backgroundFill is a dummy method to avoid interface implementation.
func (v BackgroundFillSolid) backgroundFill() {}

// BackgroundType (https://core.telegram.org/bots/api#backgroundtype)
//
// This object describes the type of a background. Currently, it can be one of
//   - BackgroundTypeFill
//   - BackgroundTypeWallpaper
//   - BackgroundTypePattern
//   - BackgroundTypeChatTheme
type BackgroundType interface {
	GetType() string
	// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with complex telegram types in a non-generic world.
	MergeBackgroundType() MergedBackgroundType
	// backgroundType exists to avoid external types implementing this interface.
	backgroundType()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ BackgroundType = BackgroundTypeFill{}
	_ BackgroundType = BackgroundTypeWallpaper{}
	_ BackgroundType = BackgroundTypePattern{}
	_ BackgroundType = BackgroundTypeChatTheme{}
)

// MergedBackgroundType is a helper type to simplify interactions with the various BackgroundType subtypes.
type MergedBackgroundType struct {
	// Type of the background
	Type string `json:"type"`
	// Optional. The background fill (Only for fill, pattern)
	Fill BackgroundFill `json:"fill,omitempty"`
	// Optional. Dimming of the background in dark themes, as a percentage; 0-100 (Only for fill, wallpaper)
	DarkThemeDimming int64 `json:"dark_theme_dimming,omitempty"`
	// Optional. Document with the wallpaper (Only for wallpaper, pattern)
	Document *Document `json:"document,omitempty"`
	// Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12 (Only for wallpaper)
	IsBlurred bool `json:"is_blurred,omitempty"`
	// Optional. True, if the background moves slightly when the device is tilted (Only for wallpaper, pattern)
	IsMoving bool `json:"is_moving,omitempty"`
	// Optional. Intensity of the pattern when it is shown above the filled background; 0-100 (Only for pattern)
	Intensity int64 `json:"intensity,omitempty"`
	// Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only (Only for pattern)
	IsInverted bool `json:"is_inverted,omitempty"`
	// Optional. Name of the chat theme, which is usually an emoji (Only for chat_theme)
	ThemeName string `json:"theme_name,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedBackgroundType) GetType() string {
	return v.Type
}

// MergedBackgroundType.backgroundType is a dummy method to avoid interface implementation.
func (v MergedBackgroundType) backgroundType() {}

// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with types in a non-generic world.
func (v MergedBackgroundType) MergeBackgroundType() MergedBackgroundType {
	return v
}

// unmarshalBackgroundTypeArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalBackgroundType.
func unmarshalBackgroundTypeArray(d json.RawMessage) ([]BackgroundType, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial BackgroundType JSON into an array: %w", err)
	}

	var vs []BackgroundType
	for idx, d := range ds {
		v, err := unmarshalBackgroundType(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundType on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalBackgroundType is a JSON unmarshal helper to marshal the right structs into a BackgroundType interface
// based on the Type field.
func unmarshalBackgroundType(d json.RawMessage) (BackgroundType, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal BackgroundType for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "fill":
		s := BackgroundTypeFill{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundType for value 'fill': %w", err)
		}
		return s, nil

	case "wallpaper":
		s := BackgroundTypeWallpaper{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundType for value 'wallpaper': %w", err)
		}
		return s, nil

	case "pattern":
		s := BackgroundTypePattern{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundType for value 'pattern': %w", err)
		}
		return s, nil

	case "chat_theme":
		s := BackgroundTypeChatTheme{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal BackgroundType for value 'chat_theme': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for BackgroundType with Type %v", t.Type)
}

// BackgroundTypeChatTheme (https://core.telegram.org/bots/api#backgroundtypechattheme)
//
// The background is taken directly from a built-in chat theme.
type BackgroundTypeChatTheme struct {
	// Name of the chat theme, which is usually an emoji
	ThemeName string `json:"theme_name"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundTypeChatTheme) GetType() string {
	return "chat_theme"
}

// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with types in a non-generic world.
func (v BackgroundTypeChatTheme) MergeBackgroundType() MergedBackgroundType {
	return MergedBackgroundType{
		Type:      "chat_theme",
		ThemeName: v.ThemeName,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundTypeChatTheme) MarshalJSON() ([]byte, error) {
	type alias BackgroundTypeChatTheme
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "chat_theme",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundTypeChatTheme.backgroundType is a dummy method to avoid interface implementation.
func (v BackgroundTypeChatTheme) backgroundType() {}

// BackgroundTypeFill (https://core.telegram.org/bots/api#backgroundtypefill)
//
// The background is automatically filled based on the selected colors.
type BackgroundTypeFill struct {
	// The background fill
	Fill BackgroundFill `json:"fill"`
	// Dimming of the background in dark themes, as a percentage; 0-100
	DarkThemeDimming int64 `json:"dark_theme_dimming"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *BackgroundTypeFill) UnmarshalJSON(b []byte) error {
	// All fields in BackgroundTypeFill, with interface fields as json.RawMessage
	type tmp struct {
		Fill             json.RawMessage `json:"fill"`
		DarkThemeDimming int64           `json:"dark_theme_dimming"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal BackgroundTypeFill JSON into tmp struct: %w", err)
	}

	v.Fill, err = unmarshalBackgroundFill(t.Fill)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Fill: %w", err)
	}
	v.DarkThemeDimming = t.DarkThemeDimming

	return nil
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundTypeFill) GetType() string {
	return "fill"
}

// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with types in a non-generic world.
func (v BackgroundTypeFill) MergeBackgroundType() MergedBackgroundType {
	return MergedBackgroundType{
		Type:             "fill",
		Fill:             v.Fill,
		DarkThemeDimming: v.DarkThemeDimming,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundTypeFill) MarshalJSON() ([]byte, error) {
	type alias BackgroundTypeFill
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "fill",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundTypeFill.backgroundType is a dummy method to avoid interface implementation.
func (v BackgroundTypeFill) backgroundType() {}

// BackgroundTypePattern (https://core.telegram.org/bots/api#backgroundtypepattern)
//
// The background is a .PNG or .TGV (gzipped subset of SVG with MIME type "application/x-tgwallpattern") pattern to be combined with the background fill chosen by the user.
type BackgroundTypePattern struct {
	// Document with the pattern
	Document Document `json:"document"`
	// The background fill that is combined with the pattern
	Fill BackgroundFill `json:"fill"`
	// Intensity of the pattern when it is shown above the filled background; 0-100
	Intensity int64 `json:"intensity"`
	// Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only
	IsInverted bool `json:"is_inverted,omitempty"`
	// Optional. True, if the background moves slightly when the device is tilted
	IsMoving bool `json:"is_moving,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *BackgroundTypePattern) UnmarshalJSON(b []byte) error {
	// All fields in BackgroundTypePattern, with interface fields as json.RawMessage
	type tmp struct {
		Document   Document        `json:"document"`
		Fill       json.RawMessage `json:"fill"`
		Intensity  int64           `json:"intensity"`
		IsInverted bool            `json:"is_inverted"`
		IsMoving   bool            `json:"is_moving"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal BackgroundTypePattern JSON into tmp struct: %w", err)
	}

	v.Document = t.Document
	v.Fill, err = unmarshalBackgroundFill(t.Fill)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Fill: %w", err)
	}
	v.Intensity = t.Intensity
	v.IsInverted = t.IsInverted
	v.IsMoving = t.IsMoving

	return nil
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundTypePattern) GetType() string {
	return "pattern"
}

// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with types in a non-generic world.
func (v BackgroundTypePattern) MergeBackgroundType() MergedBackgroundType {
	return MergedBackgroundType{
		Type:       "pattern",
		Document:   &v.Document,
		Fill:       v.Fill,
		Intensity:  v.Intensity,
		IsInverted: v.IsInverted,
		IsMoving:   v.IsMoving,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundTypePattern) MarshalJSON() ([]byte, error) {
	type alias BackgroundTypePattern
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "pattern",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundTypePattern.backgroundType is a dummy method to avoid interface implementation.
func (v BackgroundTypePattern) backgroundType() {}

// BackgroundTypeWallpaper (https://core.telegram.org/bots/api#backgroundtypewallpaper)
//
// The background is a wallpaper in the JPEG format.
type BackgroundTypeWallpaper struct {
	// Document with the wallpaper
	Document Document `json:"document"`
	// Dimming of the background in dark themes, as a percentage; 0-100
	DarkThemeDimming int64 `json:"dark_theme_dimming"`
	// Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12
	IsBlurred bool `json:"is_blurred,omitempty"`
	// Optional. True, if the background moves slightly when the device is tilted
	IsMoving bool `json:"is_moving,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BackgroundTypeWallpaper) GetType() string {
	return "wallpaper"
}

// MergeBackgroundType returns a MergedBackgroundType struct to simplify working with types in a non-generic world.
func (v BackgroundTypeWallpaper) MergeBackgroundType() MergedBackgroundType {
	return MergedBackgroundType{
		Type:             "wallpaper",
		Document:         &v.Document,
		DarkThemeDimming: v.DarkThemeDimming,
		IsBlurred:        v.IsBlurred,
		IsMoving:         v.IsMoving,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BackgroundTypeWallpaper) MarshalJSON() ([]byte, error) {
	type alias BackgroundTypeWallpaper
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "wallpaper",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BackgroundTypeWallpaper.backgroundType is a dummy method to avoid interface implementation.
func (v BackgroundTypeWallpaper) backgroundType() {}

// Birthdate (https://core.telegram.org/bots/api#birthdate)
//
// Describes the birthdate of a user.
type Birthdate struct {
	// Day of the user's birth; 1-31
	Day int64 `json:"day"`
	// Month of the user's birth; 1-12
	Month int64 `json:"month"`
	// Optional. Year of the user's birth
	Year int64 `json:"year,omitempty"`
}

// BotCommand (https://core.telegram.org/bots/api#botcommand)
//
// This object represents a bot command.
type BotCommand struct {
	// Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores.
	Command string `json:"command"`
	// Description of the command; 1-256 characters.
	Description string `json:"description"`
}

// BotCommandScope (https://core.telegram.org/bots/api#botcommandscope)
//
// This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:
//   - BotCommandScopeDefault
//   - BotCommandScopeAllPrivateChats
//   - BotCommandScopeAllGroupChats
//   - BotCommandScopeAllChatAdministrators
//   - BotCommandScopeChat
//   - BotCommandScopeChatAdministrators
//   - BotCommandScopeChatMember
type BotCommandScope interface {
	GetType() string
	// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with complex telegram types in a non-generic world.
	MergeBotCommandScope() MergedBotCommandScope
	// botCommandScope exists to avoid external types implementing this interface.
	botCommandScope()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ BotCommandScope = BotCommandScopeDefault{}
	_ BotCommandScope = BotCommandScopeAllPrivateChats{}
	_ BotCommandScope = BotCommandScopeAllGroupChats{}
	_ BotCommandScope = BotCommandScopeAllChatAdministrators{}
	_ BotCommandScope = BotCommandScopeChat{}
	_ BotCommandScope = BotCommandScopeChatAdministrators{}
	_ BotCommandScope = BotCommandScopeChatMember{}
)

// MergedBotCommandScope is a helper type to simplify interactions with the various BotCommandScope subtypes.
type MergedBotCommandScope struct {
	// Scope type
	Type string `json:"type"`
	// Optional. Unique identifier for the target chat (Only for chat, chat_administrators, chat_member)
	ChatId int64 `json:"chat_id,omitempty"`
	// Optional. Unique identifier of the target user (Only for chat_member)
	UserId int64 `json:"user_id,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedBotCommandScope) GetType() string {
	return v.Type
}

// MergedBotCommandScope.botCommandScope is a dummy method to avoid interface implementation.
func (v MergedBotCommandScope) botCommandScope() {}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v MergedBotCommandScope) MergeBotCommandScope() MergedBotCommandScope {
	return v
}

// BotCommandScopeAllChatAdministrators (https://core.telegram.org/bots/api#botcommandscopeallchatadministrators)
//
// Represents the scope of bot commands, covering all group and supergroup chat administrators.
type BotCommandScopeAllChatAdministrators struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeAllChatAdministrators) GetType() string {
	return "all_chat_administrators"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeAllChatAdministrators) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type: "all_chat_administrators",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeAllChatAdministrators) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeAllChatAdministrators
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "all_chat_administrators",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeAllChatAdministrators.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeAllChatAdministrators) botCommandScope() {}

// BotCommandScopeAllGroupChats (https://core.telegram.org/bots/api#botcommandscopeallgroupchats)
//
// Represents the scope of bot commands, covering all group and supergroup chats.
type BotCommandScopeAllGroupChats struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeAllGroupChats) GetType() string {
	return "all_group_chats"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeAllGroupChats) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type: "all_group_chats",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeAllGroupChats) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeAllGroupChats
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "all_group_chats",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeAllGroupChats.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeAllGroupChats) botCommandScope() {}

// BotCommandScopeAllPrivateChats (https://core.telegram.org/bots/api#botcommandscopeallprivatechats)
//
// Represents the scope of bot commands, covering all private chats.
type BotCommandScopeAllPrivateChats struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeAllPrivateChats) GetType() string {
	return "all_private_chats"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeAllPrivateChats) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type: "all_private_chats",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeAllPrivateChats) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeAllPrivateChats
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "all_private_chats",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeAllPrivateChats.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeAllPrivateChats) botCommandScope() {}

// BotCommandScopeChat (https://core.telegram.org/bots/api#botcommandscopechat)
//
// Represents the scope of bot commands, covering a specific chat.
type BotCommandScopeChat struct {
	// Unique identifier for the target chat
	ChatId int64 `json:"chat_id"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeChat) GetType() string {
	return "chat"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeChat) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type:   "chat",
		ChatId: v.ChatId,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeChat) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeChat
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "chat",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeChat.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeChat) botCommandScope() {}

// BotCommandScopeChatAdministrators (https://core.telegram.org/bots/api#botcommandscopechatadministrators)
//
// Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.
type BotCommandScopeChatAdministrators struct {
	// Unique identifier for the target chat
	ChatId int64 `json:"chat_id"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeChatAdministrators) GetType() string {
	return "chat_administrators"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeChatAdministrators) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type:   "chat_administrators",
		ChatId: v.ChatId,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeChatAdministrators) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeChatAdministrators
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "chat_administrators",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeChatAdministrators.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeChatAdministrators) botCommandScope() {}

// BotCommandScopeChatMember (https://core.telegram.org/bots/api#botcommandscopechatmember)
//
// Represents the scope of bot commands, covering a specific member of a group or supergroup chat.
type BotCommandScopeChatMember struct {
	// Unique identifier for the target chat
	ChatId int64 `json:"chat_id"`
	// Unique identifier of the target user
	UserId int64 `json:"user_id"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeChatMember) GetType() string {
	return "chat_member"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeChatMember) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type:   "chat_member",
		ChatId: v.ChatId,
		UserId: v.UserId,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeChatMember) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeChatMember
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "chat_member",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeChatMember.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeChatMember) botCommandScope() {}

// BotCommandScopeDefault (https://core.telegram.org/bots/api#botcommandscopedefault)
//
// Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.
type BotCommandScopeDefault struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v BotCommandScopeDefault) GetType() string {
	return "default"
}

// MergeBotCommandScope returns a MergedBotCommandScope struct to simplify working with types in a non-generic world.
func (v BotCommandScopeDefault) MergeBotCommandScope() MergedBotCommandScope {
	return MergedBotCommandScope{
		Type: "default",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v BotCommandScopeDefault) MarshalJSON() ([]byte, error) {
	type alias BotCommandScopeDefault
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "default",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// BotCommandScopeDefault.botCommandScope is a dummy method to avoid interface implementation.
func (v BotCommandScopeDefault) botCommandScope() {}

// BotDescription (https://core.telegram.org/bots/api#botdescription)
//
// This object represents the bot's description.
type BotDescription struct {
	// The bot's description
	Description string `json:"description"`
}

// BotName (https://core.telegram.org/bots/api#botname)
//
// This object represents the bot's name.
type BotName struct {
	// The bot's name
	Name string `json:"name"`
}

// BotShortDescription (https://core.telegram.org/bots/api#botshortdescription)
//
// This object represents the bot's short description.
type BotShortDescription struct {
	// The bot's short description
	ShortDescription string `json:"short_description"`
}

// BusinessConnection (https://core.telegram.org/bots/api#businessconnection)
//
// Describes the connection of the bot with a business account.
type BusinessConnection struct {
	// Unique identifier of the business connection
	Id string `json:"id"`
	// Business account user that created the business connection
	User User `json:"user"`
	// Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
	UserChatId int64 `json:"user_chat_id"`
	// Date the connection was established in Unix time
	Date int64 `json:"date"`
	// True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours
	CanReply bool `json:"can_reply"`
	// True, if the connection is active
	IsEnabled bool `json:"is_enabled"`
}

// BusinessIntro (https://core.telegram.org/bots/api#businessintro)
//
// Contains information about the start page settings of a Telegram Business account.
type BusinessIntro struct {
	// Optional. Title text of the business intro
	Title string `json:"title,omitempty"`
	// Optional. Message text of the business intro
	Message string `json:"message,omitempty"`
	// Optional. Sticker of the business intro
	Sticker *Sticker `json:"sticker,omitempty"`
}

// BusinessLocation (https://core.telegram.org/bots/api#businesslocation)
//
// Contains information about the location of a Telegram Business account.
type BusinessLocation struct {
	// Address of the business
	Address string `json:"address"`
	// Optional. Location of the business
	Location *Location `json:"location,omitempty"`
}

// BusinessMessagesDeleted (https://core.telegram.org/bots/api#businessmessagesdeleted)
//
// This object is received when messages are deleted from a connected business account.
type BusinessMessagesDeleted struct {
	// Unique identifier of the business connection
	BusinessConnectionId string `json:"business_connection_id"`
	// Information about a chat in the business account. The bot may not have access to the chat or the corresponding user.
	Chat Chat `json:"chat"`
	// The list of identifiers of deleted messages in the chat of the business account
	MessageIds []int64 `json:"message_ids,omitempty"`
}

// BusinessOpeningHours (https://core.telegram.org/bots/api#businessopeninghours)
//
// Describes the opening hours of a business.
type BusinessOpeningHours struct {
	// Unique name of the time zone for which the opening hours are defined
	TimeZoneName string `json:"time_zone_name"`
	// List of time intervals describing business opening hours
	OpeningHours []BusinessOpeningHoursInterval `json:"opening_hours,omitempty"`
}

// BusinessOpeningHoursInterval (https://core.telegram.org/bots/api#businessopeninghoursinterval)
//
// Describes an interval of time during which a business is open.
type BusinessOpeningHoursInterval struct {
	// The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60
	OpeningMinute int64 `json:"opening_minute"`
	// The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60
	ClosingMinute int64 `json:"closing_minute"`
}

// CallbackGame (https://core.telegram.org/bots/api#callbackgame)
//
// A placeholder, currently holds no information. Use BotFather to set up your game.
type CallbackGame struct{}

// CallbackQuery (https://core.telegram.org/bots/api#callbackquery)
//
// This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.
type CallbackQuery struct {
	// Unique identifier for this query
	Id string `json:"id"`
	// Sender
	From User `json:"from"`
	// Optional. Message sent by the bot with the callback button that originated the query
	Message MaybeInaccessibleMessage `json:"message,omitempty"`
	// Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
	InlineMessageId string `json:"inline_message_id,omitempty"`
	// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.
	ChatInstance string `json:"chat_instance"`
	// Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data.
	Data string `json:"data,omitempty"`
	// Optional. Short name of a Game to be returned, serves as the unique identifier for the game
	GameShortName string `json:"game_short_name,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *CallbackQuery) UnmarshalJSON(b []byte) error {
	// All fields in CallbackQuery, with interface fields as json.RawMessage
	type tmp struct {
		Id              string          `json:"id"`
		From            User            `json:"from"`
		Message         json.RawMessage `json:"message"`
		InlineMessageId string          `json:"inline_message_id"`
		ChatInstance    string          `json:"chat_instance"`
		Data            string          `json:"data"`
		GameShortName   string          `json:"game_short_name"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal CallbackQuery JSON into tmp struct: %w", err)
	}

	v.Id = t.Id
	v.From = t.From
	v.Message, err = unmarshalMaybeInaccessibleMessage(t.Message)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Message: %w", err)
	}
	v.InlineMessageId = t.InlineMessageId
	v.ChatInstance = t.ChatInstance
	v.Data = t.Data
	v.GameShortName = t.GameShortName

	return nil
}

// Chat (https://core.telegram.org/bots/api#chat)
//
// This object represents a chat.
type Chat struct {
	// Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	Id int64 `json:"id"`
	// Type of the chat, can be either "private", "group", "supergroup" or "channel"
	Type string `json:"type"`
	// Optional. Title, for supergroups, channels and group chats
	Title string `json:"title,omitempty"`
	// Optional. Username, for private chats, supergroups and channels if available
	Username string `json:"username,omitempty"`
	// Optional. First name of the other party in a private chat
	FirstName string `json:"first_name,omitempty"`
	// Optional. Last name of the other party in a private chat
	LastName string `json:"last_name,omitempty"`
	// Optional. True, if the supergroup chat is a forum (has topics enabled)
	IsForum bool `json:"is_forum,omitempty"`
}

// ChatAdministratorRights (https://core.telegram.org/bots/api#chatadministratorrights)
//
// Represents the rights of an administrator in a chat.
type ChatAdministratorRights struct {
	// True, if the user's presence in the chat is hidden
	IsAnonymous bool `json:"is_anonymous"`
	// True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// True, if the administrator can delete messages of other users
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can manage video chats
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
	CanPromoteMembers bool `json:"can_promote_members"`
	// True, if the user is allowed to change the chat title, photo and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can post stories to the chat
	CanPostStories bool `json:"can_post_stories"`
	// True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive
	CanEditStories bool `json:"can_edit_stories"`
	// True, if the administrator can delete stories posted by other users
	CanDeleteStories bool `json:"can_delete_stories"`
	// Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only
	CanPostMessages bool `json:"can_post_messages,omitempty"`
	// Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only
	CanEditMessages bool `json:"can_edit_messages,omitempty"`
	// Optional. True, if the user is allowed to pin messages; for groups and supergroups only
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
	// Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
	CanManageTopics bool `json:"can_manage_topics,omitempty"`
}

// ChatBackground (https://core.telegram.org/bots/api#chatbackground)
//
// This object represents a chat background.
type ChatBackground struct {
	// Type of the background
	Type BackgroundType `json:"type"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ChatBackground) UnmarshalJSON(b []byte) error {
	// All fields in ChatBackground, with interface fields as json.RawMessage
	type tmp struct {
		Type json.RawMessage `json:"type"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ChatBackground JSON into tmp struct: %w", err)
	}

	v.Type, err = unmarshalBackgroundType(t.Type)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Type: %w", err)
	}

	return nil
}

// ChatBoost (https://core.telegram.org/bots/api#chatboost)
//
// This object contains information about a chat boost.
type ChatBoost struct {
	// Unique identifier of the boost
	BoostId string `json:"boost_id"`
	// Point in time (Unix timestamp) when the chat was boosted
	AddDate int64 `json:"add_date"`
	// Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's Telegram Premium subscription is prolonged
	ExpirationDate int64 `json:"expiration_date"`
	// Source of the added boost
	Source ChatBoostSource `json:"source"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ChatBoost) UnmarshalJSON(b []byte) error {
	// All fields in ChatBoost, with interface fields as json.RawMessage
	type tmp struct {
		BoostId        string          `json:"boost_id"`
		AddDate        int64           `json:"add_date"`
		ExpirationDate int64           `json:"expiration_date"`
		Source         json.RawMessage `json:"source"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ChatBoost JSON into tmp struct: %w", err)
	}

	v.BoostId = t.BoostId
	v.AddDate = t.AddDate
	v.ExpirationDate = t.ExpirationDate
	v.Source, err = unmarshalChatBoostSource(t.Source)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Source: %w", err)
	}

	return nil
}

// ChatBoostAdded (https://core.telegram.org/bots/api#chatboostadded)
//
// This object represents a service message about a user boosting a chat.
type ChatBoostAdded struct {
	// Number of boosts added by the user
	BoostCount int64 `json:"boost_count"`
}

// ChatBoostRemoved (https://core.telegram.org/bots/api#chatboostremoved)
//
// This object represents a boost removed from a chat.
type ChatBoostRemoved struct {
	// Chat which was boosted
	Chat Chat `json:"chat"`
	// Unique identifier of the boost
	BoostId string `json:"boost_id"`
	// Point in time (Unix timestamp) when the boost was removed
	RemoveDate int64 `json:"remove_date"`
	// Source of the removed boost
	Source ChatBoostSource `json:"source"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ChatBoostRemoved) UnmarshalJSON(b []byte) error {
	// All fields in ChatBoostRemoved, with interface fields as json.RawMessage
	type tmp struct {
		Chat       Chat            `json:"chat"`
		BoostId    string          `json:"boost_id"`
		RemoveDate int64           `json:"remove_date"`
		Source     json.RawMessage `json:"source"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ChatBoostRemoved JSON into tmp struct: %w", err)
	}

	v.Chat = t.Chat
	v.BoostId = t.BoostId
	v.RemoveDate = t.RemoveDate
	v.Source, err = unmarshalChatBoostSource(t.Source)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Source: %w", err)
	}

	return nil
}

// ChatBoostSource (https://core.telegram.org/bots/api#chatboostsource)
//
// This object describes the source of a chat boost. It can be one of
//   - ChatBoostSourcePremium
//   - ChatBoostSourceGiftCode
//   - ChatBoostSourceGiveaway
type ChatBoostSource interface {
	GetSource() string
	// MergeChatBoostSource returns a MergedChatBoostSource struct to simplify working with complex telegram types in a non-generic world.
	MergeChatBoostSource() MergedChatBoostSource
	// chatBoostSource exists to avoid external types implementing this interface.
	chatBoostSource()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ ChatBoostSource = ChatBoostSourcePremium{}
	_ ChatBoostSource = ChatBoostSourceGiftCode{}
	_ ChatBoostSource = ChatBoostSourceGiveaway{}
)

// MergedChatBoostSource is a helper type to simplify interactions with the various ChatBoostSource subtypes.
type MergedChatBoostSource struct {
	// Source of the boost
	Source string `json:"source"`
	// Optional. User that provided the boost (may be empty for ChatBoostSourceGiveaway)
	User *User `json:"user,omitempty"`
	// Optional. Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet. (Only for giveaway)
	GiveawayMessageId int64 `json:"giveaway_message_id,omitempty"`
	// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only (Only for giveaway)
	PrizeStarCount int64 `json:"prize_star_count,omitempty"`
	// Optional. True, if the giveaway was completed, but there was no user to win the prize (Only for giveaway)
	IsUnclaimed bool `json:"is_unclaimed,omitempty"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v MergedChatBoostSource) GetSource() string {
	return v.Source
}

// MergedChatBoostSource.chatBoostSource is a dummy method to avoid interface implementation.
func (v MergedChatBoostSource) chatBoostSource() {}

// MergeChatBoostSource returns a MergedChatBoostSource struct to simplify working with types in a non-generic world.
func (v MergedChatBoostSource) MergeChatBoostSource() MergedChatBoostSource {
	return v
}

// unmarshalChatBoostSourceArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalChatBoostSource.
func unmarshalChatBoostSourceArray(d json.RawMessage) ([]ChatBoostSource, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial ChatBoostSource JSON into an array: %w", err)
	}

	var vs []ChatBoostSource
	for idx, d := range ds {
		v, err := unmarshalChatBoostSource(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatBoostSource on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalChatBoostSource is a JSON unmarshal helper to marshal the right structs into a ChatBoostSource interface
// based on the Source field.
func unmarshalChatBoostSource(d json.RawMessage) (ChatBoostSource, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Source string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal ChatBoostSource for constant field 'Source': %w", err)
	}

	switch t.Source {
	case "premium":
		s := ChatBoostSourcePremium{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatBoostSource for value 'premium': %w", err)
		}
		return s, nil

	case "gift_code":
		s := ChatBoostSourceGiftCode{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatBoostSource for value 'gift_code': %w", err)
		}
		return s, nil

	case "giveaway":
		s := ChatBoostSourceGiveaway{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatBoostSource for value 'giveaway': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for ChatBoostSource with Source %v", t.Source)
}

// ChatBoostSourceGiftCode (https://core.telegram.org/bots/api#chatboostsourcegiftcode)
//
// The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
type ChatBoostSourceGiftCode struct {
	// User for which the gift code was created
	User User `json:"user"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v ChatBoostSourceGiftCode) GetSource() string {
	return "gift_code"
}

// MergeChatBoostSource returns a MergedChatBoostSource struct to simplify working with types in a non-generic world.
func (v ChatBoostSourceGiftCode) MergeChatBoostSource() MergedChatBoostSource {
	return MergedChatBoostSource{
		Source: "gift_code",
		User:   &v.User,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v ChatBoostSourceGiftCode) MarshalJSON() ([]byte, error) {
	type alias ChatBoostSourceGiftCode
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "gift_code",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatBoostSourceGiftCode.chatBoostSource is a dummy method to avoid interface implementation.
func (v ChatBoostSourceGiftCode) chatBoostSource() {}

// ChatBoostSourceGiveaway (https://core.telegram.org/bots/api#chatboostsourcegiveaway)
//
// The boost was obtained by the creation of a Telegram Premium or a Telegram Star giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription for Telegram Premium giveaways and prize_star_count / 500 times for one year for Telegram Star giveaways.
type ChatBoostSourceGiveaway struct {
	// Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet.
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// Optional. User that won the prize in the giveaway if any; for Telegram Premium giveaways only
	User *User `json:"user,omitempty"`
	// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
	PrizeStarCount int64 `json:"prize_star_count,omitempty"`
	// Optional. True, if the giveaway was completed, but there was no user to win the prize
	IsUnclaimed bool `json:"is_unclaimed,omitempty"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v ChatBoostSourceGiveaway) GetSource() string {
	return "giveaway"
}

// MergeChatBoostSource returns a MergedChatBoostSource struct to simplify working with types in a non-generic world.
func (v ChatBoostSourceGiveaway) MergeChatBoostSource() MergedChatBoostSource {
	return MergedChatBoostSource{
		Source:            "giveaway",
		GiveawayMessageId: v.GiveawayMessageId,
		User:              v.User,
		PrizeStarCount:    v.PrizeStarCount,
		IsUnclaimed:       v.IsUnclaimed,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v ChatBoostSourceGiveaway) MarshalJSON() ([]byte, error) {
	type alias ChatBoostSourceGiveaway
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "giveaway",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatBoostSourceGiveaway.chatBoostSource is a dummy method to avoid interface implementation.
func (v ChatBoostSourceGiveaway) chatBoostSource() {}

// ChatBoostSourcePremium (https://core.telegram.org/bots/api#chatboostsourcepremium)
//
// The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.
type ChatBoostSourcePremium struct {
	// User that boosted the chat
	User User `json:"user"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v ChatBoostSourcePremium) GetSource() string {
	return "premium"
}

// MergeChatBoostSource returns a MergedChatBoostSource struct to simplify working with types in a non-generic world.
func (v ChatBoostSourcePremium) MergeChatBoostSource() MergedChatBoostSource {
	return MergedChatBoostSource{
		Source: "premium",
		User:   &v.User,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v ChatBoostSourcePremium) MarshalJSON() ([]byte, error) {
	type alias ChatBoostSourcePremium
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "premium",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatBoostSourcePremium.chatBoostSource is a dummy method to avoid interface implementation.
func (v ChatBoostSourcePremium) chatBoostSource() {}

// ChatBoostUpdated (https://core.telegram.org/bots/api#chatboostupdated)
//
// This object represents a boost added to a chat or changed.
type ChatBoostUpdated struct {
	// Chat which was boosted
	Chat Chat `json:"chat"`
	// Information about the chat boost
	Boost ChatBoost `json:"boost"`
}

// ChatFullInfo (https://core.telegram.org/bots/api#chatfullinfo)
//
// This object contains full information about a chat.
type ChatFullInfo struct {
	// Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	Id int64 `json:"id"`
	// Type of the chat, can be either "private", "group", "supergroup" or "channel"
	Type string `json:"type"`
	// Optional. Title, for supergroups, channels and group chats
	Title string `json:"title,omitempty"`
	// Optional. Username, for private chats, supergroups and channels if available
	Username string `json:"username,omitempty"`
	// Optional. First name of the other party in a private chat
	FirstName string `json:"first_name,omitempty"`
	// Optional. Last name of the other party in a private chat
	LastName string `json:"last_name,omitempty"`
	// Optional. True, if the supergroup chat is a forum (has topics enabled)
	IsForum bool `json:"is_forum,omitempty"`
	// Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details.
	AccentColorId int64 `json:"accent_color_id"`
	// The maximum number of reactions that can be set on a message in the chat
	MaxReactionCount int64 `json:"max_reaction_count"`
	// Optional. Chat photo
	Photo *ChatPhoto `json:"photo,omitempty"`
	// Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels
	ActiveUsernames []string `json:"active_usernames,omitempty"`
	// Optional. For private chats, the date of birth of the user
	Birthdate *Birthdate `json:"birthdate,omitempty"`
	// Optional. For private chats with business accounts, the intro of the business
	BusinessIntro *BusinessIntro `json:"business_intro,omitempty"`
	// Optional. For private chats with business accounts, the location of the business
	BusinessLocation *BusinessLocation `json:"business_location,omitempty"`
	// Optional. For private chats with business accounts, the opening hours of the business
	BusinessOpeningHours *BusinessOpeningHours `json:"business_opening_hours,omitempty"`
	// Optional. For private chats, the personal channel of the user
	PersonalChat *Chat `json:"personal_chat,omitempty"`
	// Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed.
	AvailableReactions []ReactionType `json:"available_reactions,omitempty"`
	// Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background
	BackgroundCustomEmojiId string `json:"background_custom_emoji_id,omitempty"`
	// Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details.
	ProfileAccentColorId int64 `json:"profile_accent_color_id,omitempty"`
	// Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background
	ProfileBackgroundCustomEmojiId string `json:"profile_background_custom_emoji_id,omitempty"`
	// Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat
	EmojiStatusCustomEmojiId string `json:"emoji_status_custom_emoji_id,omitempty"`
	// Optional. Expiration date of the emoji status of the chat or the other party in a private chat, in Unix time, if any
	EmojiStatusExpirationDate int64 `json:"emoji_status_expiration_date,omitempty"`
	// Optional. Bio of the other party in a private chat
	Bio string `json:"bio,omitempty"`
	// Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user
	HasPrivateForwards bool `json:"has_private_forwards,omitempty"`
	// Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat
	HasRestrictedVoiceAndVideoMessages bool `json:"has_restricted_voice_and_video_messages,omitempty"`
	// Optional. True, if users need to join the supergroup before they can send messages
	JoinToSendMessages bool `json:"join_to_send_messages,omitempty"`
	// Optional. True, if all users directly joining the supergroup without using an invite link need to be approved by supergroup administrators
	JoinByRequest bool `json:"join_by_request,omitempty"`
	// Optional. Description, for groups, supergroups and channel chats
	Description string `json:"description,omitempty"`
	// Optional. Primary invite link, for groups, supergroups and channel chats
	InviteLink string `json:"invite_link,omitempty"`
	// Optional. The most recent pinned message (by sending date)
	PinnedMessage *Message `json:"pinned_message,omitempty"`
	// Optional. Default chat member permissions, for groups and supergroups
	Permissions *ChatPermissions `json:"permissions,omitempty"`
	// Optional. True, if paid media messages can be sent or forwarded to the channel chat. The field is available only for channel chats.
	CanSendPaidMedia bool `json:"can_send_paid_media,omitempty"`
	// Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds
	SlowModeDelay int64 `json:"slow_mode_delay,omitempty"`
	// Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions
	UnrestrictBoostCount int64 `json:"unrestrict_boost_count,omitempty"`
	// Optional. The time after which all messages sent to the chat will be automatically deleted; in seconds
	MessageAutoDeleteTime int64 `json:"message_auto_delete_time,omitempty"`
	// Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators.
	HasAggressiveAntiSpamEnabled bool `json:"has_aggressive_anti_spam_enabled,omitempty"`
	// Optional. True, if non-administrators can only get the list of bots and administrators in the chat
	HasHiddenMembers bool `json:"has_hidden_members,omitempty"`
	// Optional. True, if messages from the chat can't be forwarded to other chats
	HasProtectedContent bool `json:"has_protected_content,omitempty"`
	// Optional. True, if new chat members will have access to old messages; available only to chat administrators
	HasVisibleHistory bool `json:"has_visible_history,omitempty"`
	// Optional. For supergroups, name of the group sticker set
	StickerSetName string `json:"sticker_set_name,omitempty"`
	// Optional. True, if the bot can change the group sticker set
	CanSetStickerSet bool `json:"can_set_sticker_set,omitempty"`
	// Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group.
	CustomEmojiStickerSetName string `json:"custom_emoji_sticker_set_name,omitempty"`
	// Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
	LinkedChatId int64 `json:"linked_chat_id,omitempty"`
	// Optional. For supergroups, the location to which the supergroup is connected
	Location *ChatLocation `json:"location,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ChatFullInfo) UnmarshalJSON(b []byte) error {
	// All fields in ChatFullInfo, with interface fields as json.RawMessage
	type tmp struct {
		Id                                 int64                 `json:"id"`
		Type                               string                `json:"type"`
		Title                              string                `json:"title"`
		Username                           string                `json:"username"`
		FirstName                          string                `json:"first_name"`
		LastName                           string                `json:"last_name"`
		IsForum                            bool                  `json:"is_forum"`
		AccentColorId                      int64                 `json:"accent_color_id"`
		MaxReactionCount                   int64                 `json:"max_reaction_count"`
		Photo                              *ChatPhoto            `json:"photo"`
		ActiveUsernames                    []string              `json:"active_usernames"`
		Birthdate                          *Birthdate            `json:"birthdate"`
		BusinessIntro                      *BusinessIntro        `json:"business_intro"`
		BusinessLocation                   *BusinessLocation     `json:"business_location"`
		BusinessOpeningHours               *BusinessOpeningHours `json:"business_opening_hours"`
		PersonalChat                       *Chat                 `json:"personal_chat"`
		AvailableReactions                 json.RawMessage       `json:"available_reactions"`
		BackgroundCustomEmojiId            string                `json:"background_custom_emoji_id"`
		ProfileAccentColorId               int64                 `json:"profile_accent_color_id"`
		ProfileBackgroundCustomEmojiId     string                `json:"profile_background_custom_emoji_id"`
		EmojiStatusCustomEmojiId           string                `json:"emoji_status_custom_emoji_id"`
		EmojiStatusExpirationDate          int64                 `json:"emoji_status_expiration_date"`
		Bio                                string                `json:"bio"`
		HasPrivateForwards                 bool                  `json:"has_private_forwards"`
		HasRestrictedVoiceAndVideoMessages bool                  `json:"has_restricted_voice_and_video_messages"`
		JoinToSendMessages                 bool                  `json:"join_to_send_messages"`
		JoinByRequest                      bool                  `json:"join_by_request"`
		Description                        string                `json:"description"`
		InviteLink                         string                `json:"invite_link"`
		PinnedMessage                      *Message              `json:"pinned_message"`
		Permissions                        *ChatPermissions      `json:"permissions"`
		CanSendPaidMedia                   bool                  `json:"can_send_paid_media"`
		SlowModeDelay                      int64                 `json:"slow_mode_delay"`
		UnrestrictBoostCount               int64                 `json:"unrestrict_boost_count"`
		MessageAutoDeleteTime              int64                 `json:"message_auto_delete_time"`
		HasAggressiveAntiSpamEnabled       bool                  `json:"has_aggressive_anti_spam_enabled"`
		HasHiddenMembers                   bool                  `json:"has_hidden_members"`
		HasProtectedContent                bool                  `json:"has_protected_content"`
		HasVisibleHistory                  bool                  `json:"has_visible_history"`
		StickerSetName                     string                `json:"sticker_set_name"`
		CanSetStickerSet                   bool                  `json:"can_set_sticker_set"`
		CustomEmojiStickerSetName          string                `json:"custom_emoji_sticker_set_name"`
		LinkedChatId                       int64                 `json:"linked_chat_id"`
		Location                           *ChatLocation         `json:"location"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ChatFullInfo JSON into tmp struct: %w", err)
	}

	v.Id = t.Id
	v.Type = t.Type
	v.Title = t.Title
	v.Username = t.Username
	v.FirstName = t.FirstName
	v.LastName = t.LastName
	v.IsForum = t.IsForum
	v.AccentColorId = t.AccentColorId
	v.MaxReactionCount = t.MaxReactionCount
	v.Photo = t.Photo
	v.ActiveUsernames = t.ActiveUsernames
	v.Birthdate = t.Birthdate
	v.BusinessIntro = t.BusinessIntro
	v.BusinessLocation = t.BusinessLocation
	v.BusinessOpeningHours = t.BusinessOpeningHours
	v.PersonalChat = t.PersonalChat
	v.AvailableReactions, err = unmarshalReactionTypeArray(t.AvailableReactions)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field AvailableReactions: %w", err)
	}
	v.BackgroundCustomEmojiId = t.BackgroundCustomEmojiId
	v.ProfileAccentColorId = t.ProfileAccentColorId
	v.ProfileBackgroundCustomEmojiId = t.ProfileBackgroundCustomEmojiId
	v.EmojiStatusCustomEmojiId = t.EmojiStatusCustomEmojiId
	v.EmojiStatusExpirationDate = t.EmojiStatusExpirationDate
	v.Bio = t.Bio
	v.HasPrivateForwards = t.HasPrivateForwards
	v.HasRestrictedVoiceAndVideoMessages = t.HasRestrictedVoiceAndVideoMessages
	v.JoinToSendMessages = t.JoinToSendMessages
	v.JoinByRequest = t.JoinByRequest
	v.Description = t.Description
	v.InviteLink = t.InviteLink
	v.PinnedMessage = t.PinnedMessage
	v.Permissions = t.Permissions
	v.CanSendPaidMedia = t.CanSendPaidMedia
	v.SlowModeDelay = t.SlowModeDelay
	v.UnrestrictBoostCount = t.UnrestrictBoostCount
	v.MessageAutoDeleteTime = t.MessageAutoDeleteTime
	v.HasAggressiveAntiSpamEnabled = t.HasAggressiveAntiSpamEnabled
	v.HasHiddenMembers = t.HasHiddenMembers
	v.HasProtectedContent = t.HasProtectedContent
	v.HasVisibleHistory = t.HasVisibleHistory
	v.StickerSetName = t.StickerSetName
	v.CanSetStickerSet = t.CanSetStickerSet
	v.CustomEmojiStickerSetName = t.CustomEmojiStickerSetName
	v.LinkedChatId = t.LinkedChatId
	v.Location = t.Location

	return nil
}

// ChatInviteLink (https://core.telegram.org/bots/api#chatinvitelink)
//
// Represents an invite link for a chat.
type ChatInviteLink struct {
	// The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with "...".
	InviteLink string `json:"invite_link"`
	// Creator of the link
	Creator User `json:"creator"`
	// True, if users joining the chat via the link need to be approved by chat administrators
	CreatesJoinRequest bool `json:"creates_join_request"`
	// True, if the link is primary
	IsPrimary bool `json:"is_primary"`
	// True, if the link is revoked
	IsRevoked bool `json:"is_revoked"`
	// Optional. Invite link name
	Name string `json:"name,omitempty"`
	// Optional. Point in time (Unix timestamp) when the link will expire or has been expired
	ExpireDate int64 `json:"expire_date,omitempty"`
	// Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999
	MemberLimit int64 `json:"member_limit,omitempty"`
	// Optional. Number of pending join requests created using this link
	PendingJoinRequestCount int64 `json:"pending_join_request_count,omitempty"`
	// Optional. The number of seconds the subscription will be active for before the next payment
	SubscriptionPeriod int64 `json:"subscription_period,omitempty"`
	// Optional. The amount of Telegram Stars a user must pay initially and after each subsequent subscription period to be a member of the chat using the link
	SubscriptionPrice int64 `json:"subscription_price,omitempty"`
}

// ChatJoinRequest (https://core.telegram.org/bots/api#chatjoinrequest)
//
// Represents a join request sent to a chat.
type ChatJoinRequest struct {
	// Chat to which the request was sent
	Chat Chat `json:"chat"`
	// User that sent the join request
	From User `json:"from"`
	// Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user.
	UserChatId int64 `json:"user_chat_id"`
	// Date the request was sent in Unix time
	Date int64 `json:"date"`
	// Optional. Bio of the user.
	Bio string `json:"bio,omitempty"`
	// Optional. Chat invite link that was used by the user to send the join request
	InviteLink *ChatInviteLink `json:"invite_link,omitempty"`
}

// ChatLocation (https://core.telegram.org/bots/api#chatlocation)
//
// Represents a location to which a chat is connected.
type ChatLocation struct {
	// The location to which the supergroup is connected. Can't be a live location.
	Location Location `json:"location"`
	// Location address; 1-64 characters, as defined by the chat owner
	Address string `json:"address"`
}

// ChatMember (https://core.telegram.org/bots/api#chatmember)
//
// This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:
//   - ChatMemberOwner
//   - ChatMemberAdministrator
//   - ChatMemberMember
//   - ChatMemberRestricted
//   - ChatMemberLeft
//   - ChatMemberBanned
type ChatMember interface {
	GetStatus() string
	GetUser() User
	// MergeChatMember returns a MergedChatMember struct to simplify working with complex telegram types in a non-generic world.
	MergeChatMember() MergedChatMember
	// chatMember exists to avoid external types implementing this interface.
	chatMember()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ ChatMember = ChatMemberOwner{}
	_ ChatMember = ChatMemberAdministrator{}
	_ ChatMember = ChatMemberMember{}
	_ ChatMember = ChatMemberRestricted{}
	_ ChatMember = ChatMemberLeft{}
	_ ChatMember = ChatMemberBanned{}
)

// MergedChatMember is a helper type to simplify interactions with the various ChatMember subtypes.
type MergedChatMember struct {
	// The member's status in the chat
	Status string `json:"status"`
	// Information about the user
	User User `json:"user"`
	// Optional. True, if the user's presence in the chat is hidden (Only for creator, administrator)
	IsAnonymous bool `json:"is_anonymous,omitempty"`
	// Optional. Custom title for this user (Only for creator, administrator)
	CustomTitle string `json:"custom_title,omitempty"`
	// Optional. True, if the bot is allowed to edit administrator privileges of that user (Only for administrator)
	CanBeEdited bool `json:"can_be_edited,omitempty"`
	// Optional. True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. (Only for administrator)
	CanManageChat bool `json:"can_manage_chat,omitempty"`
	// Optional. True, if the administrator can delete messages of other users (Only for administrator)
	CanDeleteMessages bool `json:"can_delete_messages,omitempty"`
	// Optional. True, if the administrator can manage video chats (Only for administrator)
	CanManageVideoChats bool `json:"can_manage_video_chats,omitempty"`
	// Optional. True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics (Only for administrator)
	CanRestrictMembers bool `json:"can_restrict_members,omitempty"`
	// Optional. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) (Only for administrator)
	CanPromoteMembers bool `json:"can_promote_members,omitempty"`
	// Optional. True, if the user is allowed to change the chat title, photo and other settings (Only for administrator, restricted)
	CanChangeInfo bool `json:"can_change_info,omitempty"`
	// Optional. True, if the user is allowed to invite new users to the chat (Only for administrator, restricted)
	CanInviteUsers bool `json:"can_invite_users,omitempty"`
	// Optional. True, if the administrator can post stories to the chat (Only for administrator)
	CanPostStories bool `json:"can_post_stories,omitempty"`
	// Optional. True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive (Only for administrator)
	CanEditStories bool `json:"can_edit_stories,omitempty"`
	// Optional. True, if the administrator can delete stories posted by other users (Only for administrator)
	CanDeleteStories bool `json:"can_delete_stories,omitempty"`
	// Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only (Only for administrator)
	CanPostMessages bool `json:"can_post_messages,omitempty"`
	// Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only (Only for administrator)
	CanEditMessages bool `json:"can_edit_messages,omitempty"`
	// Optional. True, if the user is allowed to pin messages; for groups and supergroups only (Only for administrator, restricted)
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
	// Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only (Only for administrator, restricted)
	CanManageTopics bool `json:"can_manage_topics,omitempty"`
	// Optional. Date when the user's subscription will expire; Unix time (Only for member, restricted, kicked)
	UntilDate int64 `json:"until_date,omitempty"`
	// Optional. True, if the user is a member of the chat at the moment of the request (Only for restricted)
	IsMember bool `json:"is_member,omitempty"`
	// Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues (Only for restricted)
	CanSendMessages bool `json:"can_send_messages,omitempty"`
	// Optional. True, if the user is allowed to send audios (Only for restricted)
	CanSendAudios bool `json:"can_send_audios,omitempty"`
	// Optional. True, if the user is allowed to send documents (Only for restricted)
	CanSendDocuments bool `json:"can_send_documents,omitempty"`
	// Optional. True, if the user is allowed to send photos (Only for restricted)
	CanSendPhotos bool `json:"can_send_photos,omitempty"`
	// Optional. True, if the user is allowed to send videos (Only for restricted)
	CanSendVideos bool `json:"can_send_videos,omitempty"`
	// Optional. True, if the user is allowed to send video notes (Only for restricted)
	CanSendVideoNotes bool `json:"can_send_video_notes,omitempty"`
	// Optional. True, if the user is allowed to send voice notes (Only for restricted)
	CanSendVoiceNotes bool `json:"can_send_voice_notes,omitempty"`
	// Optional. True, if the user is allowed to send polls (Only for restricted)
	CanSendPolls bool `json:"can_send_polls,omitempty"`
	// Optional. True, if the user is allowed to send animations, games, stickers and use inline bots (Only for restricted)
	CanSendOtherMessages bool `json:"can_send_other_messages,omitempty"`
	// Optional. True, if the user is allowed to add web page previews to their messages (Only for restricted)
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v MergedChatMember) GetStatus() string {
	return v.Status
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v MergedChatMember) GetUser() User {
	return v.User
}

// MergedChatMember.chatMember is a dummy method to avoid interface implementation.
func (v MergedChatMember) chatMember() {}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v MergedChatMember) MergeChatMember() MergedChatMember {
	return v
}

// unmarshalChatMemberArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalChatMember.
func unmarshalChatMemberArray(d json.RawMessage) ([]ChatMember, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial ChatMember JSON into an array: %w", err)
	}

	var vs []ChatMember
	for idx, d := range ds {
		v, err := unmarshalChatMember(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalChatMember is a JSON unmarshal helper to marshal the right structs into a ChatMember interface
// based on the Status field.
func unmarshalChatMember(d json.RawMessage) (ChatMember, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Status string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal ChatMember for constant field 'Status': %w", err)
	}

	switch t.Status {
	case "creator":
		s := ChatMemberOwner{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'creator': %w", err)
		}
		return s, nil

	case "administrator":
		s := ChatMemberAdministrator{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'administrator': %w", err)
		}
		return s, nil

	case "member":
		s := ChatMemberMember{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'member': %w", err)
		}
		return s, nil

	case "restricted":
		s := ChatMemberRestricted{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'restricted': %w", err)
		}
		return s, nil

	case "left":
		s := ChatMemberLeft{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'left': %w", err)
		}
		return s, nil

	case "kicked":
		s := ChatMemberBanned{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ChatMember for value 'kicked': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for ChatMember with Status %v", t.Status)
}

// ChatMemberAdministrator (https://core.telegram.org/bots/api#chatmemberadministrator)
//
// Represents a chat member that has some additional privileges.
type ChatMemberAdministrator struct {
	// Information about the user
	User User `json:"user"`
	// True, if the bot is allowed to edit administrator privileges of that user
	CanBeEdited bool `json:"can_be_edited"`
	// True, if the user's presence in the chat is hidden
	IsAnonymous bool `json:"is_anonymous"`
	// True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// True, if the administrator can delete messages of other users
	CanDeleteMessages bool `json:"can_delete_messages"`
	// True, if the administrator can manage video chats
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics
	CanRestrictMembers bool `json:"can_restrict_members"`
	// True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user)
	CanPromoteMembers bool `json:"can_promote_members"`
	// True, if the user is allowed to change the chat title, photo and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the administrator can post stories to the chat
	CanPostStories bool `json:"can_post_stories"`
	// True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive
	CanEditStories bool `json:"can_edit_stories"`
	// True, if the administrator can delete stories posted by other users
	CanDeleteStories bool `json:"can_delete_stories"`
	// Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only
	CanPostMessages bool `json:"can_post_messages,omitempty"`
	// Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only
	CanEditMessages bool `json:"can_edit_messages,omitempty"`
	// Optional. True, if the user is allowed to pin messages; for groups and supergroups only
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
	// Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only
	CanManageTopics bool `json:"can_manage_topics,omitempty"`
	// Optional. Custom title for this user
	CustomTitle string `json:"custom_title,omitempty"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberAdministrator) GetStatus() string {
	return "administrator"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberAdministrator) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberAdministrator) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status:              "administrator",
		User:                v.User,
		CanBeEdited:         v.CanBeEdited,
		IsAnonymous:         v.IsAnonymous,
		CanManageChat:       v.CanManageChat,
		CanDeleteMessages:   v.CanDeleteMessages,
		CanManageVideoChats: v.CanManageVideoChats,
		CanRestrictMembers:  v.CanRestrictMembers,
		CanPromoteMembers:   v.CanPromoteMembers,
		CanChangeInfo:       v.CanChangeInfo,
		CanInviteUsers:      v.CanInviteUsers,
		CanPostStories:      v.CanPostStories,
		CanEditStories:      v.CanEditStories,
		CanDeleteStories:    v.CanDeleteStories,
		CanPostMessages:     v.CanPostMessages,
		CanEditMessages:     v.CanEditMessages,
		CanPinMessages:      v.CanPinMessages,
		CanManageTopics:     v.CanManageTopics,
		CustomTitle:         v.CustomTitle,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberAdministrator) MarshalJSON() ([]byte, error) {
	type alias ChatMemberAdministrator
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "administrator",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberAdministrator.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberAdministrator) chatMember() {}

// ChatMemberBanned (https://core.telegram.org/bots/api#chatmemberbanned)
//
// Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.
type ChatMemberBanned struct {
	// Information about the user
	User User `json:"user"`
	// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned forever
	UntilDate int64 `json:"until_date"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberBanned) GetStatus() string {
	return "kicked"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberBanned) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberBanned) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status:    "kicked",
		User:      v.User,
		UntilDate: v.UntilDate,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberBanned) MarshalJSON() ([]byte, error) {
	type alias ChatMemberBanned
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "kicked",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberBanned.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberBanned) chatMember() {}

// ChatMemberLeft (https://core.telegram.org/bots/api#chatmemberleft)
//
// Represents a chat member that isn't currently a member of the chat, but may join it themselves.
type ChatMemberLeft struct {
	// Information about the user
	User User `json:"user"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberLeft) GetStatus() string {
	return "left"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberLeft) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberLeft) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status: "left",
		User:   v.User,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberLeft) MarshalJSON() ([]byte, error) {
	type alias ChatMemberLeft
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "left",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberLeft.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberLeft) chatMember() {}

// ChatMemberMember (https://core.telegram.org/bots/api#chatmembermember)
//
// Represents a chat member that has no additional privileges or restrictions.
type ChatMemberMember struct {
	// Information about the user
	User User `json:"user"`
	// Optional. Date when the user's subscription will expire; Unix time
	UntilDate int64 `json:"until_date,omitempty"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberMember) GetStatus() string {
	return "member"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberMember) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberMember) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status:    "member",
		User:      v.User,
		UntilDate: v.UntilDate,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberMember) MarshalJSON() ([]byte, error) {
	type alias ChatMemberMember
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "member",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberMember.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberMember) chatMember() {}

// ChatMemberOwner (https://core.telegram.org/bots/api#chatmemberowner)
//
// Represents a chat member that owns the chat and has all administrator privileges.
type ChatMemberOwner struct {
	// Information about the user
	User User `json:"user"`
	// True, if the user's presence in the chat is hidden
	IsAnonymous bool `json:"is_anonymous"`
	// Optional. Custom title for this user
	CustomTitle string `json:"custom_title,omitempty"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberOwner) GetStatus() string {
	return "creator"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberOwner) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberOwner) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status:      "creator",
		User:        v.User,
		IsAnonymous: v.IsAnonymous,
		CustomTitle: v.CustomTitle,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberOwner) MarshalJSON() ([]byte, error) {
	type alias ChatMemberOwner
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "creator",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberOwner.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberOwner) chatMember() {}

// ChatMemberRestricted (https://core.telegram.org/bots/api#chatmemberrestricted)
//
// Represents a chat member that is under certain restrictions in the chat. Supergroups only.
type ChatMemberRestricted struct {
	// Information about the user
	User User `json:"user"`
	// True, if the user is a member of the chat at the moment of the request
	IsMember bool `json:"is_member"`
	// True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
	CanSendMessages bool `json:"can_send_messages"`
	// True, if the user is allowed to send audios
	CanSendAudios bool `json:"can_send_audios"`
	// True, if the user is allowed to send documents
	CanSendDocuments bool `json:"can_send_documents"`
	// True, if the user is allowed to send photos
	CanSendPhotos bool `json:"can_send_photos"`
	// True, if the user is allowed to send videos
	CanSendVideos bool `json:"can_send_videos"`
	// True, if the user is allowed to send video notes
	CanSendVideoNotes bool `json:"can_send_video_notes"`
	// True, if the user is allowed to send voice notes
	CanSendVoiceNotes bool `json:"can_send_voice_notes"`
	// True, if the user is allowed to send polls
	CanSendPolls bool `json:"can_send_polls"`
	// True, if the user is allowed to send animations, games, stickers and use inline bots
	CanSendOtherMessages bool `json:"can_send_other_messages"`
	// True, if the user is allowed to add web page previews to their messages
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews"`
	// True, if the user is allowed to change the chat title, photo and other settings
	CanChangeInfo bool `json:"can_change_info"`
	// True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users"`
	// True, if the user is allowed to pin messages
	CanPinMessages bool `json:"can_pin_messages"`
	// True, if the user is allowed to create forum topics
	CanManageTopics bool `json:"can_manage_topics"`
	// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted forever
	UntilDate int64 `json:"until_date"`
}

// GetStatus is a helper method to easily access the common fields of an interface.
func (v ChatMemberRestricted) GetStatus() string {
	return "restricted"
}

// GetUser is a helper method to easily access the common fields of an interface.
func (v ChatMemberRestricted) GetUser() User {
	return v.User
}

// MergeChatMember returns a MergedChatMember struct to simplify working with types in a non-generic world.
func (v ChatMemberRestricted) MergeChatMember() MergedChatMember {
	return MergedChatMember{
		Status:                "restricted",
		User:                  v.User,
		IsMember:              v.IsMember,
		CanSendMessages:       v.CanSendMessages,
		CanSendAudios:         v.CanSendAudios,
		CanSendDocuments:      v.CanSendDocuments,
		CanSendPhotos:         v.CanSendPhotos,
		CanSendVideos:         v.CanSendVideos,
		CanSendVideoNotes:     v.CanSendVideoNotes,
		CanSendVoiceNotes:     v.CanSendVoiceNotes,
		CanSendPolls:          v.CanSendPolls,
		CanSendOtherMessages:  v.CanSendOtherMessages,
		CanAddWebPagePreviews: v.CanAddWebPagePreviews,
		CanChangeInfo:         v.CanChangeInfo,
		CanInviteUsers:        v.CanInviteUsers,
		CanPinMessages:        v.CanPinMessages,
		CanManageTopics:       v.CanManageTopics,
		UntilDate:             v.UntilDate,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Status value.
func (v ChatMemberRestricted) MarshalJSON() ([]byte, error) {
	type alias ChatMemberRestricted
	a := struct {
		Status string `json:"status"`
		alias
	}{
		Status: "restricted",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// ChatMemberRestricted.chatMember is a dummy method to avoid interface implementation.
func (v ChatMemberRestricted) chatMember() {}

// ChatMemberUpdated (https://core.telegram.org/bots/api#chatmemberupdated)
//
// This object represents changes in the status of a chat member.
type ChatMemberUpdated struct {
	// Chat the user belongs to
	Chat Chat `json:"chat"`
	// Performer of the action, which resulted in the change
	From User `json:"from"`
	// Date the change was done in Unix time
	Date int64 `json:"date"`
	// Previous information about the chat member
	OldChatMember ChatMember `json:"old_chat_member"`
	// New information about the chat member
	NewChatMember ChatMember `json:"new_chat_member"`
	// Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only.
	InviteLink *ChatInviteLink `json:"invite_link,omitempty"`
	// Optional. True, if the user joined the chat after sending a direct join request without using an invite link and being approved by an administrator
	ViaJoinRequest bool `json:"via_join_request,omitempty"`
	// Optional. True, if the user joined the chat via a chat folder invite link
	ViaChatFolderInviteLink bool `json:"via_chat_folder_invite_link,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ChatMemberUpdated) UnmarshalJSON(b []byte) error {
	// All fields in ChatMemberUpdated, with interface fields as json.RawMessage
	type tmp struct {
		Chat                    Chat            `json:"chat"`
		From                    User            `json:"from"`
		Date                    int64           `json:"date"`
		OldChatMember           json.RawMessage `json:"old_chat_member"`
		NewChatMember           json.RawMessage `json:"new_chat_member"`
		InviteLink              *ChatInviteLink `json:"invite_link"`
		ViaJoinRequest          bool            `json:"via_join_request"`
		ViaChatFolderInviteLink bool            `json:"via_chat_folder_invite_link"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ChatMemberUpdated JSON into tmp struct: %w", err)
	}

	v.Chat = t.Chat
	v.From = t.From
	v.Date = t.Date
	v.OldChatMember, err = unmarshalChatMember(t.OldChatMember)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field OldChatMember: %w", err)
	}
	v.NewChatMember, err = unmarshalChatMember(t.NewChatMember)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field NewChatMember: %w", err)
	}
	v.InviteLink = t.InviteLink
	v.ViaJoinRequest = t.ViaJoinRequest
	v.ViaChatFolderInviteLink = t.ViaChatFolderInviteLink

	return nil
}

// ChatPermissions (https://core.telegram.org/bots/api#chatpermissions)
//
// Describes actions that a non-administrator user is allowed to take in a chat.
type ChatPermissions struct {
	// Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues
	CanSendMessages bool `json:"can_send_messages,omitempty"`
	// Optional. True, if the user is allowed to send audios
	CanSendAudios bool `json:"can_send_audios,omitempty"`
	// Optional. True, if the user is allowed to send documents
	CanSendDocuments bool `json:"can_send_documents,omitempty"`
	// Optional. True, if the user is allowed to send photos
	CanSendPhotos bool `json:"can_send_photos,omitempty"`
	// Optional. True, if the user is allowed to send videos
	CanSendVideos bool `json:"can_send_videos,omitempty"`
	// Optional. True, if the user is allowed to send video notes
	CanSendVideoNotes bool `json:"can_send_video_notes,omitempty"`
	// Optional. True, if the user is allowed to send voice notes
	CanSendVoiceNotes bool `json:"can_send_voice_notes,omitempty"`
	// Optional. True, if the user is allowed to send polls
	CanSendPolls bool `json:"can_send_polls,omitempty"`
	// Optional. True, if the user is allowed to send animations, games, stickers and use inline bots
	CanSendOtherMessages bool `json:"can_send_other_messages,omitempty"`
	// Optional. True, if the user is allowed to add web page previews to their messages
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews,omitempty"`
	// Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
	CanChangeInfo bool `json:"can_change_info,omitempty"`
	// Optional. True, if the user is allowed to invite new users to the chat
	CanInviteUsers bool `json:"can_invite_users,omitempty"`
	// Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
	CanPinMessages bool `json:"can_pin_messages,omitempty"`
	// Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages
	CanManageTopics bool `json:"can_manage_topics,omitempty"`
}

// ChatPhoto (https://core.telegram.org/bots/api#chatphoto)
//
// This object represents a chat photo.
type ChatPhoto struct {
	// File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	SmallFileId string `json:"small_file_id"`
	// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	SmallFileUniqueId string `json:"small_file_unique_id"`
	// File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.
	BigFileId string `json:"big_file_id"`
	// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	BigFileUniqueId string `json:"big_file_unique_id"`
}

// ChatShared (https://core.telegram.org/bots/api#chatshared)
//
// This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.
type ChatShared struct {
	// Identifier of the request
	RequestId int64 `json:"request_id"`
	// Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means.
	ChatId int64 `json:"chat_id"`
	// Optional. Title of the chat, if the title was requested by the bot.
	Title string `json:"title,omitempty"`
	// Optional. Username of the chat, if the username was requested by the bot and available.
	Username string `json:"username,omitempty"`
	// Optional. Available sizes of the chat photo, if the photo was requested by the bot
	Photo []PhotoSize `json:"photo,omitempty"`
}

// ChosenInlineResult (https://core.telegram.org/bots/api#choseninlineresult)
//
// Represents a result of an inline query that was chosen by the user and sent to their chat partner.
// Note: It is necessary to enable inline feedback via @BotFather in order to receive these objects in updates.
type ChosenInlineResult struct {
	// The unique identifier for the result that was chosen
	ResultId string `json:"result_id"`
	// The user that chose the result
	From User `json:"from"`
	// Optional. Sender location, only for bots that require user location
	Location *Location `json:"location,omitempty"`
	// Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.
	InlineMessageId string `json:"inline_message_id,omitempty"`
	// The query that was used to obtain the result
	Query string `json:"query"`
}

// Contact (https://core.telegram.org/bots/api#contact)
//
// This object represents a phone contact.
type Contact struct {
	// Contact's phone number
	PhoneNumber string `json:"phone_number"`
	// Contact's first name
	FirstName string `json:"first_name"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
	UserId int64 `json:"user_id,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard
	Vcard string `json:"vcard,omitempty"`
}

// CopyTextButton (https://core.telegram.org/bots/api#copytextbutton)
//
// This object represents an inline keyboard button that copies specified text to the clipboard.
type CopyTextButton struct {
	// The text to be copied to the clipboard; 1-256 characters
	Text string `json:"text"`
}

// Dice (https://core.telegram.org/bots/api#dice)
//
// This object represents an animated emoji that displays a random value.
type Dice struct {
	// Emoji on which the dice throw animation is based
	Emoji string `json:"emoji"`
	// Value of the dice, 1-6 for "🎲", "🎯" and "🎳" base emoji, 1-5 for "🏀" and "⚽" base emoji, 1-64 for "🎰" base emoji
	Value int64 `json:"value"`
}

// Document (https://core.telegram.org/bots/api#document)
//
// This object represents a general file (as opposed to photos, voice messages and audio files).
type Document struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Optional. Document thumbnail as defined by the sender
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
	// Optional. Original filename as defined by the sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by the sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
}

// EncryptedCredentials (https://core.telegram.org/bots/api#encryptedcredentials)
//
// Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.
type EncryptedCredentials struct {
	// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication
	Data string `json:"data"`
	// Base64-encoded data hash for data authentication
	Hash string `json:"hash"`
	// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
	Secret string `json:"secret"`
}

// EncryptedPassportElement (https://core.telegram.org/bots/api#encryptedpassportelement)
//
// Describes documents or other Telegram Passport elements shared with the bot by the user.
type EncryptedPassportElement struct {
	// Element type. One of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration", "phone_number", "email".
	Type string `json:"type"`
	// Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for "personal_details", "passport", "driver_license", "identity_card", "internal_passport" and "address" types. Can be decrypted and verified using the accompanying EncryptedCredentials.
	Data string `json:"data,omitempty"`
	// Optional. User's verified phone number; available only for "phone_number" type
	PhoneNumber string `json:"phone_number,omitempty"`
	// Optional. User's verified email address; available only for "email" type
	Email string `json:"email,omitempty"`
	// Optional. Array of encrypted files with documents provided by the user; available only for "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Files []PassportFile `json:"files,omitempty"`
	// Optional. Encrypted file with the front side of the document, provided by the user; available only for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	FrontSide *PassportFile `json:"front_side,omitempty"`
	// Optional. Encrypted file with the reverse side of the document, provided by the user; available only for "driver_license" and "identity_card". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	ReverseSide *PassportFile `json:"reverse_side,omitempty"`
	// Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for "passport", "driver_license", "identity_card" and "internal_passport". The file can be decrypted and verified using the accompanying EncryptedCredentials.
	Selfie *PassportFile `json:"selfie,omitempty"`
	// Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration" and "temporary_registration" types. Files can be decrypted and verified using the accompanying EncryptedCredentials.
	Translation []PassportFile `json:"translation,omitempty"`
	// Base64-encoded element hash for using in PassportElementErrorUnspecified
	Hash string `json:"hash"`
}

// ExternalReplyInfo (https://core.telegram.org/bots/api#externalreplyinfo)
//
// This object contains information about a message that is being replied to, which may come from another chat or forum topic.
type ExternalReplyInfo struct {
	// Origin of the message replied to by the given message
	Origin MessageOrigin `json:"origin"`
	// Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel.
	Chat *Chat `json:"chat,omitempty"`
	// Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel.
	MessageId int64 `json:"message_id,omitempty"`
	// Optional. Options used for link preview generation for the original message, if it is a text message
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options,omitempty"`
	// Optional. Message is an animation, information about the animation
	Animation *Animation `json:"animation,omitempty"`
	// Optional. Message is an audio file, information about the file
	Audio *Audio `json:"audio,omitempty"`
	// Optional. Message is a general file, information about the file
	Document *Document `json:"document,omitempty"`
	// Optional. Message contains paid media; information about the paid media
	PaidMedia *PaidMediaInfo `json:"paid_media,omitempty"`
	// Optional. Message is a photo, available sizes of the photo
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. Message is a sticker, information about the sticker
	Sticker *Sticker `json:"sticker,omitempty"`
	// Optional. Message is a forwarded story
	Story *Story `json:"story,omitempty"`
	// Optional. Message is a video, information about the video
	Video *Video `json:"video,omitempty"`
	// Optional. Message is a video note, information about the video message
	VideoNote *VideoNote `json:"video_note,omitempty"`
	// Optional. Message is a voice message, information about the file
	Voice *Voice `json:"voice,omitempty"`
	// Optional. True, if the message media is covered by a spoiler animation
	HasMediaSpoiler bool `json:"has_media_spoiler,omitempty"`
	// Optional. Message is a shared contact, information about the contact
	Contact *Contact `json:"contact,omitempty"`
	// Optional. Message is a dice with random value
	Dice *Dice `json:"dice,omitempty"`
	// Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games
	Game *Game `json:"game,omitempty"`
	// Optional. Message is a scheduled giveaway, information about the giveaway
	Giveaway *Giveaway `json:"giveaway,omitempty"`
	// Optional. A giveaway with public winners was completed
	GiveawayWinners *GiveawayWinners `json:"giveaway_winners,omitempty"`
	// Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments
	Invoice *Invoice `json:"invoice,omitempty"`
	// Optional. Message is a shared location, information about the location
	Location *Location `json:"location,omitempty"`
	// Optional. Message is a native poll, information about the poll
	Poll *Poll `json:"poll,omitempty"`
	// Optional. Message is a venue, information about the venue
	Venue *Venue `json:"venue,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ExternalReplyInfo) UnmarshalJSON(b []byte) error {
	// All fields in ExternalReplyInfo, with interface fields as json.RawMessage
	type tmp struct {
		Origin             json.RawMessage     `json:"origin"`
		Chat               *Chat               `json:"chat"`
		MessageId          int64               `json:"message_id"`
		LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options"`
		Animation          *Animation          `json:"animation"`
		Audio              *Audio              `json:"audio"`
		Document           *Document           `json:"document"`
		PaidMedia          *PaidMediaInfo      `json:"paid_media"`
		Photo              []PhotoSize         `json:"photo"`
		Sticker            *Sticker            `json:"sticker"`
		Story              *Story              `json:"story"`
		Video              *Video              `json:"video"`
		VideoNote          *VideoNote          `json:"video_note"`
		Voice              *Voice              `json:"voice"`
		HasMediaSpoiler    bool                `json:"has_media_spoiler"`
		Contact            *Contact            `json:"contact"`
		Dice               *Dice               `json:"dice"`
		Game               *Game               `json:"game"`
		Giveaway           *Giveaway           `json:"giveaway"`
		GiveawayWinners    *GiveawayWinners    `json:"giveaway_winners"`
		Invoice            *Invoice            `json:"invoice"`
		Location           *Location           `json:"location"`
		Poll               *Poll               `json:"poll"`
		Venue              *Venue              `json:"venue"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ExternalReplyInfo JSON into tmp struct: %w", err)
	}

	v.Origin, err = unmarshalMessageOrigin(t.Origin)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Origin: %w", err)
	}
	v.Chat = t.Chat
	v.MessageId = t.MessageId
	v.LinkPreviewOptions = t.LinkPreviewOptions
	v.Animation = t.Animation
	v.Audio = t.Audio
	v.Document = t.Document
	v.PaidMedia = t.PaidMedia
	v.Photo = t.Photo
	v.Sticker = t.Sticker
	v.Story = t.Story
	v.Video = t.Video
	v.VideoNote = t.VideoNote
	v.Voice = t.Voice
	v.HasMediaSpoiler = t.HasMediaSpoiler
	v.Contact = t.Contact
	v.Dice = t.Dice
	v.Game = t.Game
	v.Giveaway = t.Giveaway
	v.GiveawayWinners = t.GiveawayWinners
	v.Invoice = t.Invoice
	v.Location = t.Location
	v.Poll = t.Poll
	v.Venue = t.Venue

	return nil
}

// File (https://core.telegram.org/bots/api#file)
//
// This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.
type File struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
	// Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
	FilePath string `json:"file_path,omitempty"`
}

// ForceReply (https://core.telegram.org/bots/api#forcereply)
//
// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account.
type ForceReply struct {
	// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
	ForceReply bool `json:"force_reply"`
	// Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters
	InputFieldPlaceholder string `json:"input_field_placeholder,omitempty"`
	// Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message.
	Selective bool `json:"selective,omitempty"`
}

// ForceReply.replyMarkup is a dummy method to avoid interface implementation.
func (v ForceReply) replyMarkup() {}

// ForumTopic (https://core.telegram.org/bots/api#forumtopic)
//
// This object represents a forum topic.
type ForumTopic struct {
	// Unique identifier of the forum topic
	MessageThreadId int64 `json:"message_thread_id"`
	// Name of the topic
	Name string `json:"name"`
	// Color of the topic icon in RGB format
	IconColor int64 `json:"icon_color"`
	// Optional. Unique identifier of the custom emoji shown as the topic icon
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// ForumTopicClosed (https://core.telegram.org/bots/api#forumtopicclosed)
//
// This object represents a service message about a forum topic closed in the chat. Currently holds no information.
type ForumTopicClosed struct{}

// ForumTopicCreated (https://core.telegram.org/bots/api#forumtopiccreated)
//
// This object represents a service message about a new forum topic created in the chat.
type ForumTopicCreated struct {
	// Name of the topic
	Name string `json:"name"`
	// Color of the topic icon in RGB format
	IconColor int64 `json:"icon_color"`
	// Optional. Unique identifier of the custom emoji shown as the topic icon
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// ForumTopicEdited (https://core.telegram.org/bots/api#forumtopicedited)
//
// This object represents a service message about an edited forum topic.
type ForumTopicEdited struct {
	// Optional. New name of the topic, if it was edited
	Name string `json:"name,omitempty"`
	// Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed
	IconCustomEmojiId string `json:"icon_custom_emoji_id,omitempty"`
}

// ForumTopicReopened (https://core.telegram.org/bots/api#forumtopicreopened)
//
// This object represents a service message about a forum topic reopened in the chat. Currently holds no information.
type ForumTopicReopened struct{}

// Game (https://core.telegram.org/bots/api#game)
//
// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
type Game struct {
	// Title of the game
	Title string `json:"title"`
	// Description of the game
	Description string `json:"description"`
	// Photo that will be displayed in the game message in chats.
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters.
	Text string `json:"text,omitempty"`
	// Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
	TextEntities []MessageEntity `json:"text_entities,omitempty"`
	// Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
	Animation *Animation `json:"animation,omitempty"`
}

// GameHighScore (https://core.telegram.org/bots/api#gamehighscore)
//
// This object represents one row of the high scores table for a game.
type GameHighScore struct {
	// Position in high score table for the game
	Position int64 `json:"position"`
	// User
	User User `json:"user"`
	// Score
	Score int64 `json:"score"`
}

// GeneralForumTopicHidden (https://core.telegram.org/bots/api#generalforumtopichidden)
//
// This object represents a service message about General forum topic hidden in the chat. Currently holds no information.
type GeneralForumTopicHidden struct{}

// GeneralForumTopicUnhidden (https://core.telegram.org/bots/api#generalforumtopicunhidden)
//
// This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.
type GeneralForumTopicUnhidden struct{}

// Gift (https://core.telegram.org/bots/api#gift)
//
// This object represents a gift that can be sent by the bot.
type Gift struct {
	// Unique identifier of the gift
	Id string `json:"id"`
	// The sticker that represents the gift
	Sticker Sticker `json:"sticker"`
	// The number of Telegram Stars that must be paid to send the sticker
	StarCount int64 `json:"star_count"`
	// Optional. The number of Telegram Stars that must be paid to upgrade the gift to a unique one
	UpgradeStarCount int64 `json:"upgrade_star_count,omitempty"`
	// Optional. The total number of the gifts of this type that can be sent; for limited gifts only
	TotalCount int64 `json:"total_count,omitempty"`
	// Optional. The number of remaining gifts of this type that can be sent; for limited gifts only
	RemainingCount int64 `json:"remaining_count,omitempty"`
}

// Gifts (https://core.telegram.org/bots/api#gifts)
//
// This object represent a list of gifts.
type Gifts struct {
	// The list of gifts
	Gifts []Gift `json:"gifts,omitempty"`
}

// Giveaway (https://core.telegram.org/bots/api#giveaway)
//
// This object represents a message about a scheduled giveaway.
type Giveaway struct {
	// The list of chats which the user must join to participate in the giveaway
	Chats []Chat `json:"chats,omitempty"`
	// Point in time (Unix timestamp) when winners of the giveaway will be selected
	WinnersSelectionDate int64 `json:"winners_selection_date"`
	// The number of users which are supposed to be selected as winners of the giveaway
	WinnerCount int64 `json:"winner_count"`
	// Optional. True, if only users who join the chats after the giveaway started should be eligible to win
	OnlyNewMembers bool `json:"only_new_members,omitempty"`
	// Optional. True, if the list of giveaway winners will be visible to everyone
	HasPublicWinners bool `json:"has_public_winners,omitempty"`
	// Optional. Description of additional giveaway prize
	PrizeDescription string `json:"prize_description,omitempty"`
	// Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways.
	CountryCodes []string `json:"country_codes,omitempty"`
	// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
	PrizeStarCount int64 `json:"prize_star_count,omitempty"`
	// Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
	PremiumSubscriptionMonthCount int64 `json:"premium_subscription_month_count,omitempty"`
}

// GiveawayCompleted (https://core.telegram.org/bots/api#giveawaycompleted)
//
// This object represents a service message about the completion of a giveaway without public winners.
type GiveawayCompleted struct {
	// Number of winners in the giveaway
	WinnerCount int64 `json:"winner_count"`
	// Optional. Number of undistributed prizes
	UnclaimedPrizeCount int64 `json:"unclaimed_prize_count,omitempty"`
	// Optional. Message with the giveaway that was completed, if it wasn't deleted
	GiveawayMessage *Message `json:"giveaway_message,omitempty"`
	// Optional. True, if the giveaway is a Telegram Star giveaway. Otherwise, currently, the giveaway is a Telegram Premium giveaway.
	IsStarGiveaway bool `json:"is_star_giveaway,omitempty"`
}

// GiveawayCreated (https://core.telegram.org/bots/api#giveawaycreated)
//
// This object represents a service message about the creation of a scheduled giveaway.
type GiveawayCreated struct {
	// Optional. The number of Telegram Stars to be split between giveaway winners; for Telegram Star giveaways only
	PrizeStarCount int64 `json:"prize_star_count,omitempty"`
}

// GiveawayWinners (https://core.telegram.org/bots/api#giveawaywinners)
//
// This object represents a message about the completion of a giveaway with public winners.
type GiveawayWinners struct {
	// The chat that created the giveaway
	Chat Chat `json:"chat"`
	// Identifier of the message with the giveaway in the chat
	GiveawayMessageId int64 `json:"giveaway_message_id"`
	// Point in time (Unix timestamp) when winners of the giveaway were selected
	WinnersSelectionDate int64 `json:"winners_selection_date"`
	// Total number of winners in the giveaway
	WinnerCount int64 `json:"winner_count"`
	// List of up to 100 winners of the giveaway
	Winners []User `json:"winners,omitempty"`
	// Optional. The number of other chats the user had to join in order to be eligible for the giveaway
	AdditionalChatCount int64 `json:"additional_chat_count,omitempty"`
	// Optional. The number of Telegram Stars that were split between giveaway winners; for Telegram Star giveaways only
	PrizeStarCount int64 `json:"prize_star_count,omitempty"`
	// Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for; for Telegram Premium giveaways only
	PremiumSubscriptionMonthCount int64 `json:"premium_subscription_month_count,omitempty"`
	// Optional. Number of undistributed prizes
	UnclaimedPrizeCount int64 `json:"unclaimed_prize_count,omitempty"`
	// Optional. True, if only users who had joined the chats after the giveaway started were eligible to win
	OnlyNewMembers bool `json:"only_new_members,omitempty"`
	// Optional. True, if the giveaway was canceled because the payment for it was refunded
	WasRefunded bool `json:"was_refunded,omitempty"`
	// Optional. Description of additional giveaway prize
	PrizeDescription string `json:"prize_description,omitempty"`
}

// InaccessibleMessage (https://core.telegram.org/bots/api#inaccessiblemessage)
//
// This object describes a message that was deleted or is otherwise inaccessible to the bot.
type InaccessibleMessage struct {
	// Chat the message belonged to
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat
	MessageId int64 `json:"message_id"`
	// Always 0. The field can be used to differentiate regular and inaccessible messages.
	Date int64 `json:"date"`
}

// GetMessageId is a helper method to easily access the common fields of an interface.
func (v InaccessibleMessage) GetMessageId() int64 {
	return v.MessageId
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v InaccessibleMessage) GetDate() int64 {
	return v.Date
}

// GetChat is a helper method to easily access the common fields of an interface.
func (v InaccessibleMessage) GetChat() Chat {
	return v.Chat
}

// InaccessibleMessage.maybeInaccessibleMessage is a dummy method to avoid interface implementation.
func (v InaccessibleMessage) maybeInaccessibleMessage() {}

// InlineKeyboardButton (https://core.telegram.org/bots/api#inlinekeyboardbutton)
//
// This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.
type InlineKeyboardButton struct {
	// Label text on the button
	Text string `json:"text"`
	// Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings.
	Url string `json:"url,omitempty"`
	// Optional. Data to be sent in a callback query to the bot when the button is pressed, 1-64 bytes
	CallbackData string `json:"callback_data,omitempty"`
	// Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account.
	WebApp *WebAppInfo `json:"web_app,omitempty"`
	// Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.
	LoginUrl *LoginUrl `json:"login_url,omitempty"`
	// Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account.
	SwitchInlineQuery *string `json:"switch_inline_query,omitempty"`
	// Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account.
	SwitchInlineQueryCurrentChat *string `json:"switch_inline_query_current_chat,omitempty"`
	// Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account.
	SwitchInlineQueryChosenChat *SwitchInlineQueryChosenChat `json:"switch_inline_query_chosen_chat,omitempty"`
	// Optional. Description of the button that copies the specified text to the clipboard.
	CopyText *CopyTextButton `json:"copy_text,omitempty"`
	// Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of button must always be the first button in the first row.
	CallbackGame *CallbackGame `json:"callback_game,omitempty"`
	// Optional. Specify True, to send a Pay button. Substrings "⭐" and "XTR" in the buttons's text will be replaced with a Telegram Star icon. NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages.
	Pay bool `json:"pay,omitempty"`
}

// InlineKeyboardMarkup (https://core.telegram.org/bots/api#inlinekeyboardmarkup)
//
// This object represents an inline keyboard that appears right next to the message it belongs to.
type InlineKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of InlineKeyboardButton objects
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard,omitempty"`
}

// InlineKeyboardMarkup.replyMarkup is a dummy method to avoid interface implementation.
func (v InlineKeyboardMarkup) replyMarkup() {}

// InlineQuery (https://core.telegram.org/bots/api#inlinequery)
//
// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
type InlineQuery struct {
	// Unique identifier for this query
	Id string `json:"id"`
	// Sender
	From User `json:"from"`
	// Text of the query (up to 256 characters)
	Query string `json:"query"`
	// Offset of the results to be returned, can be controlled by the bot
	Offset string `json:"offset"`
	// Optional. Type of the chat from which the inline query was sent. Can be either "sender" for a private chat with the inline query sender, "private", "group", "supergroup", or "channel". The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat
	ChatType string `json:"chat_type,omitempty"`
	// Optional. Sender location, only for bots that request user location
	Location *Location `json:"location,omitempty"`
}

// InlineQueryResult (https://core.telegram.org/bots/api#inlinequeryresult)
//
// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
//   - InlineQueryResultCachedAudio
//   - InlineQueryResultCachedDocument
//   - InlineQueryResultCachedGif
//   - InlineQueryResultCachedMpeg4Gif
//   - InlineQueryResultCachedPhoto
//   - InlineQueryResultCachedSticker
//   - InlineQueryResultCachedVideo
//   - InlineQueryResultCachedVoice
//   - InlineQueryResultArticle
//   - InlineQueryResultAudio
//   - InlineQueryResultContact
//   - InlineQueryResultGame
//   - InlineQueryResultDocument
//   - InlineQueryResultGif
//   - InlineQueryResultLocation
//   - InlineQueryResultMpeg4Gif
//   - InlineQueryResultPhoto
//   - InlineQueryResultVenue
//   - InlineQueryResultVideo
//   - InlineQueryResultVoice
//
// Note: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public.
type InlineQueryResult interface {
	GetType() string
	GetId() string
	// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with complex telegram types in a non-generic world.
	MergeInlineQueryResult() MergedInlineQueryResult
	// inlineQueryResult exists to avoid external types implementing this interface.
	inlineQueryResult()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ InlineQueryResult = InlineQueryResultCachedAudio{}
	_ InlineQueryResult = InlineQueryResultCachedDocument{}
	_ InlineQueryResult = InlineQueryResultCachedGif{}
	_ InlineQueryResult = InlineQueryResultCachedMpeg4Gif{}
	_ InlineQueryResult = InlineQueryResultCachedPhoto{}
	_ InlineQueryResult = InlineQueryResultCachedSticker{}
	_ InlineQueryResult = InlineQueryResultCachedVideo{}
	_ InlineQueryResult = InlineQueryResultCachedVoice{}
	_ InlineQueryResult = InlineQueryResultArticle{}
	_ InlineQueryResult = InlineQueryResultAudio{}
	_ InlineQueryResult = InlineQueryResultContact{}
	_ InlineQueryResult = InlineQueryResultGame{}
	_ InlineQueryResult = InlineQueryResultDocument{}
	_ InlineQueryResult = InlineQueryResultGif{}
	_ InlineQueryResult = InlineQueryResultLocation{}
	_ InlineQueryResult = InlineQueryResultMpeg4Gif{}
	_ InlineQueryResult = InlineQueryResultPhoto{}
	_ InlineQueryResult = InlineQueryResultVenue{}
	_ InlineQueryResult = InlineQueryResultVideo{}
	_ InlineQueryResult = InlineQueryResultVoice{}
)

// MergedInlineQueryResult is a helper type to simplify interactions with the various InlineQueryResult subtypes.
type MergedInlineQueryResult struct {
	// Type of the result
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// Optional. A valid file identifier for the audio file (Only for audio)
	AudioFileId string `json:"audio_file_id,omitempty"`
	// Optional. Caption, 0-1024 characters after entities parsing (Only for audio, document, gif, mpeg4_gif, photo, video, voice, audio, document, gif, mpeg4_gif, photo, video, voice)
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details. (Only for audio, document, gif, mpeg4_gif, photo, video, voice, audio, document, gif, mpeg4_gif, photo, video, voice)
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode (Only for audio, document, gif, mpeg4_gif, photo, video, voice, audio, document, gif, mpeg4_gif, photo, video, voice)
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the audio (Only for audio, document, gif, mpeg4_gif, photo, sticker, video, voice, article, audio, contact, document, gif, location, mpeg4_gif, photo, venue, video, voice)
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Title for the result (Only for document, gif, mpeg4_gif, photo, video, voice, article, audio, document, gif, location, mpeg4_gif, photo, venue, video, voice)
	Title string `json:"title,omitempty"`
	// Optional. A valid file identifier for the file (Only for document)
	DocumentFileId string `json:"document_file_id,omitempty"`
	// Optional. Short description of the result (Only for document, photo, video, article, document, photo, video)
	Description string `json:"description,omitempty"`
	// Optional. A valid file identifier for the GIF file (Only for gif)
	GifFileId string `json:"gif_file_id,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media (Only for gif, mpeg4_gif, photo, video, gif, mpeg4_gif, photo, video)
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. A valid file identifier for the MPEG4 file (Only for mpeg4_gif)
	Mpeg4FileId string `json:"mpeg4_file_id,omitempty"`
	// Optional. A valid file identifier of the photo (Only for photo)
	PhotoFileId string `json:"photo_file_id,omitempty"`
	// Optional. A valid file identifier of the sticker (Only for sticker)
	StickerFileId string `json:"sticker_file_id,omitempty"`
	// Optional. A valid file identifier for the video file (Only for video)
	VideoFileId string `json:"video_file_id,omitempty"`
	// Optional. A valid file identifier for the voice message (Only for voice)
	VoiceFileId string `json:"voice_file_id,omitempty"`
	// Optional. URL of the result (Only for article)
	Url string `json:"url,omitempty"`
	// Optional. Url of the thumbnail for the result (Only for article, contact, document, gif, location, mpeg4_gif, photo, venue, video)
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width (Only for article, contact, document, location, venue)
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height (Only for article, contact, document, location, venue)
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
	// Optional. A valid URL for the audio file (Only for audio)
	AudioUrl string `json:"audio_url,omitempty"`
	// Optional. Performer (Only for audio)
	Performer string `json:"performer,omitempty"`
	// Optional. Audio duration in seconds (Only for audio)
	AudioDuration int64 `json:"audio_duration,omitempty"`
	// Optional. Contact's phone number (Only for contact)
	PhoneNumber string `json:"phone_number,omitempty"`
	// Optional. Contact's first name (Only for contact)
	FirstName string `json:"first_name,omitempty"`
	// Optional. Contact's last name (Only for contact)
	LastName string `json:"last_name,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes (Only for contact)
	Vcard string `json:"vcard,omitempty"`
	// Optional. Short name of the game (Only for game)
	GameShortName string `json:"game_short_name,omitempty"`
	// Optional. A valid URL for the file (Only for document)
	DocumentUrl string `json:"document_url,omitempty"`
	// Optional. MIME type of the content of the file, either "application/pdf" or "application/zip" (Only for document, video)
	MimeType string `json:"mime_type,omitempty"`
	// Optional. A valid URL for the GIF file (Only for gif)
	GifUrl string `json:"gif_url,omitempty"`
	// Optional. Width of the GIF (Only for gif)
	GifWidth int64 `json:"gif_width,omitempty"`
	// Optional. Height of the GIF (Only for gif)
	GifHeight int64 `json:"gif_height,omitempty"`
	// Optional. Duration of the GIF in seconds (Only for gif)
	GifDuration int64 `json:"gif_duration,omitempty"`
	// Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg" (Only for gif, mpeg4_gif)
	ThumbnailMimeType string `json:"thumbnail_mime_type,omitempty"`
	// Optional. Location latitude in degrees (Only for location, venue)
	Latitude float64 `json:"latitude,omitempty"`
	// Optional. Location longitude in degrees (Only for location, venue)
	Longitude float64 `json:"longitude,omitempty"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500 (Only for location)
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. (Only for location)
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. (Only for location)
	Heading int64 `json:"heading,omitempty"`
	// Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. (Only for location)
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
	// Optional. A valid URL for the MPEG4 file (Only for mpeg4_gif)
	Mpeg4Url string `json:"mpeg4_url,omitempty"`
	// Optional. Video width (Only for mpeg4_gif)
	Mpeg4Width int64 `json:"mpeg4_width,omitempty"`
	// Optional. Video height (Only for mpeg4_gif)
	Mpeg4Height int64 `json:"mpeg4_height,omitempty"`
	// Optional. Video duration in seconds (Only for mpeg4_gif)
	Mpeg4Duration int64 `json:"mpeg4_duration,omitempty"`
	// Optional. A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB (Only for photo)
	PhotoUrl string `json:"photo_url,omitempty"`
	// Optional. Width of the photo (Only for photo)
	PhotoWidth int64 `json:"photo_width,omitempty"`
	// Optional. Height of the photo (Only for photo)
	PhotoHeight int64 `json:"photo_height,omitempty"`
	// Optional. Address of the venue (Only for venue)
	Address string `json:"address,omitempty"`
	// Optional. Foursquare identifier of the venue if known (Only for venue)
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".) (Only for venue)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue (Only for venue)
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.) (Only for venue)
	GooglePlaceType string `json:"google_place_type,omitempty"`
	// Optional. A valid URL for the embedded video player or video file (Only for video)
	VideoUrl string `json:"video_url,omitempty"`
	// Optional. Video width (Only for video)
	VideoWidth int64 `json:"video_width,omitempty"`
	// Optional. Video height (Only for video)
	VideoHeight int64 `json:"video_height,omitempty"`
	// Optional. Video duration in seconds (Only for video)
	VideoDuration int64 `json:"video_duration,omitempty"`
	// Optional. A valid URL for the voice recording (Only for voice)
	VoiceUrl string `json:"voice_url,omitempty"`
	// Optional. Recording duration in seconds (Only for voice)
	VoiceDuration int64 `json:"voice_duration,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedInlineQueryResult) GetType() string {
	return v.Type
}

// GetId is a helper method to easily access the common fields of an interface.
func (v MergedInlineQueryResult) GetId() string {
	return v.Id
}

// MergedInlineQueryResult.inlineQueryResult is a dummy method to avoid interface implementation.
func (v MergedInlineQueryResult) inlineQueryResult() {}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v MergedInlineQueryResult) MergeInlineQueryResult() MergedInlineQueryResult {
	return v
}

// InlineQueryResultArticle (https://core.telegram.org/bots/api#inlinequeryresultarticle)
//
// Represents a link to an article or web page.
type InlineQueryResultArticle struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`
	// Title of the result
	Title string `json:"title"`
	// Content of the message to be sent
	InputMessageContent InputMessageContent `json:"input_message_content"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. URL of the result
	Url string `json:"url,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultArticle) GetType() string {
	return "article"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultArticle) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultArticle) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "article",
		Id:                  v.Id,
		Title:               v.Title,
		InputMessageContent: v.InputMessageContent,
		ReplyMarkup:         v.ReplyMarkup,
		Url:                 v.Url,
		Description:         v.Description,
		ThumbnailUrl:        v.ThumbnailUrl,
		ThumbnailWidth:      v.ThumbnailWidth,
		ThumbnailHeight:     v.ThumbnailHeight,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultArticle
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "article",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultArticle.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultArticle) inlineQueryResult() {}

// InlineQueryResultAudio (https://core.telegram.org/bots/api#inlinequeryresultaudio)
//
// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultAudio struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL for the audio file
	AudioUrl string `json:"audio_url"`
	// Title
	Title string `json:"title"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Performer
	Performer string `json:"performer,omitempty"`
	// Optional. Audio duration in seconds
	AudioDuration int64 `json:"audio_duration,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the audio
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultAudio) GetType() string {
	return "audio"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultAudio) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultAudio) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "audio",
		Id:                  v.Id,
		AudioUrl:            v.AudioUrl,
		Title:               v.Title,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		Performer:           v.Performer,
		AudioDuration:       v.AudioDuration,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultAudio
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultAudio.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultAudio) inlineQueryResult() {}

// InlineQueryResultCachedAudio (https://core.telegram.org/bots/api#inlinequeryresultcachedaudio)
//
// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.
type InlineQueryResultCachedAudio struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier for the audio file
	AudioFileId string `json:"audio_file_id"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the audio
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedAudio) GetType() string {
	return "audio"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedAudio) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedAudio) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "audio",
		Id:                  v.Id,
		AudioFileId:         v.AudioFileId,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedAudio) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedAudio
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedAudio.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedAudio) inlineQueryResult() {}

// InlineQueryResultCachedDocument (https://core.telegram.org/bots/api#inlinequeryresultcacheddocument)
//
// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.
type InlineQueryResultCachedDocument struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// Title for the result
	Title string `json:"title"`
	// A valid file identifier for the file
	DocumentFileId string `json:"document_file_id"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the file
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedDocument) GetType() string {
	return "document"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedDocument) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedDocument) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "document",
		Id:                  v.Id,
		Title:               v.Title,
		DocumentFileId:      v.DocumentFileId,
		Description:         v.Description,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedDocument) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedDocument
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedDocument.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedDocument) inlineQueryResult() {}

// InlineQueryResultCachedGif (https://core.telegram.org/bots/api#inlinequeryresultcachedgif)
//
// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.
type InlineQueryResultCachedGif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier for the GIF file
	GifFileId string `json:"gif_file_id"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the GIF animation
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedGif) GetType() string {
	return "gif"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedGif) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedGif) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "gif",
		Id:                    v.Id,
		GifFileId:             v.GifFileId,
		Title:                 v.Title,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedGif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedGif
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedGif.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedGif) inlineQueryResult() {}

// InlineQueryResultCachedMpeg4Gif (https://core.telegram.org/bots/api#inlinequeryresultcachedmpeg4gif)
//
// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultCachedMpeg4Gif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier for the MPEG4 file
	Mpeg4FileId string `json:"mpeg4_file_id"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video animation
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedMpeg4Gif) GetType() string {
	return "mpeg4_gif"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedMpeg4Gif) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedMpeg4Gif) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "mpeg4_gif",
		Id:                    v.Id,
		Mpeg4FileId:           v.Mpeg4FileId,
		Title:                 v.Title,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedMpeg4Gif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedMpeg4Gif
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "mpeg4_gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedMpeg4Gif.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedMpeg4Gif) inlineQueryResult() {}

// InlineQueryResultCachedPhoto (https://core.telegram.org/bots/api#inlinequeryresultcachedphoto)
//
// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultCachedPhoto struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier of the photo
	PhotoFileId string `json:"photo_file_id"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the photo
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedPhoto) GetType() string {
	return "photo"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedPhoto) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedPhoto) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "photo",
		Id:                    v.Id,
		PhotoFileId:           v.PhotoFileId,
		Title:                 v.Title,
		Description:           v.Description,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedPhoto) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedPhoto
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedPhoto.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedPhoto) inlineQueryResult() {}

// InlineQueryResultCachedSticker (https://core.telegram.org/bots/api#inlinequeryresultcachedsticker)
//
// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.
type InlineQueryResultCachedSticker struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier of the sticker
	StickerFileId string `json:"sticker_file_id"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the sticker
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedSticker) GetType() string {
	return "sticker"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedSticker) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedSticker) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "sticker",
		Id:                  v.Id,
		StickerFileId:       v.StickerFileId,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedSticker) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedSticker
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "sticker",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedSticker.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedSticker) inlineQueryResult() {}

// InlineQueryResultCachedVideo (https://core.telegram.org/bots/api#inlinequeryresultcachedvideo)
//
// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultCachedVideo struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier for the video file
	VideoFileId string `json:"video_file_id"`
	// Title for the result
	Title string `json:"title"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedVideo) GetType() string {
	return "video"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedVideo) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedVideo) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "video",
		Id:                    v.Id,
		VideoFileId:           v.VideoFileId,
		Title:                 v.Title,
		Description:           v.Description,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedVideo) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedVideo
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedVideo.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedVideo) inlineQueryResult() {}

// InlineQueryResultCachedVoice (https://core.telegram.org/bots/api#inlinequeryresultcachedvoice)
//
// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.
type InlineQueryResultCachedVoice struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid file identifier for the voice message
	VoiceFileId string `json:"voice_file_id"`
	// Voice message title
	Title string `json:"title"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the voice message
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedVoice) GetType() string {
	return "voice"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultCachedVoice) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultCachedVoice) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "voice",
		Id:                  v.Id,
		VoiceFileId:         v.VoiceFileId,
		Title:               v.Title,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultCachedVoice) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultCachedVoice
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "voice",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultCachedVoice.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultCachedVoice) inlineQueryResult() {}

// InlineQueryResultContact (https://core.telegram.org/bots/api#inlinequeryresultcontact)
//
// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.
type InlineQueryResultContact struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`
	// Contact's phone number
	PhoneNumber string `json:"phone_number"`
	// Contact's first name
	FirstName string `json:"first_name"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
	Vcard string `json:"vcard,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the contact
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultContact) GetType() string {
	return "contact"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultContact) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultContact) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "contact",
		Id:                  v.Id,
		PhoneNumber:         v.PhoneNumber,
		FirstName:           v.FirstName,
		LastName:            v.LastName,
		Vcard:               v.Vcard,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
		ThumbnailUrl:        v.ThumbnailUrl,
		ThumbnailWidth:      v.ThumbnailWidth,
		ThumbnailHeight:     v.ThumbnailHeight,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultContact
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "contact",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultContact.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultContact) inlineQueryResult() {}

// InlineQueryResultDocument (https://core.telegram.org/bots/api#inlinequeryresultdocument)
//
// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.
type InlineQueryResultDocument struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// Title for the result
	Title string `json:"title"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// A valid URL for the file
	DocumentUrl string `json:"document_url"`
	// MIME type of the content of the file, either "application/pdf" or "application/zip"
	MimeType string `json:"mime_type"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the file
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. URL of the thumbnail (JPEG only) for the file
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultDocument) GetType() string {
	return "document"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultDocument) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultDocument) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "document",
		Id:                  v.Id,
		Title:               v.Title,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		DocumentUrl:         v.DocumentUrl,
		MimeType:            v.MimeType,
		Description:         v.Description,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
		ThumbnailUrl:        v.ThumbnailUrl,
		ThumbnailWidth:      v.ThumbnailWidth,
		ThumbnailHeight:     v.ThumbnailHeight,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultDocument
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultDocument.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultDocument) inlineQueryResult() {}

// InlineQueryResultGame (https://core.telegram.org/bots/api#inlinequeryresultgame)
//
// Represents a Game.
type InlineQueryResultGame struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// Short name of the game
	GameShortName string `json:"game_short_name"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultGame) GetType() string {
	return "game"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultGame) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultGame) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:          "game",
		Id:            v.Id,
		GameShortName: v.GameShortName,
		ReplyMarkup:   v.ReplyMarkup,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultGame
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "game",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultGame.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultGame) inlineQueryResult() {}

// InlineQueryResultGif (https://core.telegram.org/bots/api#inlinequeryresultgif)
//
// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultGif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL for the GIF file
	GifUrl string `json:"gif_url"`
	// Optional. Width of the GIF
	GifWidth int64 `json:"gif_width,omitempty"`
	// Optional. Height of the GIF
	GifHeight int64 `json:"gif_height,omitempty"`
	// Optional. Duration of the GIF in seconds
	GifDuration int64 `json:"gif_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url"`
	// Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	ThumbnailMimeType string `json:"thumbnail_mime_type,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the GIF animation
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultGif) GetType() string {
	return "gif"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultGif) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultGif) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "gif",
		Id:                    v.Id,
		GifUrl:                v.GifUrl,
		GifWidth:              v.GifWidth,
		GifHeight:             v.GifHeight,
		GifDuration:           v.GifDuration,
		ThumbnailUrl:          v.ThumbnailUrl,
		ThumbnailMimeType:     v.ThumbnailMimeType,
		Title:                 v.Title,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultGif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultGif
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultGif.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultGif) inlineQueryResult() {}

// InlineQueryResultLocation (https://core.telegram.org/bots/api#inlinequeryresultlocation)
//
// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.
type InlineQueryResultLocation struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`
	// Location latitude in degrees
	Latitude float64 `json:"latitude"`
	// Location longitude in degrees
	Longitude float64 `json:"longitude"`
	// Location title
	Title string `json:"title"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64 `json:"heading,omitempty"`
	// Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the location
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultLocation) GetType() string {
	return "location"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultLocation) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultLocation) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                 "location",
		Id:                   v.Id,
		Latitude:             v.Latitude,
		Longitude:            v.Longitude,
		Title:                v.Title,
		HorizontalAccuracy:   v.HorizontalAccuracy,
		LivePeriod:           v.LivePeriod,
		Heading:              v.Heading,
		ProximityAlertRadius: v.ProximityAlertRadius,
		ReplyMarkup:          v.ReplyMarkup,
		InputMessageContent:  v.InputMessageContent,
		ThumbnailUrl:         v.ThumbnailUrl,
		ThumbnailWidth:       v.ThumbnailWidth,
		ThumbnailHeight:      v.ThumbnailHeight,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultLocation
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "location",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultLocation.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultLocation) inlineQueryResult() {}

// InlineQueryResultMpeg4Gif (https://core.telegram.org/bots/api#inlinequeryresultmpeg4gif)
//
// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.
type InlineQueryResultMpeg4Gif struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL for the MPEG4 file
	Mpeg4Url string `json:"mpeg4_url"`
	// Optional. Video width
	Mpeg4Width int64 `json:"mpeg4_width,omitempty"`
	// Optional. Video height
	Mpeg4Height int64 `json:"mpeg4_height,omitempty"`
	// Optional. Video duration in seconds
	Mpeg4Duration int64 `json:"mpeg4_duration,omitempty"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url"`
	// Optional. MIME type of the thumbnail, must be one of "image/jpeg", "image/gif", or "video/mp4". Defaults to "image/jpeg"
	ThumbnailMimeType string `json:"thumbnail_mime_type,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video animation
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultMpeg4Gif) GetType() string {
	return "mpeg4_gif"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultMpeg4Gif) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultMpeg4Gif) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "mpeg4_gif",
		Id:                    v.Id,
		Mpeg4Url:              v.Mpeg4Url,
		Mpeg4Width:            v.Mpeg4Width,
		Mpeg4Height:           v.Mpeg4Height,
		Mpeg4Duration:         v.Mpeg4Duration,
		ThumbnailUrl:          v.ThumbnailUrl,
		ThumbnailMimeType:     v.ThumbnailMimeType,
		Title:                 v.Title,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultMpeg4Gif) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultMpeg4Gif
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "mpeg4_gif",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultMpeg4Gif.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultMpeg4Gif) inlineQueryResult() {}

// InlineQueryResultPhoto (https://core.telegram.org/bots/api#inlinequeryresultphoto)
//
// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.
type InlineQueryResultPhoto struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB
	PhotoUrl string `json:"photo_url"`
	// URL of the thumbnail for the photo
	ThumbnailUrl string `json:"thumbnail_url"`
	// Optional. Width of the photo
	PhotoWidth int64 `json:"photo_width,omitempty"`
	// Optional. Height of the photo
	PhotoHeight int64 `json:"photo_height,omitempty"`
	// Optional. Title for the result
	Title string `json:"title,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the photo
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultPhoto) GetType() string {
	return "photo"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultPhoto) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultPhoto) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "photo",
		Id:                    v.Id,
		PhotoUrl:              v.PhotoUrl,
		ThumbnailUrl:          v.ThumbnailUrl,
		PhotoWidth:            v.PhotoWidth,
		PhotoHeight:           v.PhotoHeight,
		Title:                 v.Title,
		Description:           v.Description,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultPhoto
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultPhoto.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultPhoto) inlineQueryResult() {}

// InlineQueryResultVenue (https://core.telegram.org/bots/api#inlinequeryresultvenue)
//
// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.
type InlineQueryResultVenue struct {
	// Unique identifier for this result, 1-64 Bytes
	Id string `json:"id"`
	// Latitude of the venue location in degrees
	Latitude float64 `json:"latitude"`
	// Longitude of the venue location in degrees
	Longitude float64 `json:"longitude"`
	// Title of the venue
	Title string `json:"title"`
	// Address of the venue
	Address string `json:"address"`
	// Optional. Foursquare identifier of the venue if known
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the venue
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
	// Optional. Url of the thumbnail for the result
	ThumbnailUrl string `json:"thumbnail_url,omitempty"`
	// Optional. Thumbnail width
	ThumbnailWidth int64 `json:"thumbnail_width,omitempty"`
	// Optional. Thumbnail height
	ThumbnailHeight int64 `json:"thumbnail_height,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVenue) GetType() string {
	return "venue"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVenue) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultVenue) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "venue",
		Id:                  v.Id,
		Latitude:            v.Latitude,
		Longitude:           v.Longitude,
		Title:               v.Title,
		Address:             v.Address,
		FoursquareId:        v.FoursquareId,
		FoursquareType:      v.FoursquareType,
		GooglePlaceId:       v.GooglePlaceId,
		GooglePlaceType:     v.GooglePlaceType,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
		ThumbnailUrl:        v.ThumbnailUrl,
		ThumbnailWidth:      v.ThumbnailWidth,
		ThumbnailHeight:     v.ThumbnailHeight,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVenue
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "venue",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultVenue.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultVenue) inlineQueryResult() {}

// InlineQueryResultVideo (https://core.telegram.org/bots/api#inlinequeryresultvideo)
//
// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.
type InlineQueryResultVideo struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL for the embedded video player or video file
	VideoUrl string `json:"video_url"`
	// MIME type of the content of the video URL, "text/html" or "video/mp4"
	MimeType string `json:"mime_type"`
	// URL of the thumbnail (JPEG only) for the video
	ThumbnailUrl string `json:"thumbnail_url"`
	// Title for the result
	Title string `json:"title"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Video width
	VideoWidth int64 `json:"video_width,omitempty"`
	// Optional. Video height
	VideoHeight int64 `json:"video_height,omitempty"`
	// Optional. Video duration in seconds
	VideoDuration int64 `json:"video_duration,omitempty"`
	// Optional. Short description of the result
	Description string `json:"description,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVideo) GetType() string {
	return "video"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVideo) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultVideo) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                  "video",
		Id:                    v.Id,
		VideoUrl:              v.VideoUrl,
		MimeType:              v.MimeType,
		ThumbnailUrl:          v.ThumbnailUrl,
		Title:                 v.Title,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		VideoWidth:            v.VideoWidth,
		VideoHeight:           v.VideoHeight,
		VideoDuration:         v.VideoDuration,
		Description:           v.Description,
		ReplyMarkup:           v.ReplyMarkup,
		InputMessageContent:   v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVideo
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultVideo.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultVideo) inlineQueryResult() {}

// InlineQueryResultVoice (https://core.telegram.org/bots/api#inlinequeryresultvoice)
//
// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.
type InlineQueryResultVoice struct {
	// Unique identifier for this result, 1-64 bytes
	Id string `json:"id"`
	// A valid URL for the voice recording
	VoiceUrl string `json:"voice_url"`
	// Recording title
	Title string `json:"title"`
	// Optional. Caption, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the voice message caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Recording duration in seconds
	VoiceDuration int64 `json:"voice_duration,omitempty"`
	// Optional. Inline keyboard attached to the message
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
	// Optional. Content of the message to be sent instead of the voice recording
	InputMessageContent InputMessageContent `json:"input_message_content,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVoice) GetType() string {
	return "voice"
}

// GetId is a helper method to easily access the common fields of an interface.
func (v InlineQueryResultVoice) GetId() string {
	return v.Id
}

// MergeInlineQueryResult returns a MergedInlineQueryResult struct to simplify working with types in a non-generic world.
func (v InlineQueryResultVoice) MergeInlineQueryResult() MergedInlineQueryResult {
	return MergedInlineQueryResult{
		Type:                "voice",
		Id:                  v.Id,
		VoiceUrl:            v.VoiceUrl,
		Title:               v.Title,
		Caption:             v.Caption,
		ParseMode:           v.ParseMode,
		CaptionEntities:     v.CaptionEntities,
		VoiceDuration:       v.VoiceDuration,
		ReplyMarkup:         v.ReplyMarkup,
		InputMessageContent: v.InputMessageContent,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InlineQueryResultVoice) MarshalJSON() ([]byte, error) {
	type alias InlineQueryResultVoice
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "voice",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InlineQueryResultVoice.inlineQueryResult is a dummy method to avoid interface implementation.
func (v InlineQueryResultVoice) inlineQueryResult() {}

// InlineQueryResultsButton (https://core.telegram.org/bots/api#inlinequeryresultsbutton)
//
// This object represents a button to be shown above inline query results. You must use exactly one of the optional fields.
type InlineQueryResultsButton struct {
	// Label text on the button
	Text string `json:"text"`
	// Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App.
	WebApp *WebAppInfo `json:"web_app,omitempty"`
	// Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
	StartParameter string `json:"start_parameter,omitempty"`
}

// InputContactMessageContent (https://core.telegram.org/bots/api#inputcontactmessagecontent)
//
// Represents the content of a contact message to be sent as the result of an inline query.
type InputContactMessageContent struct {
	// Contact's phone number
	PhoneNumber string `json:"phone_number"`
	// Contact's first name
	FirstName string `json:"first_name"`
	// Optional. Contact's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
	Vcard string `json:"vcard,omitempty"`
}

// InputContactMessageContent.inputMessageContent is a dummy method to avoid interface implementation.
func (v InputContactMessageContent) inputMessageContent() {}

// InputFile (https://core.telegram.org/bots/api#inputfile)
//
// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
// InputInvoiceMessageContent (https://core.telegram.org/bots/api#inputinvoicemessagecontent)
//
// Represents the content of an invoice message to be sent as the result of an inline query.
type InputInvoiceMessageContent struct {
	// Product name, 1-32 characters
	Title string `json:"title"`
	// Product description, 1-255 characters
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use it for your internal processes.
	Payload string `json:"payload"`
	// Optional. Payment provider token, obtained via @BotFather. Pass an empty string for payments in Telegram Stars.
	ProviderToken string `json:"provider_token,omitempty"`
	// Three-letter ISO 4217 currency code, see more on currencies. Pass "XTR" for payments in Telegram Stars.
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in Telegram Stars.
	Prices []LabeledPrice `json:"prices,omitempty"`
	// Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0. Not supported for payments in Telegram Stars.
	MaxTipAmount int64 `json:"max_tip_amount,omitempty"`
	// Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount.
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts,omitempty"`
	// Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider.
	ProviderData string `json:"provider_data,omitempty"`
	// Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service.
	PhotoUrl string `json:"photo_url,omitempty"`
	// Optional. Photo size in bytes
	PhotoSize int64 `json:"photo_size,omitempty"`
	// Optional. Photo width
	PhotoWidth int64 `json:"photo_width,omitempty"`
	// Optional. Photo height
	PhotoHeight int64 `json:"photo_height,omitempty"`
	// Optional. Pass True if you require the user's full name to complete the order. Ignored for payments in Telegram Stars.
	NeedName bool `json:"need_name,omitempty"`
	// Optional. Pass True if you require the user's phone number to complete the order. Ignored for payments in Telegram Stars.
	NeedPhoneNumber bool `json:"need_phone_number,omitempty"`
	// Optional. Pass True if you require the user's email address to complete the order. Ignored for payments in Telegram Stars.
	NeedEmail bool `json:"need_email,omitempty"`
	// Optional. Pass True if you require the user's shipping address to complete the order. Ignored for payments in Telegram Stars.
	NeedShippingAddress bool `json:"need_shipping_address,omitempty"`
	// Optional. Pass True if the user's phone number should be sent to the provider. Ignored for payments in Telegram Stars.
	SendPhoneNumberToProvider bool `json:"send_phone_number_to_provider,omitempty"`
	// Optional. Pass True if the user's email address should be sent to the provider. Ignored for payments in Telegram Stars.
	SendEmailToProvider bool `json:"send_email_to_provider,omitempty"`
	// Optional. Pass True if the final price depends on the shipping method. Ignored for payments in Telegram Stars.
	IsFlexible bool `json:"is_flexible,omitempty"`
}

// InputInvoiceMessageContent.inputMessageContent is a dummy method to avoid interface implementation.
func (v InputInvoiceMessageContent) inputMessageContent() {}

// InputLocationMessageContent (https://core.telegram.org/bots/api#inputlocationmessagecontent)
//
// Represents the content of a location message to be sent as the result of an inline query.
type InputLocationMessageContent struct {
	// Latitude of the location in degrees
	Latitude float64 `json:"latitude"`
	// Longitude of the location in degrees
	Longitude float64 `json:"longitude"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading int64 `json:"heading,omitempty"`
	// Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
}

// InputLocationMessageContent.inputMessageContent is a dummy method to avoid interface implementation.
func (v InputLocationMessageContent) inputMessageContent() {}

// InputMedia (https://core.telegram.org/bots/api#inputmedia)
//
// This object represents the content of a media message to be sent. It should be one of
//   - InputMediaAnimation
//   - InputMediaDocument
//   - InputMediaAudio
//   - InputMediaPhoto
//   - InputMediaVideo
type InputMedia interface {
	GetType() string
	GetMedia() InputFileOrString
	// InputParams allows for uploading attachments with files.
	InputParams(string, map[string]FileReader) ([]byte, error)
	// MergeInputMedia returns a MergedInputMedia struct to simplify working with complex telegram types in a non-generic world.
	MergeInputMedia() MergedInputMedia
	// inputMedia exists to avoid external types implementing this interface.
	inputMedia()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ InputMedia = InputMediaAnimation{}
	_ InputMedia = InputMediaDocument{}
	_ InputMedia = InputMediaAudio{}
	_ InputMedia = InputMediaPhoto{}
	_ InputMedia = InputMediaVideo{}
)

// MergedInputMedia is a helper type to simplify interactions with the various InputMedia subtypes.
type MergedInputMedia struct {
	// Type of the result
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files (Only for animation, document, audio, video)
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media (Only for animation, photo, video)
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Animation width (Only for animation, video)
	Width int64 `json:"width,omitempty"`
	// Optional. Animation height (Only for animation, video)
	Height int64 `json:"height,omitempty"`
	// Optional. Animation duration in seconds (Only for animation, audio, video)
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True if the animation needs to be covered with a spoiler animation (Only for animation, photo, video)
	HasSpoiler bool `json:"has_spoiler,omitempty"`
	// Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. (Only for document)
	DisableContentTypeDetection bool `json:"disable_content_type_detection,omitempty"`
	// Optional. Performer of the audio (Only for audio)
	Performer string `json:"performer,omitempty"`
	// Optional. Title of the audio (Only for audio)
	Title string `json:"title,omitempty"`
	// Optional. Pass True if the uploaded video is suitable for streaming (Only for video)
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedInputMedia) GetType() string {
	return v.Type
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v MergedInputMedia) GetMedia() InputFileOrString {
	return v.Media
}

// MergedInputMedia.inputMedia is a dummy method to avoid interface implementation.
func (v MergedInputMedia) inputMedia() {}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v MergedInputMedia) MergeInputMedia() MergedInputMedia {
	return v
}

// InputMediaAnimation (https://core.telegram.org/bots/api#inputmediaanimation)
//
// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
type InputMediaAnimation struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the animation caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Animation width
	Width int64 `json:"width,omitempty"`
	// Optional. Animation height
	Height int64 `json:"height,omitempty"`
	// Optional. Animation duration in seconds
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True if the animation needs to be covered with a spoiler animation
	HasSpoiler bool `json:"has_spoiler,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputMediaAnimation) GetType() string {
	return "animation"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputMediaAnimation) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v InputMediaAnimation) MergeInputMedia() MergedInputMedia {
	return MergedInputMedia{
		Type:                  "animation",
		Media:                 v.Media,
		Thumbnail:             v.Thumbnail,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		Width:                 v.Width,
		Height:                v.Height,
		Duration:              v.Duration,
		HasSpoiler:            v.HasSpoiler,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputMediaAnimation) MarshalJSON() ([]byte, error) {
	type alias InputMediaAnimation
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "animation",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputMediaAnimation.inputMedia is a dummy method to avoid interface implementation.
func (v InputMediaAnimation) inputMedia() {}

func (v InputMediaAnimation) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	if v.Thumbnail != nil {
		err := v.Thumbnail.Attach(mediaName+"-thumbnail", data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach 'thumbnail' input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputMediaAudio (https://core.telegram.org/bots/api#inputmediaaudio)
//
// Represents an audio file to be treated as music to be sent.
type InputMediaAudio struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the audio caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Duration of the audio in seconds
	Duration int64 `json:"duration,omitempty"`
	// Optional. Performer of the audio
	Performer string `json:"performer,omitempty"`
	// Optional. Title of the audio
	Title string `json:"title,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputMediaAudio) GetType() string {
	return "audio"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputMediaAudio) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v InputMediaAudio) MergeInputMedia() MergedInputMedia {
	return MergedInputMedia{
		Type:            "audio",
		Media:           v.Media,
		Thumbnail:       v.Thumbnail,
		Caption:         v.Caption,
		ParseMode:       v.ParseMode,
		CaptionEntities: v.CaptionEntities,
		Duration:        v.Duration,
		Performer:       v.Performer,
		Title:           v.Title,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputMediaAudio) MarshalJSON() ([]byte, error) {
	type alias InputMediaAudio
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "audio",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputMediaAudio.inputMedia is a dummy method to avoid interface implementation.
func (v InputMediaAudio) inputMedia() {}

func (v InputMediaAudio) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	if v.Thumbnail != nil {
		err := v.Thumbnail.Attach(mediaName+"-thumbnail", data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach 'thumbnail' input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputMediaDocument (https://core.telegram.org/bots/api#inputmediadocument)
//
// Represents a general file to be sent.
type InputMediaDocument struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the document caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album.
	DisableContentTypeDetection bool `json:"disable_content_type_detection,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputMediaDocument) GetType() string {
	return "document"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputMediaDocument) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v InputMediaDocument) MergeInputMedia() MergedInputMedia {
	return MergedInputMedia{
		Type:                        "document",
		Media:                       v.Media,
		Thumbnail:                   v.Thumbnail,
		Caption:                     v.Caption,
		ParseMode:                   v.ParseMode,
		CaptionEntities:             v.CaptionEntities,
		DisableContentTypeDetection: v.DisableContentTypeDetection,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputMediaDocument) MarshalJSON() ([]byte, error) {
	type alias InputMediaDocument
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "document",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputMediaDocument.inputMedia is a dummy method to avoid interface implementation.
func (v InputMediaDocument) inputMedia() {}

func (v InputMediaDocument) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	if v.Thumbnail != nil {
		err := v.Thumbnail.Attach(mediaName+"-thumbnail", data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach 'thumbnail' input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputMediaPhoto (https://core.telegram.org/bots/api#inputmediaphoto)
//
// Represents a photo to be sent.
type InputMediaPhoto struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the photo caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Pass True if the photo needs to be covered with a spoiler animation
	HasSpoiler bool `json:"has_spoiler,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputMediaPhoto) GetType() string {
	return "photo"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputMediaPhoto) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v InputMediaPhoto) MergeInputMedia() MergedInputMedia {
	return MergedInputMedia{
		Type:                  "photo",
		Media:                 v.Media,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		HasSpoiler:            v.HasSpoiler,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputMediaPhoto) MarshalJSON() ([]byte, error) {
	type alias InputMediaPhoto
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputMediaPhoto.inputMedia is a dummy method to avoid interface implementation.
func (v InputMediaPhoto) inputMedia() {}

func (v InputMediaPhoto) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputMediaVideo (https://core.telegram.org/bots/api#inputmediavideo)
//
// Represents a video to be sent.
type InputMediaVideo struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
	Caption string `json:"caption,omitempty"`
	// Optional. Mode for parsing entities in the video caption. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. Pass True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. Video width
	Width int64 `json:"width,omitempty"`
	// Optional. Video height
	Height int64 `json:"height,omitempty"`
	// Optional. Video duration in seconds
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True if the uploaded video is suitable for streaming
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
	// Optional. Pass True if the video needs to be covered with a spoiler animation
	HasSpoiler bool `json:"has_spoiler,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputMediaVideo) GetType() string {
	return "video"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputMediaVideo) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputMedia returns a MergedInputMedia struct to simplify working with types in a non-generic world.
func (v InputMediaVideo) MergeInputMedia() MergedInputMedia {
	return MergedInputMedia{
		Type:                  "video",
		Media:                 v.Media,
		Thumbnail:             v.Thumbnail,
		Caption:               v.Caption,
		ParseMode:             v.ParseMode,
		CaptionEntities:       v.CaptionEntities,
		ShowCaptionAboveMedia: v.ShowCaptionAboveMedia,
		Width:                 v.Width,
		Height:                v.Height,
		Duration:              v.Duration,
		SupportsStreaming:     v.SupportsStreaming,
		HasSpoiler:            v.HasSpoiler,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputMediaVideo) MarshalJSON() ([]byte, error) {
	type alias InputMediaVideo
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputMediaVideo.inputMedia is a dummy method to avoid interface implementation.
func (v InputMediaVideo) inputMedia() {}

func (v InputMediaVideo) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	if v.Thumbnail != nil {
		err := v.Thumbnail.Attach(mediaName+"-thumbnail", data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach 'thumbnail' input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputMessageContent (https://core.telegram.org/bots/api#inputmessagecontent)
//
// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:
//   - InputTextMessageContent
//   - InputLocationMessageContent
//   - InputVenueMessageContent
//   - InputContactMessageContent
//   - InputInvoiceMessageContent
type InputMessageContent interface {
	// inputMessageContent exists to avoid external types implementing this interface.
	inputMessageContent()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ InputMessageContent = InputTextMessageContent{}
	_ InputMessageContent = InputLocationMessageContent{}
	_ InputMessageContent = InputVenueMessageContent{}
	_ InputMessageContent = InputContactMessageContent{}
	_ InputMessageContent = InputInvoiceMessageContent{}
)

// InputPaidMedia (https://core.telegram.org/bots/api#inputpaidmedia)
//
// This object describes the paid media to be sent. Currently, it can be one of
//   - InputPaidMediaPhoto
//   - InputPaidMediaVideo
type InputPaidMedia interface {
	GetType() string
	GetMedia() InputFileOrString
	// InputParams allows for uploading attachments with files.
	InputParams(string, map[string]FileReader) ([]byte, error)
	// MergeInputPaidMedia returns a MergedInputPaidMedia struct to simplify working with complex telegram types in a non-generic world.
	MergeInputPaidMedia() MergedInputPaidMedia
	// inputPaidMedia exists to avoid external types implementing this interface.
	inputPaidMedia()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ InputPaidMedia = InputPaidMediaPhoto{}
	_ InputPaidMedia = InputPaidMediaVideo{}
)

// MergedInputPaidMedia is a helper type to simplify interactions with the various InputPaidMedia subtypes.
type MergedInputPaidMedia struct {
	// Type of the media
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files (Only for video)
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Video width (Only for video)
	Width int64 `json:"width,omitempty"`
	// Optional. Video height (Only for video)
	Height int64 `json:"height,omitempty"`
	// Optional. Video duration in seconds (Only for video)
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True if the uploaded video is suitable for streaming (Only for video)
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedInputPaidMedia) GetType() string {
	return v.Type
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v MergedInputPaidMedia) GetMedia() InputFileOrString {
	return v.Media
}

// MergedInputPaidMedia.inputPaidMedia is a dummy method to avoid interface implementation.
func (v MergedInputPaidMedia) inputPaidMedia() {}

// MergeInputPaidMedia returns a MergedInputPaidMedia struct to simplify working with types in a non-generic world.
func (v MergedInputPaidMedia) MergeInputPaidMedia() MergedInputPaidMedia {
	return v
}

// InputPaidMediaPhoto (https://core.telegram.org/bots/api#inputpaidmediaphoto)
//
// The paid media to send is a photo.
type InputPaidMediaPhoto struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputPaidMediaPhoto) GetType() string {
	return "photo"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputPaidMediaPhoto) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputPaidMedia returns a MergedInputPaidMedia struct to simplify working with types in a non-generic world.
func (v InputPaidMediaPhoto) MergeInputPaidMedia() MergedInputPaidMedia {
	return MergedInputPaidMedia{
		Type:  "photo",
		Media: v.Media,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputPaidMediaPhoto) MarshalJSON() ([]byte, error) {
	type alias InputPaidMediaPhoto
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputPaidMediaPhoto.inputPaidMedia is a dummy method to avoid interface implementation.
func (v InputPaidMediaPhoto) inputPaidMedia() {}

func (v InputPaidMediaPhoto) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputPaidMediaVideo (https://core.telegram.org/bots/api#inputpaidmediavideo)
//
// The paid media to send is a video.
type InputPaidMediaVideo struct {
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Media InputFileOrString `json:"media"`
	// Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass "attach://<file_attach_name>" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Thumbnail InputFile `json:"thumbnail,omitempty"`
	// Optional. Video width
	Width int64 `json:"width,omitempty"`
	// Optional. Video height
	Height int64 `json:"height,omitempty"`
	// Optional. Video duration in seconds
	Duration int64 `json:"duration,omitempty"`
	// Optional. Pass True if the uploaded video is suitable for streaming
	SupportsStreaming bool `json:"supports_streaming,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v InputPaidMediaVideo) GetType() string {
	return "video"
}

// GetMedia is a helper method to easily access the common fields of an interface.
func (v InputPaidMediaVideo) GetMedia() InputFileOrString {
	return v.Media
}

// MergeInputPaidMedia returns a MergedInputPaidMedia struct to simplify working with types in a non-generic world.
func (v InputPaidMediaVideo) MergeInputPaidMedia() MergedInputPaidMedia {
	return MergedInputPaidMedia{
		Type:              "video",
		Media:             v.Media,
		Thumbnail:         v.Thumbnail,
		Width:             v.Width,
		Height:            v.Height,
		Duration:          v.Duration,
		SupportsStreaming: v.SupportsStreaming,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v InputPaidMediaVideo) MarshalJSON() ([]byte, error) {
	type alias InputPaidMediaVideo
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// InputPaidMediaVideo.inputPaidMedia is a dummy method to avoid interface implementation.
func (v InputPaidMediaVideo) inputPaidMedia() {}

func (v InputPaidMediaVideo) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Media != nil {
		err := v.Media.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	if v.Thumbnail != nil {
		err := v.Thumbnail.Attach(mediaName+"-thumbnail", data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach 'thumbnail' input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputPollOption (https://core.telegram.org/bots/api#inputpolloption)
//
// This object contains information about one answer option in a poll to be sent.
type InputPollOption struct {
	// Option text, 1-100 characters
	Text string `json:"text"`
	// Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed
	TextParseMode string `json:"text_parse_mode,omitempty"`
	// Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode
	TextEntities []MessageEntity `json:"text_entities,omitempty"`
}

// InputSticker (https://core.telegram.org/bots/api#inputsticker)
//
// This object describes a sticker to be added to a sticker set.
type InputSticker struct {
	// The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass "attach://<file_attach_name>" to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
	Sticker InputFileOrString `json:"sticker"`
	// Format of the added sticker, must be one of "static" for a .WEBP or .PNG image, "animated" for a .TGS animation, "video" for a .WEBM video
	Format string `json:"format"`
	// List of 1-20 emoji associated with the sticker
	EmojiList []string `json:"emoji_list,omitempty"`
	// Optional. Position where the mask should be placed on faces. For "mask" stickers only.
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
	// Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For "regular" and "custom_emoji" stickers only.
	Keywords []string `json:"keywords,omitempty"`
}

func (v InputSticker) InputParams(mediaName string, data map[string]FileReader) ([]byte, error) {
	if v.Sticker != nil {
		err := v.Sticker.Attach(mediaName, data)
		if err != nil {
			return nil, fmt.Errorf("failed to attach input file for %s: %w", mediaName, err)
		}
	}

	return json.Marshal(v)
}

// InputTextMessageContent (https://core.telegram.org/bots/api#inputtextmessagecontent)
//
// Represents the content of a text message to be sent as the result of an inline query.
type InputTextMessageContent struct {
	// Text of the message to be sent, 1-4096 characters
	MessageText string `json:"message_text"`
	// Optional. Mode for parsing entities in the message text. See formatting options for more details.
	ParseMode string `json:"parse_mode,omitempty"`
	// Optional. List of special entities that appear in message text, which can be specified instead of parse_mode
	Entities []MessageEntity `json:"entities,omitempty"`
	// Optional. Link preview generation options for the message
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options,omitempty"`
}

// InputTextMessageContent.inputMessageContent is a dummy method to avoid interface implementation.
func (v InputTextMessageContent) inputMessageContent() {}

// InputVenueMessageContent (https://core.telegram.org/bots/api#inputvenuemessagecontent)
//
// Represents the content of a venue message to be sent as the result of an inline query.
type InputVenueMessageContent struct {
	// Latitude of the venue in degrees
	Latitude float64 `json:"latitude"`
	// Longitude of the venue in degrees
	Longitude float64 `json:"longitude"`
	// Name of the venue
	Title string `json:"title"`
	// Address of the venue
	Address string `json:"address"`
	// Optional. Foursquare identifier of the venue, if known
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue, if known. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
}

// InputVenueMessageContent.inputMessageContent is a dummy method to avoid interface implementation.
func (v InputVenueMessageContent) inputMessageContent() {}

// Invoice (https://core.telegram.org/bots/api#invoice)
//
// This object contains basic information about an invoice.
type Invoice struct {
	// Product name
	Title string `json:"title"`
	// Product description
	Description string `json:"description"`
	// Unique bot deep-linking parameter that can be used to generate this invoice
	StartParameter string `json:"start_parameter"`
	// Three-letter ISO 4217 currency code, or "XTR" for payments in Telegram Stars
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount"`
}

// KeyboardButton (https://core.telegram.org/bots/api#keyboardbutton)
//
// This object represents one button of the reply keyboard. At most one of the optional fields must be used to specify type of the button. For simple text buttons, String can be used instead of this object to specify the button text.
// Note: request_users and request_chat options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message.
type KeyboardButton struct {
	// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
	Text string `json:"text"`
	// Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a "users_shared" service message. Available in private chats only.
	RequestUsers *KeyboardButtonRequestUsers `json:"request_users,omitempty"`
	// Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a "chat_shared" service message. Available in private chats only.
	RequestChat *KeyboardButtonRequestChat `json:"request_chat,omitempty"`
	// Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only.
	RequestContact bool `json:"request_contact,omitempty"`
	// Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only.
	RequestLocation bool `json:"request_location,omitempty"`
	// Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only.
	RequestPoll *KeyboardButtonPollType `json:"request_poll,omitempty"`
	// Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a "web_app_data" service message. Available in private chats only.
	WebApp *WebAppInfo `json:"web_app,omitempty"`
}

// KeyboardButtonPollType (https://core.telegram.org/bots/api#keyboardbuttonpolltype)
//
// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
type KeyboardButtonPollType struct {
	// Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
	Type string `json:"type,omitempty"`
}

// KeyboardButtonRequestChat (https://core.telegram.org/bots/api#keyboardbuttonrequestchat)
//
// This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. More about requesting chats: https://core.telegram.org/bots/features#chat-and-user-selection.
type KeyboardButtonRequestChat struct {
	// Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message
	RequestId int64 `json:"request_id"`
	// Pass True to request a channel chat, pass False to request a group or a supergroup chat.
	ChatIsChannel bool `json:"chat_is_channel"`
	// Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied.
	ChatIsForum *bool `json:"chat_is_forum,omitempty"`
	// Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied.
	ChatHasUsername *bool `json:"chat_has_username,omitempty"`
	// Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied.
	ChatIsCreated bool `json:"chat_is_created,omitempty"`
	// Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied.
	UserAdministratorRights *ChatAdministratorRights `json:"user_administrator_rights,omitempty"`
	// Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied.
	BotAdministratorRights *ChatAdministratorRights `json:"bot_administrator_rights,omitempty"`
	// Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied.
	BotIsMember bool `json:"bot_is_member,omitempty"`
	// Optional. Pass True to request the chat's title
	RequestTitle bool `json:"request_title,omitempty"`
	// Optional. Pass True to request the chat's username
	RequestUsername bool `json:"request_username,omitempty"`
	// Optional. Pass True to request the chat's photo
	RequestPhoto bool `json:"request_photo,omitempty"`
}

// KeyboardButtonRequestUsers (https://core.telegram.org/bots/api#keyboardbuttonrequestusers)
//
// This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. More about requesting users: https://core.telegram.org/bots/features#chat-and-user-selection
type KeyboardButtonRequestUsers struct {
	// Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message
	RequestId int64 `json:"request_id"`
	// Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied.
	UserIsBot *bool `json:"user_is_bot,omitempty"`
	// Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied.
	UserIsPremium *bool `json:"user_is_premium,omitempty"`
	// Optional. The maximum number of users to be selected; 1-10. Defaults to 1.
	MaxQuantity int64 `json:"max_quantity,omitempty"`
	// Optional. Pass True to request the users' first and last names
	RequestName bool `json:"request_name,omitempty"`
	// Optional. Pass True to request the users' usernames
	RequestUsername bool `json:"request_username,omitempty"`
	// Optional. Pass True to request the users' photos
	RequestPhoto bool `json:"request_photo,omitempty"`
}

// LabeledPrice (https://core.telegram.org/bots/api#labeledprice)
//
// This object represents a portion of the price for goods or services.
type LabeledPrice struct {
	// Portion label
	Label string `json:"label"`
	// Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	Amount int64 `json:"amount"`
}

// LinkPreviewOptions (https://core.telegram.org/bots/api#linkpreviewoptions)
//
// Describes the options used for link preview generation.
type LinkPreviewOptions struct {
	// Optional. True, if the link preview is disabled
	IsDisabled bool `json:"is_disabled,omitempty"`
	// Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used
	Url string `json:"url,omitempty"`
	// Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
	PreferSmallMedia bool `json:"prefer_small_media,omitempty"`
	// Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview
	PreferLargeMedia bool `json:"prefer_large_media,omitempty"`
	// Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text
	ShowAboveText bool `json:"show_above_text,omitempty"`
}

// Location (https://core.telegram.org/bots/api#location)
//
// This object represents a point on the map.
type Location struct {
	// Latitude as defined by the sender
	Latitude float64 `json:"latitude"`
	// Longitude as defined by the sender
	Longitude float64 `json:"longitude"`
	// Optional. The radius of uncertainty for the location, measured in meters; 0-1500
	HorizontalAccuracy float64 `json:"horizontal_accuracy,omitempty"`
	// Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only.
	LivePeriod int64 `json:"live_period,omitempty"`
	// Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only.
	Heading int64 `json:"heading,omitempty"`
	// Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
	ProximityAlertRadius int64 `json:"proximity_alert_radius,omitempty"`
}

// LoginUrl (https://core.telegram.org/bots/api#loginurl)
//
// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
// Telegram apps support these buttons as of version 5.7.
type LoginUrl struct {
	// An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.
	Url string `json:"url"`
	// Optional. New text of the button in forwarded messages.
	ForwardText string `json:"forward_text,omitempty"`
	// Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.
	BotUsername *string `json:"bot_username,omitempty"`
	// Optional. Pass True to request the permission for your bot to send messages to the user.
	RequestWriteAccess bool `json:"request_write_access,omitempty"`
}

// MaskPosition (https://core.telegram.org/bots/api#maskposition)
//
// This object describes the position on faces where a mask should be placed by default.
type MaskPosition struct {
	// The part of the face relative to which the mask should be placed. One of "forehead", "eyes", "mouth", or "chin".
	Point string `json:"point"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
	XShift float64 `json:"x_shift"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
	YShift float64 `json:"y_shift"`
	// Mask scaling coefficient. For example, 2.0 means double size.
	Scale float64 `json:"scale"`
}

// MaybeInaccessibleMessage (https://core.telegram.org/bots/api#maybeinaccessiblemessage)
//
// This object describes a message that can be inaccessible to the bot. It can be one of
//   - Message
//   - InaccessibleMessage
type MaybeInaccessibleMessage interface {
	GetMessageId() int64
	GetDate() int64
	GetChat() Chat
	// maybeInaccessibleMessage exists to avoid external types implementing this interface.
	maybeInaccessibleMessage()

	// Helper methods shared across all subtypes of this interface.
	// Copy Helper method for Bot.CopyMessage.
	Copy(b *Bot, chatId int64, opts *CopyMessageOpts) (*MessageId, error)
	// Delete Helper method for Bot.DeleteMessage.
	Delete(b *Bot, opts *DeleteMessageOpts) (bool, error)
	// EditCaption Helper method for Bot.EditMessageCaption.
	EditCaption(b *Bot, opts *EditMessageCaptionOpts) (*Message, bool, error)
	// EditLiveLocation Helper method for Bot.EditMessageLiveLocation.
	EditLiveLocation(b *Bot, latitude float64, longitude float64, opts *EditMessageLiveLocationOpts) (*Message, bool, error)
	// EditMedia Helper method for Bot.EditMessageMedia.
	EditMedia(b *Bot, media InputMedia, opts *EditMessageMediaOpts) (*Message, bool, error)
	// EditReplyMarkup Helper method for Bot.EditMessageReplyMarkup.
	EditReplyMarkup(b *Bot, opts *EditMessageReplyMarkupOpts) (*Message, bool, error)
	// EditText Helper method for Bot.EditMessageText.
	EditText(b *Bot, text string, opts *EditMessageTextOpts) (*Message, bool, error)
	// Forward Helper method for Bot.ForwardMessage.
	Forward(b *Bot, chatId int64, opts *ForwardMessageOpts) (*Message, error)
	// Pin Helper method for Bot.PinChatMessage.
	Pin(b *Bot, opts *PinChatMessageOpts) (bool, error)
	// SetReaction Helper method for Bot.SetMessageReaction.
	SetReaction(b *Bot, opts *SetMessageReactionOpts) (bool, error)
	// StopLiveLocation Helper method for Bot.StopMessageLiveLocation.
	StopLiveLocation(b *Bot, opts *StopMessageLiveLocationOpts) (*Message, bool, error)
	// Unpin Helper method for Bot.UnpinChatMessage.
	Unpin(b *Bot, opts *UnpinChatMessageOpts) (bool, error)
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ MaybeInaccessibleMessage = Message{}
	_ MaybeInaccessibleMessage = InaccessibleMessage{}
)

// MenuButton (https://core.telegram.org/bots/api#menubutton)
//
// This object describes the bot's menu button in a private chat. It should be one of
//   - MenuButtonCommands
//   - MenuButtonWebApp
//   - MenuButtonDefault
//
// If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.
type MenuButton interface {
	GetType() string
	// MergeMenuButton returns a MergedMenuButton struct to simplify working with complex telegram types in a non-generic world.
	MergeMenuButton() MergedMenuButton
	// menuButton exists to avoid external types implementing this interface.
	menuButton()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ MenuButton = MenuButtonCommands{}
	_ MenuButton = MenuButtonWebApp{}
	_ MenuButton = MenuButtonDefault{}
)

// MergedMenuButton is a helper type to simplify interactions with the various MenuButton subtypes.
type MergedMenuButton struct {
	// Type of the button
	Type string `json:"type"`
	// Optional. Text on the button (Only for web_app)
	Text string `json:"text,omitempty"`
	// Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a t.me link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link. (Only for web_app)
	WebApp *WebAppInfo `json:"web_app,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedMenuButton) GetType() string {
	return v.Type
}

// MergedMenuButton.menuButton is a dummy method to avoid interface implementation.
func (v MergedMenuButton) menuButton() {}

// MergeMenuButton returns a MergedMenuButton struct to simplify working with types in a non-generic world.
func (v MergedMenuButton) MergeMenuButton() MergedMenuButton {
	return v
}

// unmarshalMenuButtonArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalMenuButton.
func unmarshalMenuButtonArray(d json.RawMessage) ([]MenuButton, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial MenuButton JSON into an array: %w", err)
	}

	var vs []MenuButton
	for idx, d := range ds {
		v, err := unmarshalMenuButton(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MenuButton on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalMenuButton is a JSON unmarshal helper to marshal the right structs into a MenuButton interface
// based on the Type field.
func unmarshalMenuButton(d json.RawMessage) (MenuButton, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal MenuButton for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "commands":
		s := MenuButtonCommands{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MenuButton for value 'commands': %w", err)
		}
		return s, nil

	case "web_app":
		s := MenuButtonWebApp{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MenuButton for value 'web_app': %w", err)
		}
		return s, nil

	case "default":
		s := MenuButtonDefault{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MenuButton for value 'default': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for MenuButton with Type %v", t.Type)
}

// MenuButtonCommands (https://core.telegram.org/bots/api#menubuttoncommands)
//
// Represents a menu button, which opens the bot's list of commands.
type MenuButtonCommands struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v MenuButtonCommands) GetType() string {
	return "commands"
}

// MergeMenuButton returns a MergedMenuButton struct to simplify working with types in a non-generic world.
func (v MenuButtonCommands) MergeMenuButton() MergedMenuButton {
	return MergedMenuButton{
		Type: "commands",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MenuButtonCommands) MarshalJSON() ([]byte, error) {
	type alias MenuButtonCommands
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "commands",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MenuButtonCommands.menuButton is a dummy method to avoid interface implementation.
func (v MenuButtonCommands) menuButton() {}

// MenuButtonDefault (https://core.telegram.org/bots/api#menubuttondefault)
//
// Describes that no specific value for the menu button was set.
type MenuButtonDefault struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v MenuButtonDefault) GetType() string {
	return "default"
}

// MergeMenuButton returns a MergedMenuButton struct to simplify working with types in a non-generic world.
func (v MenuButtonDefault) MergeMenuButton() MergedMenuButton {
	return MergedMenuButton{
		Type: "default",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MenuButtonDefault) MarshalJSON() ([]byte, error) {
	type alias MenuButtonDefault
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "default",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MenuButtonDefault.menuButton is a dummy method to avoid interface implementation.
func (v MenuButtonDefault) menuButton() {}

// MenuButtonWebApp (https://core.telegram.org/bots/api#menubuttonwebapp)
//
// Represents a menu button, which launches a Web App.
type MenuButtonWebApp struct {
	// Text on the button
	Text string `json:"text"`
	// Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Alternatively, a t.me link to a Web App of the bot can be specified in the object instead of the Web App's URL, in which case the Web App will be opened as if the user pressed the link.
	WebApp WebAppInfo `json:"web_app"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MenuButtonWebApp) GetType() string {
	return "web_app"
}

// MergeMenuButton returns a MergedMenuButton struct to simplify working with types in a non-generic world.
func (v MenuButtonWebApp) MergeMenuButton() MergedMenuButton {
	return MergedMenuButton{
		Type:   "web_app",
		Text:   v.Text,
		WebApp: &v.WebApp,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MenuButtonWebApp) MarshalJSON() ([]byte, error) {
	type alias MenuButtonWebApp
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "web_app",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MenuButtonWebApp.menuButton is a dummy method to avoid interface implementation.
func (v MenuButtonWebApp) menuButton() {}

// Message (https://core.telegram.org/bots/api#message)
//
// This object represents a message.
type Message struct {
	// Unique message identifier inside this chat. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
	MessageId int64 `json:"message_id"`
	// Optional. Unique identifier of a message thread to which the message belongs; for supergroups only
	MessageThreadId int64 `json:"message_thread_id,omitempty"`
	// Optional. Sender of the message; may be empty for messages sent to channels. For backward compatibility, if the message was sent on behalf of a chat, the field contains a fake sender user in non-channel chats
	From *User `json:"from,omitempty"`
	// Optional. Sender of the message when sent on behalf of a chat. For example, the supergroup itself for messages sent by its anonymous administrators or a linked channel for messages automatically forwarded to the channel's discussion group. For backward compatibility, if the message was sent on behalf of a chat, the field from contains a fake sender user in non-channel chats.
	SenderChat *Chat `json:"sender_chat,omitempty"`
	// Optional. If the sender of the message boosted the chat, the number of boosts added by the user
	SenderBoostCount int64 `json:"sender_boost_count,omitempty"`
	// Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account.
	SenderBusinessBot *User `json:"sender_business_bot,omitempty"`
	// Date the message was sent in Unix time. It is always a positive number, representing a valid date.
	Date int64 `json:"date"`
	// Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier.
	BusinessConnectionId string `json:"business_connection_id,omitempty"`
	// Chat the message belongs to
	Chat Chat `json:"chat"`
	// Optional. Information about the original message for forwarded messages
	ForwardOrigin MessageOrigin `json:"forward_origin,omitempty"`
	// Optional. True, if the message is sent to a forum topic
	IsTopicMessage bool `json:"is_topic_message,omitempty"`
	// Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group
	IsAutomaticForward bool `json:"is_automatic_forward,omitempty"`
	// Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	ReplyToMessage *Message `json:"reply_to_message,omitempty"`
	// Optional. Information about the message that is being replied to, which may come from another chat or forum topic
	ExternalReply *ExternalReplyInfo `json:"external_reply,omitempty"`
	// Optional. For replies that quote part of the original message, the quoted part of the message
	Quote *TextQuote `json:"quote,omitempty"`
	// Optional. For replies to a story, the original story
	ReplyToStory *Story `json:"reply_to_story,omitempty"`
	// Optional. Bot through which the message was sent
	ViaBot *User `json:"via_bot,omitempty"`
	// Optional. Date the message was last edited in Unix time
	EditDate int64 `json:"edit_date,omitempty"`
	// Optional. True, if the message can't be forwarded
	HasProtectedContent bool `json:"has_protected_content,omitempty"`
	// Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message
	IsFromOffline bool `json:"is_from_offline,omitempty"`
	// Optional. The unique identifier of a media message group this message belongs to
	MediaGroupId string `json:"media_group_id,omitempty"`
	// Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
	AuthorSignature string `json:"author_signature,omitempty"`
	// Optional. For text messages, the actual UTF-8 text of the message
	Text string `json:"text,omitempty"`
	// Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
	Entities []MessageEntity `json:"entities,omitempty"`
	// Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed
	LinkPreviewOptions *LinkPreviewOptions `json:"link_preview_options,omitempty"`
	// Optional. Unique identifier of the message effect added to the message
	EffectId string `json:"effect_id,omitempty"`
	// Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set
	Animation *Animation `json:"animation,omitempty"`
	// Optional. Message is an audio file, information about the file
	Audio *Audio `json:"audio,omitempty"`
	// Optional. Message is a general file, information about the file
	Document *Document `json:"document,omitempty"`
	// Optional. Message contains paid media; information about the paid media
	PaidMedia *PaidMediaInfo `json:"paid_media,omitempty"`
	// Optional. Message is a photo, available sizes of the photo
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. Message is a sticker, information about the sticker
	Sticker *Sticker `json:"sticker,omitempty"`
	// Optional. Message is a forwarded story
	Story *Story `json:"story,omitempty"`
	// Optional. Message is a video, information about the video
	Video *Video `json:"video,omitempty"`
	// Optional. Message is a video note, information about the video message
	VideoNote *VideoNote `json:"video_note,omitempty"`
	// Optional. Message is a voice message, information about the file
	Voice *Voice `json:"voice,omitempty"`
	// Optional. Caption for the animation, audio, document, paid media, photo, video or voice
	Caption string `json:"caption,omitempty"`
	// Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
	CaptionEntities []MessageEntity `json:"caption_entities,omitempty"`
	// Optional. True, if the caption must be shown above the message media
	ShowCaptionAboveMedia bool `json:"show_caption_above_media,omitempty"`
	// Optional. True, if the message media is covered by a spoiler animation
	HasMediaSpoiler bool `json:"has_media_spoiler,omitempty"`
	// Optional. Message is a shared contact, information about the contact
	Contact *Contact `json:"contact,omitempty"`
	// Optional. Message is a dice with random value
	Dice *Dice `json:"dice,omitempty"`
	// Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games
	Game *Game `json:"game,omitempty"`
	// Optional. Message is a native poll, information about the poll
	Poll *Poll `json:"poll,omitempty"`
	// Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set
	Venue *Venue `json:"venue,omitempty"`
	// Optional. Message is a shared location, information about the location
	Location *Location `json:"location,omitempty"`
	// Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
	NewChatMembers []User `json:"new_chat_members,omitempty"`
	// Optional. A member was removed from the group, information about them (this member may be the bot itself)
	LeftChatMember *User `json:"left_chat_member,omitempty"`
	// Optional. A chat title was changed to this value
	NewChatTitle string `json:"new_chat_title,omitempty"`
	// Optional. A chat photo was change to this value
	NewChatPhoto []PhotoSize `json:"new_chat_photo,omitempty"`
	// Optional. Service message: the chat photo was deleted
	DeleteChatPhoto bool `json:"delete_chat_photo,omitempty"`
	// Optional. Service message: the group has been created
	GroupChatCreated bool `json:"group_chat_created,omitempty"`
	// Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.
	SupergroupChatCreated bool `json:"supergroup_chat_created,omitempty"`
	// Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.
	ChannelChatCreated bool `json:"channel_chat_created,omitempty"`
	// Optional. Service message: auto-delete timer settings changed in the chat
	MessageAutoDeleteTimerChanged *MessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed,omitempty"`
	// Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId int64 `json:"migrate_to_chat_id,omitempty"`
	// Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	MigrateFromChatId int64 `json:"migrate_from_chat_id,omitempty"`
	// Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.
	PinnedMessage MaybeInaccessibleMessage `json:"pinned_message,omitempty"`
	// Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments
	Invoice *Invoice `json:"invoice,omitempty"`
	// Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments
	SuccessfulPayment *SuccessfulPayment `json:"successful_payment,omitempty"`
	// Optional. Message is a service message about a refunded payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments
	RefundedPayment *RefundedPayment `json:"refunded_payment,omitempty"`
	// Optional. Service message: users were shared with the bot
	UsersShared *UsersShared `json:"users_shared,omitempty"`
	// Optional. Service message: a chat was shared with the bot
	ChatShared *ChatShared `json:"chat_shared,omitempty"`
	// Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login
	ConnectedWebsite string `json:"connected_website,omitempty"`
	// Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess
	WriteAccessAllowed *WriteAccessAllowed `json:"write_access_allowed,omitempty"`
	// Optional. Telegram Passport data
	PassportData *PassportData `json:"passport_data,omitempty"`
	// Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location.
	ProximityAlertTriggered *ProximityAlertTriggered `json:"proximity_alert_triggered,omitempty"`
	// Optional. Service message: user boosted the chat
	BoostAdded *ChatBoostAdded `json:"boost_added,omitempty"`
	// Optional. Service message: chat background set
	ChatBackgroundSet *ChatBackground `json:"chat_background_set,omitempty"`
	// Optional. Service message: forum topic created
	ForumTopicCreated *ForumTopicCreated `json:"forum_topic_created,omitempty"`
	// Optional. Service message: forum topic edited
	ForumTopicEdited *ForumTopicEdited `json:"forum_topic_edited,omitempty"`
	// Optional. Service message: forum topic closed
	ForumTopicClosed *ForumTopicClosed `json:"forum_topic_closed,omitempty"`
	// Optional. Service message: forum topic reopened
	ForumTopicReopened *ForumTopicReopened `json:"forum_topic_reopened,omitempty"`
	// Optional. Service message: the 'General' forum topic hidden
	GeneralForumTopicHidden *GeneralForumTopicHidden `json:"general_forum_topic_hidden,omitempty"`
	// Optional. Service message: the 'General' forum topic unhidden
	GeneralForumTopicUnhidden *GeneralForumTopicUnhidden `json:"general_forum_topic_unhidden,omitempty"`
	// Optional. Service message: a scheduled giveaway was created
	GiveawayCreated *GiveawayCreated `json:"giveaway_created,omitempty"`
	// Optional. The message is a scheduled giveaway message
	Giveaway *Giveaway `json:"giveaway,omitempty"`
	// Optional. A giveaway with public winners was completed
	GiveawayWinners *GiveawayWinners `json:"giveaway_winners,omitempty"`
	// Optional. Service message: a giveaway without public winners was completed
	GiveawayCompleted *GiveawayCompleted `json:"giveaway_completed,omitempty"`
	// Optional. Service message: video chat scheduled
	VideoChatScheduled *VideoChatScheduled `json:"video_chat_scheduled,omitempty"`
	// Optional. Service message: video chat started
	VideoChatStarted *VideoChatStarted `json:"video_chat_started,omitempty"`
	// Optional. Service message: video chat ended
	VideoChatEnded *VideoChatEnded `json:"video_chat_ended,omitempty"`
	// Optional. Service message: new participants invited to a video chat
	VideoChatParticipantsInvited *VideoChatParticipantsInvited `json:"video_chat_participants_invited,omitempty"`
	// Optional. Service message: data sent by a Web App
	WebAppData *WebAppData `json:"web_app_data,omitempty"`
	// Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *Message) UnmarshalJSON(b []byte) error {
	// All fields in Message, with interface fields as json.RawMessage
	type tmp struct {
		MessageId                     int64                          `json:"message_id"`
		MessageThreadId               int64                          `json:"message_thread_id"`
		From                          *User                          `json:"from"`
		SenderChat                    *Chat                          `json:"sender_chat"`
		SenderBoostCount              int64                          `json:"sender_boost_count"`
		SenderBusinessBot             *User                          `json:"sender_business_bot"`
		Date                          int64                          `json:"date"`
		BusinessConnectionId          string                         `json:"business_connection_id"`
		Chat                          Chat                           `json:"chat"`
		ForwardOrigin                 json.RawMessage                `json:"forward_origin"`
		IsTopicMessage                bool                           `json:"is_topic_message"`
		IsAutomaticForward            bool                           `json:"is_automatic_forward"`
		ReplyToMessage                *Message                       `json:"reply_to_message"`
		ExternalReply                 *ExternalReplyInfo             `json:"external_reply"`
		Quote                         *TextQuote                     `json:"quote"`
		ReplyToStory                  *Story                         `json:"reply_to_story"`
		ViaBot                        *User                          `json:"via_bot"`
		EditDate                      int64                          `json:"edit_date"`
		HasProtectedContent           bool                           `json:"has_protected_content"`
		IsFromOffline                 bool                           `json:"is_from_offline"`
		MediaGroupId                  string                         `json:"media_group_id"`
		AuthorSignature               string                         `json:"author_signature"`
		Text                          string                         `json:"text"`
		Entities                      []MessageEntity                `json:"entities"`
		LinkPreviewOptions            *LinkPreviewOptions            `json:"link_preview_options"`
		EffectId                      string                         `json:"effect_id"`
		Animation                     *Animation                     `json:"animation"`
		Audio                         *Audio                         `json:"audio"`
		Document                      *Document                      `json:"document"`
		PaidMedia                     *PaidMediaInfo                 `json:"paid_media"`
		Photo                         []PhotoSize                    `json:"photo"`
		Sticker                       *Sticker                       `json:"sticker"`
		Story                         *Story                         `json:"story"`
		Video                         *Video                         `json:"video"`
		VideoNote                     *VideoNote                     `json:"video_note"`
		Voice                         *Voice                         `json:"voice"`
		Caption                       string                         `json:"caption"`
		CaptionEntities               []MessageEntity                `json:"caption_entities"`
		ShowCaptionAboveMedia         bool                           `json:"show_caption_above_media"`
		HasMediaSpoiler               bool                           `json:"has_media_spoiler"`
		Contact                       *Contact                       `json:"contact"`
		Dice                          *Dice                          `json:"dice"`
		Game                          *Game                          `json:"game"`
		Poll                          *Poll                          `json:"poll"`
		Venue                         *Venue                         `json:"venue"`
		Location                      *Location                      `json:"location"`
		NewChatMembers                []User                         `json:"new_chat_members"`
		LeftChatMember                *User                          `json:"left_chat_member"`
		NewChatTitle                  string                         `json:"new_chat_title"`
		NewChatPhoto                  []PhotoSize                    `json:"new_chat_photo"`
		DeleteChatPhoto               bool                           `json:"delete_chat_photo"`
		GroupChatCreated              bool                           `json:"group_chat_created"`
		SupergroupChatCreated         bool                           `json:"supergroup_chat_created"`
		ChannelChatCreated            bool                           `json:"channel_chat_created"`
		MessageAutoDeleteTimerChanged *MessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed"`
		MigrateToChatId               int64                          `json:"migrate_to_chat_id"`
		MigrateFromChatId             int64                          `json:"migrate_from_chat_id"`
		PinnedMessage                 json.RawMessage                `json:"pinned_message"`
		Invoice                       *Invoice                       `json:"invoice"`
		SuccessfulPayment             *SuccessfulPayment             `json:"successful_payment"`
		RefundedPayment               *RefundedPayment               `json:"refunded_payment"`
		UsersShared                   *UsersShared                   `json:"users_shared"`
		ChatShared                    *ChatShared                    `json:"chat_shared"`
		ConnectedWebsite              string                         `json:"connected_website"`
		WriteAccessAllowed            *WriteAccessAllowed            `json:"write_access_allowed"`
		PassportData                  *PassportData                  `json:"passport_data"`
		ProximityAlertTriggered       *ProximityAlertTriggered       `json:"proximity_alert_triggered"`
		BoostAdded                    *ChatBoostAdded                `json:"boost_added"`
		ChatBackgroundSet             *ChatBackground                `json:"chat_background_set"`
		ForumTopicCreated             *ForumTopicCreated             `json:"forum_topic_created"`
		ForumTopicEdited              *ForumTopicEdited              `json:"forum_topic_edited"`
		ForumTopicClosed              *ForumTopicClosed              `json:"forum_topic_closed"`
		ForumTopicReopened            *ForumTopicReopened            `json:"forum_topic_reopened"`
		GeneralForumTopicHidden       *GeneralForumTopicHidden       `json:"general_forum_topic_hidden"`
		GeneralForumTopicUnhidden     *GeneralForumTopicUnhidden     `json:"general_forum_topic_unhidden"`
		GiveawayCreated               *GiveawayCreated               `json:"giveaway_created"`
		Giveaway                      *Giveaway                      `json:"giveaway"`
		GiveawayWinners               *GiveawayWinners               `json:"giveaway_winners"`
		GiveawayCompleted             *GiveawayCompleted             `json:"giveaway_completed"`
		VideoChatScheduled            *VideoChatScheduled            `json:"video_chat_scheduled"`
		VideoChatStarted              *VideoChatStarted              `json:"video_chat_started"`
		VideoChatEnded                *VideoChatEnded                `json:"video_chat_ended"`
		VideoChatParticipantsInvited  *VideoChatParticipantsInvited  `json:"video_chat_participants_invited"`
		WebAppData                    *WebAppData                    `json:"web_app_data"`
		ReplyMarkup                   *InlineKeyboardMarkup          `json:"reply_markup"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal Message JSON into tmp struct: %w", err)
	}

	v.MessageId = t.MessageId
	v.MessageThreadId = t.MessageThreadId
	v.From = t.From
	v.SenderChat = t.SenderChat
	v.SenderBoostCount = t.SenderBoostCount
	v.SenderBusinessBot = t.SenderBusinessBot
	v.Date = t.Date
	v.BusinessConnectionId = t.BusinessConnectionId
	v.Chat = t.Chat
	v.ForwardOrigin, err = unmarshalMessageOrigin(t.ForwardOrigin)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field ForwardOrigin: %w", err)
	}
	v.IsTopicMessage = t.IsTopicMessage
	v.IsAutomaticForward = t.IsAutomaticForward
	v.ReplyToMessage = t.ReplyToMessage
	v.ExternalReply = t.ExternalReply
	v.Quote = t.Quote
	v.ReplyToStory = t.ReplyToStory
	v.ViaBot = t.ViaBot
	v.EditDate = t.EditDate
	v.HasProtectedContent = t.HasProtectedContent
	v.IsFromOffline = t.IsFromOffline
	v.MediaGroupId = t.MediaGroupId
	v.AuthorSignature = t.AuthorSignature
	v.Text = t.Text
	v.Entities = t.Entities
	v.LinkPreviewOptions = t.LinkPreviewOptions
	v.EffectId = t.EffectId
	v.Animation = t.Animation
	v.Audio = t.Audio
	v.Document = t.Document
	v.PaidMedia = t.PaidMedia
	v.Photo = t.Photo
	v.Sticker = t.Sticker
	v.Story = t.Story
	v.Video = t.Video
	v.VideoNote = t.VideoNote
	v.Voice = t.Voice
	v.Caption = t.Caption
	v.CaptionEntities = t.CaptionEntities
	v.ShowCaptionAboveMedia = t.ShowCaptionAboveMedia
	v.HasMediaSpoiler = t.HasMediaSpoiler
	v.Contact = t.Contact
	v.Dice = t.Dice
	v.Game = t.Game
	v.Poll = t.Poll
	v.Venue = t.Venue
	v.Location = t.Location
	v.NewChatMembers = t.NewChatMembers
	v.LeftChatMember = t.LeftChatMember
	v.NewChatTitle = t.NewChatTitle
	v.NewChatPhoto = t.NewChatPhoto
	v.DeleteChatPhoto = t.DeleteChatPhoto
	v.GroupChatCreated = t.GroupChatCreated
	v.SupergroupChatCreated = t.SupergroupChatCreated
	v.ChannelChatCreated = t.ChannelChatCreated
	v.MessageAutoDeleteTimerChanged = t.MessageAutoDeleteTimerChanged
	v.MigrateToChatId = t.MigrateToChatId
	v.MigrateFromChatId = t.MigrateFromChatId
	v.PinnedMessage, err = unmarshalMaybeInaccessibleMessage(t.PinnedMessage)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field PinnedMessage: %w", err)
	}
	v.Invoice = t.Invoice
	v.SuccessfulPayment = t.SuccessfulPayment
	v.RefundedPayment = t.RefundedPayment
	v.UsersShared = t.UsersShared
	v.ChatShared = t.ChatShared
	v.ConnectedWebsite = t.ConnectedWebsite
	v.WriteAccessAllowed = t.WriteAccessAllowed
	v.PassportData = t.PassportData
	v.ProximityAlertTriggered = t.ProximityAlertTriggered
	v.BoostAdded = t.BoostAdded
	v.ChatBackgroundSet = t.ChatBackgroundSet
	v.ForumTopicCreated = t.ForumTopicCreated
	v.ForumTopicEdited = t.ForumTopicEdited
	v.ForumTopicClosed = t.ForumTopicClosed
	v.ForumTopicReopened = t.ForumTopicReopened
	v.GeneralForumTopicHidden = t.GeneralForumTopicHidden
	v.GeneralForumTopicUnhidden = t.GeneralForumTopicUnhidden
	v.GiveawayCreated = t.GiveawayCreated
	v.Giveaway = t.Giveaway
	v.GiveawayWinners = t.GiveawayWinners
	v.GiveawayCompleted = t.GiveawayCompleted
	v.VideoChatScheduled = t.VideoChatScheduled
	v.VideoChatStarted = t.VideoChatStarted
	v.VideoChatEnded = t.VideoChatEnded
	v.VideoChatParticipantsInvited = t.VideoChatParticipantsInvited
	v.WebAppData = t.WebAppData
	v.ReplyMarkup = t.ReplyMarkup

	return nil
}

// GetMessageId is a helper method to easily access the common fields of an interface.
func (v Message) GetMessageId() int64 {
	return v.MessageId
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v Message) GetDate() int64 {
	return v.Date
}

// GetChat is a helper method to easily access the common fields of an interface.
func (v Message) GetChat() Chat {
	return v.Chat
}

// Message.maybeInaccessibleMessage is a dummy method to avoid interface implementation.
func (v Message) maybeInaccessibleMessage() {}

// MessageAutoDeleteTimerChanged (https://core.telegram.org/bots/api#messageautodeletetimerchanged)
//
// This object represents a service message about a change in auto-delete timer settings.
type MessageAutoDeleteTimerChanged struct {
	// New auto-delete time for messages in the chat; in seconds
	MessageAutoDeleteTime int64 `json:"message_auto_delete_time"`
}

// MessageEntity (https://core.telegram.org/bots/api#messageentity)
//
// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
type MessageEntity struct {
	// Type of the entity. Currently, can be "mention" (@username), "hashtag" (#hashtag or #hashtag@chatusername), "cashtag" ($USD or $USD@chatusername), "bot_command" (/start@jobs_bot), "url" (https://telegram.org), "email" (do-not-reply@telegram.org), "phone_number" (+1-212-555-0123), "bold" (bold text), "italic" (italic text), "underline" (underlined text), "strikethrough" (strikethrough text), "spoiler" (spoiler message), "blockquote" (block quotation), "expandable_blockquote" (collapsed-by-default block quotation), "code" (monowidth string), "pre" (monowidth block), "text_link" (for clickable text URLs), "text_mention" (for users without usernames), "custom_emoji" (for inline custom emoji stickers)
	Type string `json:"type"`
	// Offset in UTF-16 code units to the start of the entity
	Offset int64 `json:"offset"`
	// Length of the entity in UTF-16 code units
	Length int64 `json:"length"`
	// Optional. For "text_link" only, URL that will be opened after user taps on the text
	Url string `json:"url,omitempty"`
	// Optional. For "text_mention" only, the mentioned user
	User *User `json:"user,omitempty"`
	// Optional. For "pre" only, the programming language of the entity text
	Language string `json:"language,omitempty"`
	// Optional. For "custom_emoji" only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker
	CustomEmojiId string `json:"custom_emoji_id,omitempty"`
}

// MessageId (https://core.telegram.org/bots/api#messageid)
//
// This object represents a unique message identifier.
type MessageId struct {
	// Unique message identifier. In specific instances (e.g., message containing a video sent to a big chat), the server might automatically schedule a message instead of sending it immediately. In such cases, this field will be 0 and the relevant message will be unusable until it is actually sent
	MessageId int64 `json:"message_id"`
}

// MessageOrigin (https://core.telegram.org/bots/api#messageorigin)
//
// This object describes the origin of a message. It can be one of
//   - MessageOriginUser
//   - MessageOriginHiddenUser
//   - MessageOriginChat
//   - MessageOriginChannel
type MessageOrigin interface {
	GetType() string
	GetDate() int64
	// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with complex telegram types in a non-generic world.
	MergeMessageOrigin() MergedMessageOrigin
	// messageOrigin exists to avoid external types implementing this interface.
	messageOrigin()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ MessageOrigin = MessageOriginUser{}
	_ MessageOrigin = MessageOriginHiddenUser{}
	_ MessageOrigin = MessageOriginChat{}
	_ MessageOrigin = MessageOriginChannel{}
)

// MergedMessageOrigin is a helper type to simplify interactions with the various MessageOrigin subtypes.
type MergedMessageOrigin struct {
	// Type of the message origin
	Type string `json:"type"`
	// Date the message was sent originally in Unix time
	Date int64 `json:"date"`
	// Optional. User that sent the message originally (Only for user)
	SenderUser *User `json:"sender_user,omitempty"`
	// Optional. Name of the user that sent the message originally (Only for hidden_user)
	SenderUserName string `json:"sender_user_name,omitempty"`
	// Optional. Chat that sent the message originally (Only for chat)
	SenderChat *Chat `json:"sender_chat,omitempty"`
	// Optional. For messages originally sent by an anonymous chat administrator, original message author signature (Only for chat, channel)
	AuthorSignature string `json:"author_signature,omitempty"`
	// Optional. Channel chat to which the message was originally sent (Only for channel)
	Chat *Chat `json:"chat,omitempty"`
	// Optional. Unique message identifier inside the chat (Only for channel)
	MessageId int64 `json:"message_id,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedMessageOrigin) GetType() string {
	return v.Type
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v MergedMessageOrigin) GetDate() int64 {
	return v.Date
}

// MergedMessageOrigin.messageOrigin is a dummy method to avoid interface implementation.
func (v MergedMessageOrigin) messageOrigin() {}

// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with types in a non-generic world.
func (v MergedMessageOrigin) MergeMessageOrigin() MergedMessageOrigin {
	return v
}

// unmarshalMessageOriginArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalMessageOrigin.
func unmarshalMessageOriginArray(d json.RawMessage) ([]MessageOrigin, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial MessageOrigin JSON into an array: %w", err)
	}

	var vs []MessageOrigin
	for idx, d := range ds {
		v, err := unmarshalMessageOrigin(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MessageOrigin on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalMessageOrigin is a JSON unmarshal helper to marshal the right structs into a MessageOrigin interface
// based on the Type field.
func unmarshalMessageOrigin(d json.RawMessage) (MessageOrigin, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal MessageOrigin for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "user":
		s := MessageOriginUser{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MessageOrigin for value 'user': %w", err)
		}
		return s, nil

	case "hidden_user":
		s := MessageOriginHiddenUser{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MessageOrigin for value 'hidden_user': %w", err)
		}
		return s, nil

	case "chat":
		s := MessageOriginChat{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MessageOrigin for value 'chat': %w", err)
		}
		return s, nil

	case "channel":
		s := MessageOriginChannel{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal MessageOrigin for value 'channel': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for MessageOrigin with Type %v", t.Type)
}

// MessageOriginChannel (https://core.telegram.org/bots/api#messageoriginchannel)
//
// The message was originally sent to a channel chat.
type MessageOriginChannel struct {
	// Date the message was sent originally in Unix time
	Date int64 `json:"date"`
	// Channel chat to which the message was originally sent
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat
	MessageId int64 `json:"message_id"`
	// Optional. Signature of the original post author
	AuthorSignature string `json:"author_signature,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MessageOriginChannel) GetType() string {
	return "channel"
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v MessageOriginChannel) GetDate() int64 {
	return v.Date
}

// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with types in a non-generic world.
func (v MessageOriginChannel) MergeMessageOrigin() MergedMessageOrigin {
	return MergedMessageOrigin{
		Type:            "channel",
		Date:            v.Date,
		Chat:            &v.Chat,
		MessageId:       v.MessageId,
		AuthorSignature: v.AuthorSignature,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MessageOriginChannel) MarshalJSON() ([]byte, error) {
	type alias MessageOriginChannel
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "channel",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MessageOriginChannel.messageOrigin is a dummy method to avoid interface implementation.
func (v MessageOriginChannel) messageOrigin() {}

// MessageOriginChat (https://core.telegram.org/bots/api#messageoriginchat)
//
// The message was originally sent on behalf of a chat to a group chat.
type MessageOriginChat struct {
	// Date the message was sent originally in Unix time
	Date int64 `json:"date"`
	// Chat that sent the message originally
	SenderChat Chat `json:"sender_chat"`
	// Optional. For messages originally sent by an anonymous chat administrator, original message author signature
	AuthorSignature string `json:"author_signature,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MessageOriginChat) GetType() string {
	return "chat"
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v MessageOriginChat) GetDate() int64 {
	return v.Date
}

// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with types in a non-generic world.
func (v MessageOriginChat) MergeMessageOrigin() MergedMessageOrigin {
	return MergedMessageOrigin{
		Type:            "chat",
		Date:            v.Date,
		SenderChat:      &v.SenderChat,
		AuthorSignature: v.AuthorSignature,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MessageOriginChat) MarshalJSON() ([]byte, error) {
	type alias MessageOriginChat
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "chat",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MessageOriginChat.messageOrigin is a dummy method to avoid interface implementation.
func (v MessageOriginChat) messageOrigin() {}

// MessageOriginHiddenUser (https://core.telegram.org/bots/api#messageoriginhiddenuser)
//
// The message was originally sent by an unknown user.
type MessageOriginHiddenUser struct {
	// Date the message was sent originally in Unix time
	Date int64 `json:"date"`
	// Name of the user that sent the message originally
	SenderUserName string `json:"sender_user_name"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MessageOriginHiddenUser) GetType() string {
	return "hidden_user"
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v MessageOriginHiddenUser) GetDate() int64 {
	return v.Date
}

// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with types in a non-generic world.
func (v MessageOriginHiddenUser) MergeMessageOrigin() MergedMessageOrigin {
	return MergedMessageOrigin{
		Type:           "hidden_user",
		Date:           v.Date,
		SenderUserName: v.SenderUserName,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MessageOriginHiddenUser) MarshalJSON() ([]byte, error) {
	type alias MessageOriginHiddenUser
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "hidden_user",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MessageOriginHiddenUser.messageOrigin is a dummy method to avoid interface implementation.
func (v MessageOriginHiddenUser) messageOrigin() {}

// MessageOriginUser (https://core.telegram.org/bots/api#messageoriginuser)
//
// The message was originally sent by a known user.
type MessageOriginUser struct {
	// Date the message was sent originally in Unix time
	Date int64 `json:"date"`
	// User that sent the message originally
	SenderUser User `json:"sender_user"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MessageOriginUser) GetType() string {
	return "user"
}

// GetDate is a helper method to easily access the common fields of an interface.
func (v MessageOriginUser) GetDate() int64 {
	return v.Date
}

// MergeMessageOrigin returns a MergedMessageOrigin struct to simplify working with types in a non-generic world.
func (v MessageOriginUser) MergeMessageOrigin() MergedMessageOrigin {
	return MergedMessageOrigin{
		Type:       "user",
		Date:       v.Date,
		SenderUser: &v.SenderUser,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v MessageOriginUser) MarshalJSON() ([]byte, error) {
	type alias MessageOriginUser
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "user",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// MessageOriginUser.messageOrigin is a dummy method to avoid interface implementation.
func (v MessageOriginUser) messageOrigin() {}

// MessageReactionCountUpdated (https://core.telegram.org/bots/api#messagereactioncountupdated)
//
// This object represents reaction changes on a message with anonymous reactions.
type MessageReactionCountUpdated struct {
	// The chat containing the message
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat
	MessageId int64 `json:"message_id"`
	// Date of the change in Unix time
	Date int64 `json:"date"`
	// List of reactions that are present on the message
	Reactions []ReactionCount `json:"reactions,omitempty"`
}

// MessageReactionUpdated (https://core.telegram.org/bots/api#messagereactionupdated)
//
// This object represents a change of a reaction on a message performed by a user.
type MessageReactionUpdated struct {
	// The chat containing the message the user reacted to
	Chat Chat `json:"chat"`
	// Unique identifier of the message inside the chat
	MessageId int64 `json:"message_id"`
	// Optional. The user that changed the reaction, if the user isn't anonymous
	User *User `json:"user,omitempty"`
	// Optional. The chat on behalf of which the reaction was changed, if the user is anonymous
	ActorChat *Chat `json:"actor_chat,omitempty"`
	// Date of the change in Unix time
	Date int64 `json:"date"`
	// Previous list of reaction types that were set by the user
	OldReaction []ReactionType `json:"old_reaction,omitempty"`
	// New list of reaction types that have been set by the user
	NewReaction []ReactionType `json:"new_reaction,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *MessageReactionUpdated) UnmarshalJSON(b []byte) error {
	// All fields in MessageReactionUpdated, with interface fields as json.RawMessage
	type tmp struct {
		Chat        Chat            `json:"chat"`
		MessageId   int64           `json:"message_id"`
		User        *User           `json:"user"`
		ActorChat   *Chat           `json:"actor_chat"`
		Date        int64           `json:"date"`
		OldReaction json.RawMessage `json:"old_reaction"`
		NewReaction json.RawMessage `json:"new_reaction"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal MessageReactionUpdated JSON into tmp struct: %w", err)
	}

	v.Chat = t.Chat
	v.MessageId = t.MessageId
	v.User = t.User
	v.ActorChat = t.ActorChat
	v.Date = t.Date
	v.OldReaction, err = unmarshalReactionTypeArray(t.OldReaction)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field OldReaction: %w", err)
	}
	v.NewReaction, err = unmarshalReactionTypeArray(t.NewReaction)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field NewReaction: %w", err)
	}

	return nil
}

// OrderInfo (https://core.telegram.org/bots/api#orderinfo)
//
// This object represents information about an order.
type OrderInfo struct {
	// Optional. User name
	Name string `json:"name,omitempty"`
	// Optional. User's phone number
	PhoneNumber string `json:"phone_number,omitempty"`
	// Optional. User email
	Email string `json:"email,omitempty"`
	// Optional. User shipping address
	ShippingAddress *ShippingAddress `json:"shipping_address,omitempty"`
}

// PaidMedia (https://core.telegram.org/bots/api#paidmedia)
//
// This object describes paid media. Currently, it can be one of
//   - PaidMediaPreview
//   - PaidMediaPhoto
//   - PaidMediaVideo
type PaidMedia interface {
	GetType() string
	// MergePaidMedia returns a MergedPaidMedia struct to simplify working with complex telegram types in a non-generic world.
	MergePaidMedia() MergedPaidMedia
	// paidMedia exists to avoid external types implementing this interface.
	paidMedia()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ PaidMedia = PaidMediaPreview{}
	_ PaidMedia = PaidMediaPhoto{}
	_ PaidMedia = PaidMediaVideo{}
)

// MergedPaidMedia is a helper type to simplify interactions with the various PaidMedia subtypes.
type MergedPaidMedia struct {
	// Type of the paid media
	Type string `json:"type"`
	// Optional. Media width as defined by the sender (Only for preview)
	Width int64 `json:"width,omitempty"`
	// Optional. Media height as defined by the sender (Only for preview)
	Height int64 `json:"height,omitempty"`
	// Optional. Duration of the media in seconds as defined by the sender (Only for preview)
	Duration int64 `json:"duration,omitempty"`
	// Optional. The photo (Only for photo)
	Photo []PhotoSize `json:"photo,omitempty"`
	// Optional. The video (Only for video)
	Video *Video `json:"video,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedPaidMedia) GetType() string {
	return v.Type
}

// MergedPaidMedia.paidMedia is a dummy method to avoid interface implementation.
func (v MergedPaidMedia) paidMedia() {}

// MergePaidMedia returns a MergedPaidMedia struct to simplify working with types in a non-generic world.
func (v MergedPaidMedia) MergePaidMedia() MergedPaidMedia {
	return v
}

// unmarshalPaidMediaArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalPaidMedia.
func unmarshalPaidMediaArray(d json.RawMessage) ([]PaidMedia, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial PaidMedia JSON into an array: %w", err)
	}

	var vs []PaidMedia
	for idx, d := range ds {
		v, err := unmarshalPaidMedia(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal PaidMedia on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalPaidMedia is a JSON unmarshal helper to marshal the right structs into a PaidMedia interface
// based on the Type field.
func unmarshalPaidMedia(d json.RawMessage) (PaidMedia, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal PaidMedia for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "preview":
		s := PaidMediaPreview{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal PaidMedia for value 'preview': %w", err)
		}
		return s, nil

	case "photo":
		s := PaidMediaPhoto{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal PaidMedia for value 'photo': %w", err)
		}
		return s, nil

	case "video":
		s := PaidMediaVideo{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal PaidMedia for value 'video': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for PaidMedia with Type %v", t.Type)
}

// PaidMediaInfo (https://core.telegram.org/bots/api#paidmediainfo)
//
// Describes the paid media added to a message.
type PaidMediaInfo struct {
	// The number of Telegram Stars that must be paid to buy access to the media
	StarCount int64 `json:"star_count"`
	// Information about the paid media
	PaidMedia []PaidMedia `json:"paid_media,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *PaidMediaInfo) UnmarshalJSON(b []byte) error {
	// All fields in PaidMediaInfo, with interface fields as json.RawMessage
	type tmp struct {
		StarCount int64           `json:"star_count"`
		PaidMedia json.RawMessage `json:"paid_media"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal PaidMediaInfo JSON into tmp struct: %w", err)
	}

	v.StarCount = t.StarCount
	v.PaidMedia, err = unmarshalPaidMediaArray(t.PaidMedia)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field PaidMedia: %w", err)
	}

	return nil
}

// PaidMediaPhoto (https://core.telegram.org/bots/api#paidmediaphoto)
//
// The paid media is a photo.
type PaidMediaPhoto struct {
	// The photo
	Photo []PhotoSize `json:"photo,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PaidMediaPhoto) GetType() string {
	return "photo"
}

// MergePaidMedia returns a MergedPaidMedia struct to simplify working with types in a non-generic world.
func (v PaidMediaPhoto) MergePaidMedia() MergedPaidMedia {
	return MergedPaidMedia{
		Type:  "photo",
		Photo: v.Photo,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v PaidMediaPhoto) MarshalJSON() ([]byte, error) {
	type alias PaidMediaPhoto
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "photo",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// PaidMediaPhoto.paidMedia is a dummy method to avoid interface implementation.
func (v PaidMediaPhoto) paidMedia() {}

// PaidMediaPreview (https://core.telegram.org/bots/api#paidmediapreview)
//
// The paid media isn't available before the payment.
type PaidMediaPreview struct {
	// Optional. Media width as defined by the sender
	Width int64 `json:"width,omitempty"`
	// Optional. Media height as defined by the sender
	Height int64 `json:"height,omitempty"`
	// Optional. Duration of the media in seconds as defined by the sender
	Duration int64 `json:"duration,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PaidMediaPreview) GetType() string {
	return "preview"
}

// MergePaidMedia returns a MergedPaidMedia struct to simplify working with types in a non-generic world.
func (v PaidMediaPreview) MergePaidMedia() MergedPaidMedia {
	return MergedPaidMedia{
		Type:     "preview",
		Width:    v.Width,
		Height:   v.Height,
		Duration: v.Duration,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v PaidMediaPreview) MarshalJSON() ([]byte, error) {
	type alias PaidMediaPreview
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "preview",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// PaidMediaPreview.paidMedia is a dummy method to avoid interface implementation.
func (v PaidMediaPreview) paidMedia() {}

// PaidMediaPurchased (https://core.telegram.org/bots/api#paidmediapurchased)
//
// This object contains information about a paid media purchase.
type PaidMediaPurchased struct {
	// User who purchased the media
	From User `json:"from"`
	// Bot-specified paid media payload
	PaidMediaPayload string `json:"paid_media_payload"`
}

// PaidMediaVideo (https://core.telegram.org/bots/api#paidmediavideo)
//
// The paid media is a video.
type PaidMediaVideo struct {
	// The video
	Video Video `json:"video"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PaidMediaVideo) GetType() string {
	return "video"
}

// MergePaidMedia returns a MergedPaidMedia struct to simplify working with types in a non-generic world.
func (v PaidMediaVideo) MergePaidMedia() MergedPaidMedia {
	return MergedPaidMedia{
		Type:  "video",
		Video: &v.Video,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v PaidMediaVideo) MarshalJSON() ([]byte, error) {
	type alias PaidMediaVideo
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "video",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// PaidMediaVideo.paidMedia is a dummy method to avoid interface implementation.
func (v PaidMediaVideo) paidMedia() {}

// PassportData (https://core.telegram.org/bots/api#passportdata)
//
// Describes Telegram Passport data shared with the bot by the user.
type PassportData struct {
	// Array with information about documents and other Telegram Passport elements that was shared with the bot
	Data []EncryptedPassportElement `json:"data,omitempty"`
	// Encrypted credentials required to decrypt the data
	Credentials EncryptedCredentials `json:"credentials"`
}

// PassportElementError (https://core.telegram.org/bots/api#passportelementerror)
//
// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
//   - PassportElementErrorDataField
//   - PassportElementErrorFrontSide
//   - PassportElementErrorReverseSide
//   - PassportElementErrorSelfie
//   - PassportElementErrorFile
//   - PassportElementErrorFiles
//   - PassportElementErrorTranslationFile
//   - PassportElementErrorTranslationFiles
//   - PassportElementErrorUnspecified
type PassportElementError interface {
	GetSource() string
	GetType() string
	GetMessage() string
	// MergePassportElementError returns a MergedPassportElementError struct to simplify working with complex telegram types in a non-generic world.
	MergePassportElementError() MergedPassportElementError
	// passportElementError exists to avoid external types implementing this interface.
	passportElementError()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ PassportElementError = PassportElementErrorDataField{}
	_ PassportElementError = PassportElementErrorFrontSide{}
	_ PassportElementError = PassportElementErrorReverseSide{}
	_ PassportElementError = PassportElementErrorSelfie{}
	_ PassportElementError = PassportElementErrorFile{}
	_ PassportElementError = PassportElementErrorFiles{}
	_ PassportElementError = PassportElementErrorTranslationFile{}
	_ PassportElementError = PassportElementErrorTranslationFiles{}
	_ PassportElementError = PassportElementErrorUnspecified{}
)

// MergedPassportElementError is a helper type to simplify interactions with the various PassportElementError subtypes.
type MergedPassportElementError struct {
	// Error source
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the error, one of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address"
	Type string `json:"type"`
	// Optional. Name of the data field which has the error (Only for data)
	FieldName string `json:"field_name,omitempty"`
	// Optional. Base64-encoded data hash (Only for data)
	DataHash string `json:"data_hash,omitempty"`
	// Error message
	Message string `json:"message"`
	// Optional. Base64-encoded hash of the file with the front side of the document (Only for front_side, reverse_side, selfie, file, translation_file)
	FileHash string `json:"file_hash,omitempty"`
	// Optional. List of base64-encoded file hashes (Only for files, translation_files)
	FileHashes []string `json:"file_hashes,omitempty"`
	// Optional. Base64-encoded element hash (Only for unspecified)
	ElementHash string `json:"element_hash,omitempty"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v MergedPassportElementError) GetSource() string {
	return v.Source
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedPassportElementError) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v MergedPassportElementError) GetMessage() string {
	return v.Message
}

// MergedPassportElementError.passportElementError is a dummy method to avoid interface implementation.
func (v MergedPassportElementError) passportElementError() {}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v MergedPassportElementError) MergePassportElementError() MergedPassportElementError {
	return v
}

// PassportElementErrorDataField (https://core.telegram.org/bots/api#passportelementerrordatafield)
//
// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
type PassportElementErrorDataField struct {
	// The section of the user's Telegram Passport which has the error, one of "personal_details", "passport", "driver_license", "identity_card", "internal_passport", "address"
	Type string `json:"type"`
	// Name of the data field which has the error
	FieldName string `json:"field_name"`
	// Base64-encoded data hash
	DataHash string `json:"data_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorDataField) GetSource() string {
	return "data"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorDataField) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorDataField) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorDataField) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:    "data",
		Type:      v.Type,
		FieldName: v.FieldName,
		DataHash:  v.DataHash,
		Message:   v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorDataField) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorDataField
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "data",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorDataField.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorDataField) passportElementError() {}

// PassportElementErrorFile (https://core.telegram.org/bots/api#passportelementerrorfile)
//
// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
type PassportElementErrorFile struct {
	// The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type"`
	// Base64-encoded file hash
	FileHash string `json:"file_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFile) GetSource() string {
	return "file"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFile) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFile) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorFile) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:   "file",
		Type:     v.Type,
		FileHash: v.FileHash,
		Message:  v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorFile) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorFile
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "file",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorFile.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorFile) passportElementError() {}

// PassportElementErrorFiles (https://core.telegram.org/bots/api#passportelementerrorfiles)
//
// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
type PassportElementErrorFiles struct {
	// The section of the user's Telegram Passport which has the issue, one of "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type"`
	// List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes,omitempty"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFiles) GetSource() string {
	return "files"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFiles) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFiles) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorFiles) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:     "files",
		Type:       v.Type,
		FileHashes: v.FileHashes,
		Message:    v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorFiles) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorFiles
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "files",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorFiles.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorFiles) passportElementError() {}

// PassportElementErrorFrontSide (https://core.telegram.org/bots/api#passportelementerrorfrontside)
//
// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
type PassportElementErrorFrontSide struct {
	// The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	Type string `json:"type"`
	// Base64-encoded hash of the file with the front side of the document
	FileHash string `json:"file_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFrontSide) GetSource() string {
	return "front_side"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFrontSide) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorFrontSide) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorFrontSide) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:   "front_side",
		Type:     v.Type,
		FileHash: v.FileHash,
		Message:  v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorFrontSide) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorFrontSide
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "front_side",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorFrontSide.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorFrontSide) passportElementError() {}

// PassportElementErrorReverseSide (https://core.telegram.org/bots/api#passportelementerrorreverseside)
//
// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
type PassportElementErrorReverseSide struct {
	// The section of the user's Telegram Passport which has the issue, one of "driver_license", "identity_card"
	Type string `json:"type"`
	// Base64-encoded hash of the file with the reverse side of the document
	FileHash string `json:"file_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorReverseSide) GetSource() string {
	return "reverse_side"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorReverseSide) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorReverseSide) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorReverseSide) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:   "reverse_side",
		Type:     v.Type,
		FileHash: v.FileHash,
		Message:  v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorReverseSide) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorReverseSide
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "reverse_side",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorReverseSide.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorReverseSide) passportElementError() {}

// PassportElementErrorSelfie (https://core.telegram.org/bots/api#passportelementerrorselfie)
//
// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
type PassportElementErrorSelfie struct {
	// The section of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport"
	Type string `json:"type"`
	// Base64-encoded hash of the file with the selfie
	FileHash string `json:"file_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorSelfie) GetSource() string {
	return "selfie"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorSelfie) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorSelfie) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorSelfie) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:   "selfie",
		Type:     v.Type,
		FileHash: v.FileHash,
		Message:  v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorSelfie) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorSelfie
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "selfie",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorSelfie.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorSelfie) passportElementError() {}

// PassportElementErrorTranslationFile (https://core.telegram.org/bots/api#passportelementerrortranslationfile)
//
// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
type PassportElementErrorTranslationFile struct {
	// Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type"`
	// Base64-encoded file hash
	FileHash string `json:"file_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFile) GetSource() string {
	return "translation_file"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFile) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFile) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorTranslationFile) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:   "translation_file",
		Type:     v.Type,
		FileHash: v.FileHash,
		Message:  v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorTranslationFile) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorTranslationFile
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "translation_file",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorTranslationFile.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorTranslationFile) passportElementError() {}

// PassportElementErrorTranslationFiles (https://core.telegram.org/bots/api#passportelementerrortranslationfiles)
//
// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
type PassportElementErrorTranslationFiles struct {
	// Type of element of the user's Telegram Passport which has the issue, one of "passport", "driver_license", "identity_card", "internal_passport", "utility_bill", "bank_statement", "rental_agreement", "passport_registration", "temporary_registration"
	Type string `json:"type"`
	// List of base64-encoded file hashes
	FileHashes []string `json:"file_hashes,omitempty"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFiles) GetSource() string {
	return "translation_files"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFiles) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorTranslationFiles) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorTranslationFiles) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:     "translation_files",
		Type:       v.Type,
		FileHashes: v.FileHashes,
		Message:    v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorTranslationFiles) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorTranslationFiles
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "translation_files",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorTranslationFiles.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorTranslationFiles) passportElementError() {}

// PassportElementErrorUnspecified (https://core.telegram.org/bots/api#passportelementerrorunspecified)
//
// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
type PassportElementErrorUnspecified struct {
	// Type of element of the user's Telegram Passport which has the issue
	Type string `json:"type"`
	// Base64-encoded element hash
	ElementHash string `json:"element_hash"`
	// Error message
	Message string `json:"message"`
}

// GetSource is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorUnspecified) GetSource() string {
	return "unspecified"
}

// GetType is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorUnspecified) GetType() string {
	return v.Type
}

// GetMessage is a helper method to easily access the common fields of an interface.
func (v PassportElementErrorUnspecified) GetMessage() string {
	return v.Message
}

// MergePassportElementError returns a MergedPassportElementError struct to simplify working with types in a non-generic world.
func (v PassportElementErrorUnspecified) MergePassportElementError() MergedPassportElementError {
	return MergedPassportElementError{
		Source:      "unspecified",
		Type:        v.Type,
		ElementHash: v.ElementHash,
		Message:     v.Message,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Source value.
func (v PassportElementErrorUnspecified) MarshalJSON() ([]byte, error) {
	type alias PassportElementErrorUnspecified
	a := struct {
		Source string `json:"source"`
		alias
	}{
		Source: "unspecified",
		alias:  (alias)(v),
	}
	return json.Marshal(a)
}

// PassportElementErrorUnspecified.passportElementError is a dummy method to avoid interface implementation.
func (v PassportElementErrorUnspecified) passportElementError() {}

// PassportFile (https://core.telegram.org/bots/api#passportfile)
//
// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
type PassportFile struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// File size in bytes
	FileSize int64 `json:"file_size"`
	// Unix time when the file was uploaded
	FileDate int64 `json:"file_date"`
}

// PhotoSize (https://core.telegram.org/bots/api#photosize)
//
// This object represents one size of a photo or a file / sticker thumbnail.
type PhotoSize struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Photo width
	Width int64 `json:"width"`
	// Photo height
	Height int64 `json:"height"`
	// Optional. File size in bytes
	FileSize int64 `json:"file_size,omitempty"`
}

// Poll (https://core.telegram.org/bots/api#poll)
//
// This object contains information about a poll.
type Poll struct {
	// Unique poll identifier
	Id string `json:"id"`
	// Poll question, 1-300 characters
	Question string `json:"question"`
	// Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions
	QuestionEntities []MessageEntity `json:"question_entities,omitempty"`
	// List of poll options
	Options []PollOption `json:"options,omitempty"`
	// Total number of users that voted in the poll
	TotalVoterCount int64 `json:"total_voter_count"`
	// True, if the poll is closed
	IsClosed bool `json:"is_closed"`
	// True, if the poll is anonymous
	IsAnonymous bool `json:"is_anonymous"`
	// Poll type, currently can be "regular" or "quiz"
	Type string `json:"type"`
	// True, if the poll allows multiple answers
	AllowsMultipleAnswers bool `json:"allows_multiple_answers"`
	// Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	CorrectOptionId int64 `json:"correct_option_id,omitempty"`
	// Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
	Explanation string `json:"explanation,omitempty"`
	// Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation
	ExplanationEntities []MessageEntity `json:"explanation_entities,omitempty"`
	// Optional. Amount of time in seconds the poll will be active after creation
	OpenPeriod int64 `json:"open_period,omitempty"`
	// Optional. Point in time (Unix timestamp) when the poll will be automatically closed
	CloseDate int64 `json:"close_date,omitempty"`
}

// PollAnswer (https://core.telegram.org/bots/api#pollanswer)
//
// This object represents an answer of a user in a non-anonymous poll.
type PollAnswer struct {
	// Unique poll identifier
	PollId string `json:"poll_id"`
	// Optional. The chat that changed the answer to the poll, if the voter is anonymous
	VoterChat *Chat `json:"voter_chat,omitempty"`
	// Optional. The user that changed the answer to the poll, if the voter isn't anonymous
	User *User `json:"user,omitempty"`
	// 0-based identifiers of chosen answer options. May be empty if the vote was retracted.
	OptionIds []int64 `json:"option_ids,omitempty"`
}

// PollOption (https://core.telegram.org/bots/api#polloption)
//
// This object contains information about one answer option in a poll.
type PollOption struct {
	// Option text, 1-100 characters
	Text string `json:"text"`
	// Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts
	TextEntities []MessageEntity `json:"text_entities,omitempty"`
	// Number of users that voted for this option
	VoterCount int64 `json:"voter_count"`
}

// PreCheckoutQuery (https://core.telegram.org/bots/api#precheckoutquery)
//
// This object contains information about an incoming pre-checkout query.
type PreCheckoutQuery struct {
	// Unique query identifier
	Id string `json:"id"`
	// User who sent the query
	From User `json:"from"`
	// Three-letter ISO 4217 currency code, or "XTR" for payments in Telegram Stars
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount"`
	// Bot-specified invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// Optional. Identifier of the shipping option chosen by the user
	ShippingOptionId string `json:"shipping_option_id,omitempty"`
	// Optional. Order information provided by the user
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
}

// PreparedInlineMessage (https://core.telegram.org/bots/api#preparedinlinemessage)
//
// Describes an inline message to be sent by a user of a Mini App.
type PreparedInlineMessage struct {
	// Unique identifier of the prepared message
	Id string `json:"id"`
	// Expiration date of the prepared message, in Unix time. Expired prepared messages can no longer be used
	ExpirationDate int64 `json:"expiration_date"`
}

// ProximityAlertTriggered (https://core.telegram.org/bots/api#proximityalerttriggered)
//
// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
type ProximityAlertTriggered struct {
	// User that triggered the alert
	Traveler User `json:"traveler"`
	// User that set the alert
	Watcher User `json:"watcher"`
	// The distance between the users
	Distance int64 `json:"distance"`
}

// ReactionCount (https://core.telegram.org/bots/api#reactioncount)
//
// Represents a reaction added to a message along with the number of times it was added.
type ReactionCount struct {
	// Type of the reaction
	Type ReactionType `json:"type"`
	// Number of times the reaction was added
	TotalCount int64 `json:"total_count"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *ReactionCount) UnmarshalJSON(b []byte) error {
	// All fields in ReactionCount, with interface fields as json.RawMessage
	type tmp struct {
		Type       json.RawMessage `json:"type"`
		TotalCount int64           `json:"total_count"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal ReactionCount JSON into tmp struct: %w", err)
	}

	v.Type, err = unmarshalReactionType(t.Type)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Type: %w", err)
	}
	v.TotalCount = t.TotalCount

	return nil
}

// ReactionType (https://core.telegram.org/bots/api#reactiontype)
//
// This object describes the type of a reaction. Currently, it can be one of
//   - ReactionTypeEmoji
//   - ReactionTypeCustomEmoji
//   - ReactionTypePaid
type ReactionType interface {
	GetType() string
	// MergeReactionType returns a MergedReactionType struct to simplify working with complex telegram types in a non-generic world.
	MergeReactionType() MergedReactionType
	// reactionType exists to avoid external types implementing this interface.
	reactionType()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ ReactionType = ReactionTypeEmoji{}
	_ ReactionType = ReactionTypeCustomEmoji{}
	_ ReactionType = ReactionTypePaid{}
)

// MergedReactionType is a helper type to simplify interactions with the various ReactionType subtypes.
type MergedReactionType struct {
	// Type of the reaction
	Type string `json:"type"`
	// Optional. Reaction emoji. Currently, it can be one of "👍", "👎", "❤", "🔥", "🥰", "👏", "😁", "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩", "🤮", "💩", "🙏", "👌", "🕊", "🤡", "🥱", "🥴", "😍", "🐳", "❤‍🔥", "🌚", "🌭", "💯", "🤣", "⚡", "🍌", "🏆", "💔", "🤨", "😐", "🍓", "🍾", "💋", "🖕", "😈", "😴", "😭", "🤓", "👻", "👨‍💻", "👀", "🎃", "🙈", "😇", "😨", "🤝", "✍", "🤗", "🫡", "🎅", "🎄", "☃", "💅", "🤪", "🗿", "🆒", "💘", "🙉", "🦄", "😘", "💊", "🙊", "😎", "👾", "🤷‍♂", "🤷", "🤷‍♀", "😡" (Only for emoji)
	Emoji string `json:"emoji,omitempty"`
	// Optional. Custom emoji identifier (Only for custom_emoji)
	CustomEmojiId string `json:"custom_emoji_id,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedReactionType) GetType() string {
	return v.Type
}

// MergedReactionType.reactionType is a dummy method to avoid interface implementation.
func (v MergedReactionType) reactionType() {}

// MergeReactionType returns a MergedReactionType struct to simplify working with types in a non-generic world.
func (v MergedReactionType) MergeReactionType() MergedReactionType {
	return v
}

// unmarshalReactionTypeArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalReactionType.
func unmarshalReactionTypeArray(d json.RawMessage) ([]ReactionType, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial ReactionType JSON into an array: %w", err)
	}

	var vs []ReactionType
	for idx, d := range ds {
		v, err := unmarshalReactionType(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ReactionType on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalReactionType is a JSON unmarshal helper to marshal the right structs into a ReactionType interface
// based on the Type field.
func unmarshalReactionType(d json.RawMessage) (ReactionType, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal ReactionType for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "emoji":
		s := ReactionTypeEmoji{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ReactionType for value 'emoji': %w", err)
		}
		return s, nil

	case "custom_emoji":
		s := ReactionTypeCustomEmoji{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ReactionType for value 'custom_emoji': %w", err)
		}
		return s, nil

	case "paid":
		s := ReactionTypePaid{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal ReactionType for value 'paid': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for ReactionType with Type %v", t.Type)
}

// ReactionTypeCustomEmoji (https://core.telegram.org/bots/api#reactiontypecustomemoji)
//
// The reaction is based on a custom emoji.
type ReactionTypeCustomEmoji struct {
	// Custom emoji identifier
	CustomEmojiId string `json:"custom_emoji_id"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v ReactionTypeCustomEmoji) GetType() string {
	return "custom_emoji"
}

// MergeReactionType returns a MergedReactionType struct to simplify working with types in a non-generic world.
func (v ReactionTypeCustomEmoji) MergeReactionType() MergedReactionType {
	return MergedReactionType{
		Type:          "custom_emoji",
		CustomEmojiId: v.CustomEmojiId,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v ReactionTypeCustomEmoji) MarshalJSON() ([]byte, error) {
	type alias ReactionTypeCustomEmoji
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "custom_emoji",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// ReactionTypeCustomEmoji.reactionType is a dummy method to avoid interface implementation.
func (v ReactionTypeCustomEmoji) reactionType() {}

// ReactionTypeEmoji (https://core.telegram.org/bots/api#reactiontypeemoji)
//
// The reaction is based on an emoji.
type ReactionTypeEmoji struct {
	// Reaction emoji. Currently, it can be one of "👍", "👎", "❤", "🔥", "🥰", "👏", "😁", "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩", "🤮", "💩", "🙏", "👌", "🕊", "🤡", "🥱", "🥴", "😍", "🐳", "❤‍🔥", "🌚", "🌭", "💯", "🤣", "⚡", "🍌", "🏆", "💔", "🤨", "😐", "🍓", "🍾", "💋", "🖕", "😈", "😴", "😭", "🤓", "👻", "👨‍💻", "👀", "🎃", "🙈", "😇", "😨", "🤝", "✍", "🤗", "🫡", "🎅", "🎄", "☃", "💅", "🤪", "🗿", "🆒", "💘", "🙉", "🦄", "😘", "💊", "🙊", "😎", "👾", "🤷‍♂", "🤷", "🤷‍♀", "😡"
	Emoji string `json:"emoji"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v ReactionTypeEmoji) GetType() string {
	return "emoji"
}

// MergeReactionType returns a MergedReactionType struct to simplify working with types in a non-generic world.
func (v ReactionTypeEmoji) MergeReactionType() MergedReactionType {
	return MergedReactionType{
		Type:  "emoji",
		Emoji: v.Emoji,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v ReactionTypeEmoji) MarshalJSON() ([]byte, error) {
	type alias ReactionTypeEmoji
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "emoji",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// ReactionTypeEmoji.reactionType is a dummy method to avoid interface implementation.
func (v ReactionTypeEmoji) reactionType() {}

// ReactionTypePaid (https://core.telegram.org/bots/api#reactiontypepaid)
//
// The reaction is paid.
type ReactionTypePaid struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v ReactionTypePaid) GetType() string {
	return "paid"
}

// MergeReactionType returns a MergedReactionType struct to simplify working with types in a non-generic world.
func (v ReactionTypePaid) MergeReactionType() MergedReactionType {
	return MergedReactionType{
		Type: "paid",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v ReactionTypePaid) MarshalJSON() ([]byte, error) {
	type alias ReactionTypePaid
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "paid",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// ReactionTypePaid.reactionType is a dummy method to avoid interface implementation.
func (v ReactionTypePaid) reactionType() {}

// RefundedPayment (https://core.telegram.org/bots/api#refundedpayment)
//
// This object contains basic information about a refunded payment.
type RefundedPayment struct {
	// Three-letter ISO 4217 currency code, or "XTR" for payments in Telegram Stars. Currently, always "XTR"
	Currency string `json:"currency"`
	// Total refunded price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45, total_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount"`
	// Bot-specified invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// Optional. Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id,omitempty"`
}

// ReplyKeyboardMarkup (https://core.telegram.org/bots/api#replykeyboardmarkup)
//
// This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.
type ReplyKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of KeyboardButton objects
	Keyboard [][]KeyboardButton `json:"keyboard,omitempty"`
	// Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon.
	IsPersistent bool `json:"is_persistent,omitempty"`
	// Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.
	ResizeKeyboard bool `json:"resize_keyboard,omitempty"`
	// Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false.
	OneTimeKeyboard bool `json:"one_time_keyboard,omitempty"`
	// Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters
	InputFieldPlaceholder string `json:"input_field_placeholder,omitempty"`
	// Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
	Selective bool `json:"selective,omitempty"`
}

// ReplyKeyboardMarkup.replyMarkup is a dummy method to avoid interface implementation.
func (v ReplyKeyboardMarkup) replyMarkup() {}

// ReplyKeyboardRemove (https://core.telegram.org/bots/api#replykeyboardremove)
//
// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Not supported in channels and for messages sent on behalf of a Telegram Business account.
type ReplyKeyboardRemove struct {
	// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)
	RemoveKeyboard bool `json:"remove_keyboard"`
	// Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
	Selective bool `json:"selective,omitempty"`
}

// ReplyKeyboardRemove.replyMarkup is a dummy method to avoid interface implementation.
func (v ReplyKeyboardRemove) replyMarkup() {}

// ReplyParameters (https://core.telegram.org/bots/api#replyparameters)
//
// Describes reply parameters for the message that is being sent.
type ReplyParameters struct {
	// Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified
	MessageId int64 `json:"message_id"`
	// Optional. If the message to be replied to is from a different chat, unique identifier for the chat. Not supported for messages sent on behalf of a business account.
	ChatId int64 `json:"chat_id,omitempty"`
	// Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account.
	AllowSendingWithoutReply bool `json:"allow_sending_without_reply,omitempty"`
	// Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message.
	Quote string `json:"quote,omitempty"`
	// Optional. Mode for parsing entities in the quote. See formatting options for more details.
	QuoteParseMode string `json:"quote_parse_mode,omitempty"`
	// Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode.
	QuoteEntities []MessageEntity `json:"quote_entities,omitempty"`
	// Optional. Position of the quote in the original message in UTF-16 code units
	QuotePosition int64 `json:"quote_position,omitempty"`
}

// ResponseParameters (https://core.telegram.org/bots/api#responseparameters)
//
// Describes why a request was unsuccessful.
type ResponseParameters struct {
	// Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier.
	MigrateToChatId int64 `json:"migrate_to_chat_id,omitempty"`
	// Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
	RetryAfter int64 `json:"retry_after,omitempty"`
}

// RevenueWithdrawalState (https://core.telegram.org/bots/api#revenuewithdrawalstate)
//
// This object describes the state of a revenue withdrawal operation. Currently, it can be one of
//   - RevenueWithdrawalStatePending
//   - RevenueWithdrawalStateSucceeded
//   - RevenueWithdrawalStateFailed
type RevenueWithdrawalState interface {
	GetType() string
	// MergeRevenueWithdrawalState returns a MergedRevenueWithdrawalState struct to simplify working with complex telegram types in a non-generic world.
	MergeRevenueWithdrawalState() MergedRevenueWithdrawalState
	// revenueWithdrawalState exists to avoid external types implementing this interface.
	revenueWithdrawalState()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ RevenueWithdrawalState = RevenueWithdrawalStatePending{}
	_ RevenueWithdrawalState = RevenueWithdrawalStateSucceeded{}
	_ RevenueWithdrawalState = RevenueWithdrawalStateFailed{}
)

// MergedRevenueWithdrawalState is a helper type to simplify interactions with the various RevenueWithdrawalState subtypes.
type MergedRevenueWithdrawalState struct {
	// Type of the state
	Type string `json:"type"`
	// Optional. Date the withdrawal was completed in Unix time (Only for succeeded)
	Date int64 `json:"date,omitempty"`
	// Optional. An HTTPS URL that can be used to see transaction details (Only for succeeded)
	Url string `json:"url,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedRevenueWithdrawalState) GetType() string {
	return v.Type
}

// MergedRevenueWithdrawalState.revenueWithdrawalState is a dummy method to avoid interface implementation.
func (v MergedRevenueWithdrawalState) revenueWithdrawalState() {}

// MergeRevenueWithdrawalState returns a MergedRevenueWithdrawalState struct to simplify working with types in a non-generic world.
func (v MergedRevenueWithdrawalState) MergeRevenueWithdrawalState() MergedRevenueWithdrawalState {
	return v
}

// unmarshalRevenueWithdrawalStateArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalRevenueWithdrawalState.
func unmarshalRevenueWithdrawalStateArray(d json.RawMessage) ([]RevenueWithdrawalState, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial RevenueWithdrawalState JSON into an array: %w", err)
	}

	var vs []RevenueWithdrawalState
	for idx, d := range ds {
		v, err := unmarshalRevenueWithdrawalState(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal RevenueWithdrawalState on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalRevenueWithdrawalState is a JSON unmarshal helper to marshal the right structs into a RevenueWithdrawalState interface
// based on the Type field.
func unmarshalRevenueWithdrawalState(d json.RawMessage) (RevenueWithdrawalState, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal RevenueWithdrawalState for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "pending":
		s := RevenueWithdrawalStatePending{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal RevenueWithdrawalState for value 'pending': %w", err)
		}
		return s, nil

	case "succeeded":
		s := RevenueWithdrawalStateSucceeded{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal RevenueWithdrawalState for value 'succeeded': %w", err)
		}
		return s, nil

	case "failed":
		s := RevenueWithdrawalStateFailed{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal RevenueWithdrawalState for value 'failed': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for RevenueWithdrawalState with Type %v", t.Type)
}

// RevenueWithdrawalStateFailed (https://core.telegram.org/bots/api#revenuewithdrawalstatefailed)
//
// The withdrawal failed and the transaction was refunded.
type RevenueWithdrawalStateFailed struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v RevenueWithdrawalStateFailed) GetType() string {
	return "failed"
}

// MergeRevenueWithdrawalState returns a MergedRevenueWithdrawalState struct to simplify working with types in a non-generic world.
func (v RevenueWithdrawalStateFailed) MergeRevenueWithdrawalState() MergedRevenueWithdrawalState {
	return MergedRevenueWithdrawalState{
		Type: "failed",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v RevenueWithdrawalStateFailed) MarshalJSON() ([]byte, error) {
	type alias RevenueWithdrawalStateFailed
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "failed",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// RevenueWithdrawalStateFailed.revenueWithdrawalState is a dummy method to avoid interface implementation.
func (v RevenueWithdrawalStateFailed) revenueWithdrawalState() {}

// RevenueWithdrawalStatePending (https://core.telegram.org/bots/api#revenuewithdrawalstatepending)
//
// The withdrawal is in progress.
type RevenueWithdrawalStatePending struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v RevenueWithdrawalStatePending) GetType() string {
	return "pending"
}

// MergeRevenueWithdrawalState returns a MergedRevenueWithdrawalState struct to simplify working with types in a non-generic world.
func (v RevenueWithdrawalStatePending) MergeRevenueWithdrawalState() MergedRevenueWithdrawalState {
	return MergedRevenueWithdrawalState{
		Type: "pending",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v RevenueWithdrawalStatePending) MarshalJSON() ([]byte, error) {
	type alias RevenueWithdrawalStatePending
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "pending",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// RevenueWithdrawalStatePending.revenueWithdrawalState is a dummy method to avoid interface implementation.
func (v RevenueWithdrawalStatePending) revenueWithdrawalState() {}

// RevenueWithdrawalStateSucceeded (https://core.telegram.org/bots/api#revenuewithdrawalstatesucceeded)
//
// The withdrawal succeeded.
type RevenueWithdrawalStateSucceeded struct {
	// Date the withdrawal was completed in Unix time
	Date int64 `json:"date"`
	// An HTTPS URL that can be used to see transaction details
	Url string `json:"url"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v RevenueWithdrawalStateSucceeded) GetType() string {
	return "succeeded"
}

// MergeRevenueWithdrawalState returns a MergedRevenueWithdrawalState struct to simplify working with types in a non-generic world.
func (v RevenueWithdrawalStateSucceeded) MergeRevenueWithdrawalState() MergedRevenueWithdrawalState {
	return MergedRevenueWithdrawalState{
		Type: "succeeded",
		Date: v.Date,
		Url:  v.Url,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v RevenueWithdrawalStateSucceeded) MarshalJSON() ([]byte, error) {
	type alias RevenueWithdrawalStateSucceeded
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "succeeded",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// RevenueWithdrawalStateSucceeded.revenueWithdrawalState is a dummy method to avoid interface implementation.
func (v RevenueWithdrawalStateSucceeded) revenueWithdrawalState() {}

// SentWebAppMessage (https://core.telegram.org/bots/api#sentwebappmessage)
//
// Describes an inline message sent by a Web App on behalf of a user.
type SentWebAppMessage struct {
	// Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message.
	InlineMessageId string `json:"inline_message_id,omitempty"`
}

// SharedUser (https://core.telegram.org/bots/api#shareduser)
//
// This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.
type SharedUser struct {
	// Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means.
	UserId int64 `json:"user_id"`
	// Optional. First name of the user, if the name was requested by the bot
	FirstName string `json:"first_name,omitempty"`
	// Optional. Last name of the user, if the name was requested by the bot
	LastName string `json:"last_name,omitempty"`
	// Optional. Username of the user, if the username was requested by the bot
	Username string `json:"username,omitempty"`
	// Optional. Available sizes of the chat photo, if the photo was requested by the bot
	Photo []PhotoSize `json:"photo,omitempty"`
}

// ShippingAddress (https://core.telegram.org/bots/api#shippingaddress)
//
// This object represents a shipping address.
type ShippingAddress struct {
	// Two-letter ISO 3166-1 alpha-2 country code
	CountryCode string `json:"country_code"`
	// State, if applicable
	State string `json:"state"`
	// City
	City string `json:"city"`
	// First line for the address
	StreetLine1 string `json:"street_line1"`
	// Second line for the address
	StreetLine2 string `json:"street_line2"`
	// Address post code
	PostCode string `json:"post_code"`
}

// ShippingOption (https://core.telegram.org/bots/api#shippingoption)
//
// This object represents one shipping option.
type ShippingOption struct {
	// Shipping option identifier
	Id string `json:"id"`
	// Option title
	Title string `json:"title"`
	// List of price portions
	Prices []LabeledPrice `json:"prices,omitempty"`
}

// ShippingQuery (https://core.telegram.org/bots/api#shippingquery)
//
// This object contains information about an incoming shipping query.
type ShippingQuery struct {
	// Unique query identifier
	Id string `json:"id"`
	// User who sent the query
	From User `json:"from"`
	// Bot-specified invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// User specified shipping address
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// StarTransaction (https://core.telegram.org/bots/api#startransaction)
//
// Describes a Telegram Star transaction.
type StarTransaction struct {
	// Unique identifier of the transaction. Coincides with the identifier of the original transaction for refund transactions. Coincides with SuccessfulPayment.telegram_payment_charge_id for successful incoming payments from users.
	Id string `json:"id"`
	// Integer amount of Telegram Stars transferred by the transaction
	Amount int64 `json:"amount"`
	// Optional. The number of 1/1000000000 shares of Telegram Stars transferred by the transaction; from 0 to 999999999
	NanostarAmount int64 `json:"nanostar_amount,omitempty"`
	// Date the transaction was created in Unix time
	Date int64 `json:"date"`
	// Optional. Source of an incoming transaction (e.g., a user purchasing goods or services, Fragment refunding a failed withdrawal). Only for incoming transactions
	Source TransactionPartner `json:"source,omitempty"`
	// Optional. Receiver of an outgoing transaction (e.g., a user for a purchase refund, Fragment for a withdrawal). Only for outgoing transactions
	Receiver TransactionPartner `json:"receiver,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *StarTransaction) UnmarshalJSON(b []byte) error {
	// All fields in StarTransaction, with interface fields as json.RawMessage
	type tmp struct {
		Id             string          `json:"id"`
		Amount         int64           `json:"amount"`
		NanostarAmount int64           `json:"nanostar_amount"`
		Date           int64           `json:"date"`
		Source         json.RawMessage `json:"source"`
		Receiver       json.RawMessage `json:"receiver"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal StarTransaction JSON into tmp struct: %w", err)
	}

	v.Id = t.Id
	v.Amount = t.Amount
	v.NanostarAmount = t.NanostarAmount
	v.Date = t.Date
	v.Source, err = unmarshalTransactionPartner(t.Source)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Source: %w", err)
	}
	v.Receiver, err = unmarshalTransactionPartner(t.Receiver)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field Receiver: %w", err)
	}

	return nil
}

// StarTransactions (https://core.telegram.org/bots/api#startransactions)
//
// Contains a list of Telegram Star transactions.
type StarTransactions struct {
	// The list of transactions
	Transactions []StarTransaction `json:"transactions,omitempty"`
}

// Sticker (https://core.telegram.org/bots/api#sticker)
//
// This object represents a sticker.
type Sticker struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Type of the sticker, currently one of "regular", "mask", "custom_emoji". The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video.
	Type string `json:"type"`
	// Sticker width
	Width int64 `json:"width"`
	// Sticker height
	Height int64 `json:"height"`
	// True, if the sticker is animated
	IsAnimated bool `json:"is_animated"`
	// True, if the sticker is a video sticker
	IsVideo bool `json:"is_video"`
	// Optional. Sticker thumbnail in the .WEBP or .JPG format
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
	// Optional. Emoji associated with the sticker
	Emoji string `json:"emoji,omitempty"`
	// Optional. Name of the sticker set to which the sticker belongs
	SetName string `json:"set_name,omitempty"`
	// Optional. For premium regular stickers, premium animation for the sticker
	PremiumAnimation *File `json:"premium_animation,omitempty"`
	// Optional. For mask stickers, the position where the mask should be placed
	MaskPosition *MaskPosition `json:"mask_position,omitempty"`
	// Optional. For custom emoji stickers, unique identifier of the custom emoji
	CustomEmojiId string `json:"custom_emoji_id,omitempty"`
	// Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places
	NeedsRepainting bool `json:"needs_repainting,omitempty"`
	// Optional. File size in bytes
	FileSize int64 `json:"file_size,omitempty"`
}

// StickerSet (https://core.telegram.org/bots/api#stickerset)
//
// This object represents a sticker set.
type StickerSet struct {
	// Sticker set name
	Name string `json:"name"`
	// Sticker set title
	Title string `json:"title"`
	// Type of stickers in the set, currently one of "regular", "mask", "custom_emoji"
	StickerType string `json:"sticker_type"`
	// List of all set stickers
	Stickers []Sticker `json:"stickers,omitempty"`
	// Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
}

// Story (https://core.telegram.org/bots/api#story)
//
// This object represents a story.
type Story struct {
	// Chat that posted the story
	Chat Chat `json:"chat"`
	// Unique identifier for the story in the chat
	Id int64 `json:"id"`
}

// SuccessfulPayment (https://core.telegram.org/bots/api#successfulpayment)
//
// This object contains basic information about a successful payment.
type SuccessfulPayment struct {
	// Three-letter ISO 4217 currency code, or "XTR" for payments in Telegram Stars
	Currency string `json:"currency"`
	// Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int64 `json:"total_amount"`
	// Bot-specified invoice payload
	InvoicePayload string `json:"invoice_payload"`
	// Optional. Expiration date of the subscription, in Unix time; for recurring payments only
	SubscriptionExpirationDate int64 `json:"subscription_expiration_date,omitempty"`
	// Optional. True, if the payment is a recurring payment for a subscription
	IsRecurring bool `json:"is_recurring,omitempty"`
	// Optional. True, if the payment is the first payment for a subscription
	IsFirstRecurring bool `json:"is_first_recurring,omitempty"`
	// Optional. Identifier of the shipping option chosen by the user
	ShippingOptionId string `json:"shipping_option_id,omitempty"`
	// Optional. Order information provided by the user
	OrderInfo *OrderInfo `json:"order_info,omitempty"`
	// Telegram payment identifier
	TelegramPaymentChargeId string `json:"telegram_payment_charge_id"`
	// Provider payment identifier
	ProviderPaymentChargeId string `json:"provider_payment_charge_id"`
}

// SwitchInlineQueryChosenChat (https://core.telegram.org/bots/api#switchinlinequerychosenchat)
//
// This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.
type SwitchInlineQueryChosenChat struct {
	// Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted
	Query string `json:"query,omitempty"`
	// Optional. True, if private chats with users can be chosen
	AllowUserChats bool `json:"allow_user_chats,omitempty"`
	// Optional. True, if private chats with bots can be chosen
	AllowBotChats bool `json:"allow_bot_chats,omitempty"`
	// Optional. True, if group and supergroup chats can be chosen
	AllowGroupChats bool `json:"allow_group_chats,omitempty"`
	// Optional. True, if channel chats can be chosen
	AllowChannelChats bool `json:"allow_channel_chats,omitempty"`
}

// TextQuote (https://core.telegram.org/bots/api#textquote)
//
// This object contains information about the quoted part of a message that is replied to by the given message.
type TextQuote struct {
	// Text of the quoted part of a message that is replied to by the given message
	Text string `json:"text"`
	// Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes.
	Entities []MessageEntity `json:"entities,omitempty"`
	// Approximate quote position in the original message in UTF-16 code units as specified by the sender
	Position int64 `json:"position"`
	// Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server.
	IsManual bool `json:"is_manual,omitempty"`
}

// TransactionPartner (https://core.telegram.org/bots/api#transactionpartner)
//
// This object describes the source of a transaction, or its recipient for outgoing transactions. Currently, it can be one of
//   - TransactionPartnerUser
//   - TransactionPartnerAffiliateProgram
//   - TransactionPartnerFragment
//   - TransactionPartnerTelegramAds
//   - TransactionPartnerTelegramApi
//   - TransactionPartnerOther
type TransactionPartner interface {
	GetType() string
	// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with complex telegram types in a non-generic world.
	MergeTransactionPartner() MergedTransactionPartner
	// transactionPartner exists to avoid external types implementing this interface.
	transactionPartner()
}

// Ensure that all subtypes correctly implement the parent interface.
var (
	_ TransactionPartner = TransactionPartnerUser{}
	_ TransactionPartner = TransactionPartnerAffiliateProgram{}
	_ TransactionPartner = TransactionPartnerFragment{}
	_ TransactionPartner = TransactionPartnerTelegramAds{}
	_ TransactionPartner = TransactionPartnerTelegramApi{}
	_ TransactionPartner = TransactionPartnerOther{}
)

// MergedTransactionPartner is a helper type to simplify interactions with the various TransactionPartner subtypes.
type MergedTransactionPartner struct {
	// Type of the transaction partner
	Type string `json:"type"`
	// Optional. Information about the user (Only for user)
	User *User `json:"user,omitempty"`
	// Optional. Information about the affiliate that received a commission via this transaction (Only for user)
	Affiliate *AffiliateInfo `json:"affiliate,omitempty"`
	// Optional. Bot-specified invoice payload (Only for user)
	InvoicePayload string `json:"invoice_payload,omitempty"`
	// Optional. The duration of the paid subscription (Only for user)
	SubscriptionPeriod int64 `json:"subscription_period,omitempty"`
	// Optional. Information about the paid media bought by the user (Only for user)
	PaidMedia []PaidMedia `json:"paid_media,omitempty"`
	// Optional. Bot-specified paid media payload (Only for user)
	PaidMediaPayload string `json:"paid_media_payload,omitempty"`
	// Optional. The gift sent to the user by the bot (Only for user)
	Gift *Gift `json:"gift,omitempty"`
	// Optional. Information about the bot that sponsored the affiliate program (Only for affiliate_program)
	SponsorUser *User `json:"sponsor_user,omitempty"`
	// Optional. The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users (Only for affiliate_program)
	CommissionPerMille int64 `json:"commission_per_mille,omitempty"`
	// Optional. State of the transaction if the transaction is outgoing (Only for fragment)
	WithdrawalState RevenueWithdrawalState `json:"withdrawal_state,omitempty"`
	// Optional. The number of successful requests that exceeded regular limits and were therefore billed (Only for telegram_api)
	RequestCount int64 `json:"request_count,omitempty"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v MergedTransactionPartner) GetType() string {
	return v.Type
}

// MergedTransactionPartner.transactionPartner is a dummy method to avoid interface implementation.
func (v MergedTransactionPartner) transactionPartner() {}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v MergedTransactionPartner) MergeTransactionPartner() MergedTransactionPartner {
	return v
}

// unmarshalTransactionPartnerArray is a JSON unmarshalling helper which allows unmarshalling an array of interfaces
// using unmarshalTransactionPartner.
func unmarshalTransactionPartnerArray(d json.RawMessage) ([]TransactionPartner, error) {
	if len(d) == 0 {
		return nil, nil
	}

	var ds []json.RawMessage
	err := json.Unmarshal(d, &ds)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal initial TransactionPartner JSON into an array: %w", err)
	}

	var vs []TransactionPartner
	for idx, d := range ds {
		v, err := unmarshalTransactionPartner(d)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner on array item %d: %w", idx, err)
		}
		vs = append(vs, v)
	}

	return vs, nil
}

// unmarshalTransactionPartner is a JSON unmarshal helper to marshal the right structs into a TransactionPartner interface
// based on the Type field.
func unmarshalTransactionPartner(d json.RawMessage) (TransactionPartner, error) {
	if len(d) == 0 {
		return nil, nil
	}

	t := struct {
		Type string
	}{}
	err := json.Unmarshal(d, &t)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal TransactionPartner for constant field 'Type': %w", err)
	}

	switch t.Type {
	case "user":
		s := TransactionPartnerUser{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'user': %w", err)
		}
		return s, nil

	case "affiliate_program":
		s := TransactionPartnerAffiliateProgram{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'affiliate_program': %w", err)
		}
		return s, nil

	case "fragment":
		s := TransactionPartnerFragment{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'fragment': %w", err)
		}
		return s, nil

	case "telegram_ads":
		s := TransactionPartnerTelegramAds{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'telegram_ads': %w", err)
		}
		return s, nil

	case "telegram_api":
		s := TransactionPartnerTelegramApi{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'telegram_api': %w", err)
		}
		return s, nil

	case "other":
		s := TransactionPartnerOther{}
		err := json.Unmarshal(d, &s)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal TransactionPartner for value 'other': %w", err)
		}
		return s, nil

	}
	return nil, fmt.Errorf("unknown interface for TransactionPartner with Type %v", t.Type)
}

// TransactionPartnerAffiliateProgram (https://core.telegram.org/bots/api#transactionpartneraffiliateprogram)
//
// Describes the affiliate program that issued the affiliate commission received via this transaction.
type TransactionPartnerAffiliateProgram struct {
	// Optional. Information about the bot that sponsored the affiliate program
	SponsorUser *User `json:"sponsor_user,omitempty"`
	// The number of Telegram Stars received by the bot for each 1000 Telegram Stars received by the affiliate program sponsor from referred users
	CommissionPerMille int64 `json:"commission_per_mille"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerAffiliateProgram) GetType() string {
	return "affiliate_program"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerAffiliateProgram) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type:               "affiliate_program",
		SponsorUser:        v.SponsorUser,
		CommissionPerMille: v.CommissionPerMille,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerAffiliateProgram) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerAffiliateProgram
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "affiliate_program",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerAffiliateProgram.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerAffiliateProgram) transactionPartner() {}

// TransactionPartnerFragment (https://core.telegram.org/bots/api#transactionpartnerfragment)
//
// Describes a withdrawal transaction with Fragment.
type TransactionPartnerFragment struct {
	// Optional. State of the transaction if the transaction is outgoing
	WithdrawalState RevenueWithdrawalState `json:"withdrawal_state,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *TransactionPartnerFragment) UnmarshalJSON(b []byte) error {
	// All fields in TransactionPartnerFragment, with interface fields as json.RawMessage
	type tmp struct {
		WithdrawalState json.RawMessage `json:"withdrawal_state"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal TransactionPartnerFragment JSON into tmp struct: %w", err)
	}

	v.WithdrawalState, err = unmarshalRevenueWithdrawalState(t.WithdrawalState)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field WithdrawalState: %w", err)
	}

	return nil
}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerFragment) GetType() string {
	return "fragment"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerFragment) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type:            "fragment",
		WithdrawalState: v.WithdrawalState,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerFragment) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerFragment
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "fragment",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerFragment.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerFragment) transactionPartner() {}

// TransactionPartnerOther (https://core.telegram.org/bots/api#transactionpartnerother)
//
// Describes a transaction with an unknown source or recipient.
type TransactionPartnerOther struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerOther) GetType() string {
	return "other"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerOther) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type: "other",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerOther) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerOther
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "other",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerOther.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerOther) transactionPartner() {}

// TransactionPartnerTelegramAds (https://core.telegram.org/bots/api#transactionpartnertelegramads)
//
// Describes a withdrawal transaction to the Telegram Ads platform.
type TransactionPartnerTelegramAds struct{}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerTelegramAds) GetType() string {
	return "telegram_ads"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerTelegramAds) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type: "telegram_ads",
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerTelegramAds) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerTelegramAds
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "telegram_ads",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerTelegramAds.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerTelegramAds) transactionPartner() {}

// TransactionPartnerTelegramApi (https://core.telegram.org/bots/api#transactionpartnertelegramapi)
//
// Describes a transaction with payment for paid broadcasting.
type TransactionPartnerTelegramApi struct {
	// The number of successful requests that exceeded regular limits and were therefore billed
	RequestCount int64 `json:"request_count"`
}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerTelegramApi) GetType() string {
	return "telegram_api"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerTelegramApi) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type:         "telegram_api",
		RequestCount: v.RequestCount,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerTelegramApi) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerTelegramApi
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "telegram_api",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerTelegramApi.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerTelegramApi) transactionPartner() {}

// TransactionPartnerUser (https://core.telegram.org/bots/api#transactionpartneruser)
//
// Describes a transaction with a user.
type TransactionPartnerUser struct {
	// Information about the user
	User User `json:"user"`
	// Optional. Information about the affiliate that received a commission via this transaction
	Affiliate *AffiliateInfo `json:"affiliate,omitempty"`
	// Optional. Bot-specified invoice payload
	InvoicePayload string `json:"invoice_payload,omitempty"`
	// Optional. The duration of the paid subscription
	SubscriptionPeriod int64 `json:"subscription_period,omitempty"`
	// Optional. Information about the paid media bought by the user
	PaidMedia []PaidMedia `json:"paid_media,omitempty"`
	// Optional. Bot-specified paid media payload
	PaidMediaPayload string `json:"paid_media_payload,omitempty"`
	// Optional. The gift sent to the user by the bot
	Gift *Gift `json:"gift,omitempty"`
}

// UnmarshalJSON is a custom JSON unmarshaller to use the helpers which allow for unmarshalling structs into interfaces.
func (v *TransactionPartnerUser) UnmarshalJSON(b []byte) error {
	// All fields in TransactionPartnerUser, with interface fields as json.RawMessage
	type tmp struct {
		User               User            `json:"user"`
		Affiliate          *AffiliateInfo  `json:"affiliate"`
		InvoicePayload     string          `json:"invoice_payload"`
		SubscriptionPeriod int64           `json:"subscription_period"`
		PaidMedia          json.RawMessage `json:"paid_media"`
		PaidMediaPayload   string          `json:"paid_media_payload"`
		Gift               *Gift           `json:"gift"`
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return fmt.Errorf("failed to unmarshal TransactionPartnerUser JSON into tmp struct: %w", err)
	}

	v.User = t.User
	v.Affiliate = t.Affiliate
	v.InvoicePayload = t.InvoicePayload
	v.SubscriptionPeriod = t.SubscriptionPeriod
	v.PaidMedia, err = unmarshalPaidMediaArray(t.PaidMedia)
	if err != nil {
		return fmt.Errorf("failed to unmarshal custom JSON field PaidMedia: %w", err)
	}
	v.PaidMediaPayload = t.PaidMediaPayload
	v.Gift = t.Gift

	return nil
}

// GetType is a helper method to easily access the common fields of an interface.
func (v TransactionPartnerUser) GetType() string {
	return "user"
}

// MergeTransactionPartner returns a MergedTransactionPartner struct to simplify working with types in a non-generic world.
func (v TransactionPartnerUser) MergeTransactionPartner() MergedTransactionPartner {
	return MergedTransactionPartner{
		Type:               "user",
		User:               &v.User,
		Affiliate:          v.Affiliate,
		InvoicePayload:     v.InvoicePayload,
		SubscriptionPeriod: v.SubscriptionPeriod,
		PaidMedia:          v.PaidMedia,
		PaidMediaPayload:   v.PaidMediaPayload,
		Gift:               v.Gift,
	}
}

// MarshalJSON is a custom JSON marshaller to allow for enforcing the Type value.
func (v TransactionPartnerUser) MarshalJSON() ([]byte, error) {
	type alias TransactionPartnerUser
	a := struct {
		Type string `json:"type"`
		alias
	}{
		Type:  "user",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}

// TransactionPartnerUser.transactionPartner is a dummy method to avoid interface implementation.
func (v TransactionPartnerUser) transactionPartner() {}

// Update (https://core.telegram.org/bots/api#update)
//
// This object represents an incoming update.
// At most one of the optional parameters can be present in any given update.
type Update struct {
	// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
	UpdateId int64 `json:"update_id"`
	// Optional. New incoming message of any kind - text, photo, sticker, etc.
	Message *Message `json:"message,omitempty"`
	// Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
	EditedMessage *Message `json:"edited_message,omitempty"`
	// Optional. New incoming channel post of any kind - text, photo, sticker, etc.
	ChannelPost *Message `json:"channel_post,omitempty"`
	// Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot.
	EditedChannelPost *Message `json:"edited_channel_post,omitempty"`
	// Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot
	BusinessConnection *BusinessConnection `json:"business_connection,omitempty"`
	// Optional. New message from a connected business account
	BusinessMessage *Message `json:"business_message,omitempty"`
	// Optional. New version of a message from a connected business account
	EditedBusinessMessage *Message `json:"edited_business_message,omitempty"`
	// Optional. Messages were deleted from a connected business account
	DeletedBusinessMessages *BusinessMessagesDeleted `json:"deleted_business_messages,omitempty"`
	// Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify "message_reaction" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots.
	MessageReaction *MessageReactionUpdated `json:"message_reaction,omitempty"`
	// Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify "message_reaction_count" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes.
	MessageReactionCount *MessageReactionCountUpdated `json:"message_reaction_count,omitempty"`
	// Optional. New incoming inline query
	InlineQuery *InlineQuery `json:"inline_query,omitempty"`
	// Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.
	ChosenInlineResult *ChosenInlineResult `json:"chosen_inline_result,omitempty"`
	// Optional. New incoming callback query
	CallbackQuery *CallbackQuery `json:"callback_query,omitempty"`
	// Optional. New incoming shipping query. Only for invoices with flexible price
	ShippingQuery *ShippingQuery `json:"shipping_query,omitempty"`
	// Optional. New incoming pre-checkout query. Contains full information about checkout
	PreCheckoutQuery *PreCheckoutQuery `json:"pre_checkout_query,omitempty"`
	// Optional. A user purchased paid media with a non-empty payload sent by the bot in a non-channel chat
	PurchasedPaidMedia *PaidMediaPurchased `json:"purchased_paid_media,omitempty"`
	// Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot
	Poll *Poll `json:"poll,omitempty"`
	// Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself.
	PollAnswer *PollAnswer `json:"poll_answer,omitempty"`
	// Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user.
	MyChatMember *ChatMemberUpdated `json:"my_chat_member,omitempty"`
	// Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify "chat_member" in the list of allowed_updates to receive these updates.
	ChatMember *ChatMemberUpdated `json:"chat_member,omitempty"`
	// Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates.
	ChatJoinRequest *ChatJoinRequest `json:"chat_join_request,omitempty"`
	// Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates.
	ChatBoost *ChatBoostUpdated `json:"chat_boost,omitempty"`
	// Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates.
	RemovedChatBoost *ChatBoostRemoved `json:"removed_chat_boost,omitempty"`
}

// User (https://core.telegram.org/bots/api#user)
//
// This object represents a Telegram user or bot.
type User struct {
	// Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier.
	Id int64 `json:"id"`
	// True, if this user is a bot
	IsBot bool `json:"is_bot"`
	// User's or bot's first name
	FirstName string `json:"first_name"`
	// Optional. User's or bot's last name
	LastName string `json:"last_name,omitempty"`
	// Optional. User's or bot's username
	Username string `json:"username,omitempty"`
	// Optional. IETF language tag of the user's language
	LanguageCode string `json:"language_code,omitempty"`
	// Optional. True, if this user is a Telegram Premium user
	IsPremium bool `json:"is_premium,omitempty"`
	// Optional. True, if this user added the bot to the attachment menu
	AddedToAttachmentMenu bool `json:"added_to_attachment_menu,omitempty"`
	// Optional. True, if the bot can be invited to groups. Returned only in getMe.
	CanJoinGroups bool `json:"can_join_groups,omitempty"`
	// Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
	CanReadAllGroupMessages bool `json:"can_read_all_group_messages,omitempty"`
	// Optional. True, if the bot supports inline queries. Returned only in getMe.
	SupportsInlineQueries bool `json:"supports_inline_queries,omitempty"`
	// Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe.
	CanConnectToBusiness bool `json:"can_connect_to_business,omitempty"`
	// Optional. True, if the bot has a main Web App. Returned only in getMe.
	HasMainWebApp bool `json:"has_main_web_app,omitempty"`
}

// UserChatBoosts (https://core.telegram.org/bots/api#userchatboosts)
//
// This object represents a list of boosts added to a chat by a user.
type UserChatBoosts struct {
	// The list of boosts added to the chat by the user
	Boosts []ChatBoost `json:"boosts,omitempty"`
}

// UserProfilePhotos (https://core.telegram.org/bots/api#userprofilephotos)
//
// This object represent a user's profile pictures.
type UserProfilePhotos struct {
	// Total number of profile pictures the target user has
	TotalCount int64 `json:"total_count"`
	// Requested profile pictures (in up to 4 sizes each)
	Photos [][]PhotoSize `json:"photos,omitempty"`
}

// UsersShared (https://core.telegram.org/bots/api#usersshared)
//
// This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.
type UsersShared struct {
	// Identifier of the request
	RequestId int64 `json:"request_id"`
	// Information about users shared with the bot.
	Users []SharedUser `json:"users,omitempty"`
}

// Venue (https://core.telegram.org/bots/api#venue)
//
// This object represents a venue.
type Venue struct {
	// Venue location. Can't be a live location
	Location Location `json:"location"`
	// Name of the venue
	Title string `json:"title"`
	// Address of the venue
	Address string `json:"address"`
	// Optional. Foursquare identifier of the venue
	FoursquareId string `json:"foursquare_id,omitempty"`
	// Optional. Foursquare type of the venue. (For example, "arts_entertainment/default", "arts_entertainment/aquarium" or "food/icecream".)
	FoursquareType string `json:"foursquare_type,omitempty"`
	// Optional. Google Places identifier of the venue
	GooglePlaceId string `json:"google_place_id,omitempty"`
	// Optional. Google Places type of the venue. (See supported types.)
	GooglePlaceType string `json:"google_place_type,omitempty"`
}

// Video (https://core.telegram.org/bots/api#video)
//
// This object represents a video file.
type Video struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Video width as defined by the sender
	Width int64 `json:"width"`
	// Video height as defined by the sender
	Height int64 `json:"height"`
	// Duration of the video in seconds as defined by the sender
	Duration int64 `json:"duration"`
	// Optional. Video thumbnail
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
	// Optional. Original filename as defined by the sender
	FileName string `json:"file_name,omitempty"`
	// Optional. MIME type of the file as defined by the sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
}

// VideoChatEnded (https://core.telegram.org/bots/api#videochatended)
//
// This object represents a service message about a video chat ended in the chat.
type VideoChatEnded struct {
	// Video chat duration in seconds
	Duration int64 `json:"duration"`
}

// VideoChatParticipantsInvited (https://core.telegram.org/bots/api#videochatparticipantsinvited)
//
// This object represents a service message about new members invited to a video chat.
type VideoChatParticipantsInvited struct {
	// New members that were invited to the video chat
	Users []User `json:"users,omitempty"`
}

// VideoChatScheduled (https://core.telegram.org/bots/api#videochatscheduled)
//
// This object represents a service message about a video chat scheduled in the chat.
type VideoChatScheduled struct {
	// Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator
	StartDate int64 `json:"start_date"`
}

// VideoChatStarted (https://core.telegram.org/bots/api#videochatstarted)
//
// This object represents a service message about a video chat started in the chat. Currently holds no information.
type VideoChatStarted struct{}

// VideoNote (https://core.telegram.org/bots/api#videonote)
//
// This object represents a video message (available in Telegram apps as of v.4.0).
type VideoNote struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Video width and height (diameter of the video message) as defined by the sender
	Length int64 `json:"length"`
	// Duration of the video in seconds as defined by the sender
	Duration int64 `json:"duration"`
	// Optional. Video thumbnail
	Thumbnail *PhotoSize `json:"thumbnail,omitempty"`
	// Optional. File size in bytes
	FileSize int64 `json:"file_size,omitempty"`
}

// Voice (https://core.telegram.org/bots/api#voice)
//
// This object represents a voice note.
type Voice struct {
	// Identifier for this file, which can be used to download or reuse the file
	FileId string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
	FileUniqueId string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by the sender
	Duration int64 `json:"duration"`
	// Optional. MIME type of the file as defined by the sender
	MimeType string `json:"mime_type,omitempty"`
	// Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value.
	FileSize int64 `json:"file_size,omitempty"`
}

// WebAppData (https://core.telegram.org/bots/api#webappdata)
//
// Describes data sent from a Web App to the bot.
type WebAppData struct {
	// The data. Be aware that a bad client can send arbitrary data in this field.
	Data string `json:"data"`
	// Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field.
	ButtonText string `json:"button_text"`
}

// WebAppInfo (https://core.telegram.org/bots/api#webappinfo)
//
// Describes a Web App.
type WebAppInfo struct {
	// An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps
	Url string `json:"url"`
}

// WebhookInfo (https://core.telegram.org/bots/api#webhookinfo)
//
// Describes the current status of a webhook.
type WebhookInfo struct {
	// Webhook URL, may be empty if webhook is not set up
	Url string `json:"url"`
	// True, if a custom certificate was provided for webhook certificate checks
	HasCustomCertificate bool `json:"has_custom_certificate"`
	// Number of updates awaiting delivery
	PendingUpdateCount int64 `json:"pending_update_count"`
	// Optional. Currently used webhook IP address
	IpAddress string `json:"ip_address,omitempty"`
	// Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook
	LastErrorDate int64 `json:"last_error_date,omitempty"`
	// Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
	LastErrorMessage string `json:"last_error_message,omitempty"`
	// Optional. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters
	LastSynchronizationErrorDate int64 `json:"last_synchronization_error_date,omitempty"`
	// Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
	MaxConnections int64 `json:"max_connections,omitempty"`
	// Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member
	AllowedUpdates []string `json:"allowed_updates,omitempty"`
}

// WriteAccessAllowed (https://core.telegram.org/bots/api#writeaccessallowed)
//
// This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.
type WriteAccessAllowed struct {
	// Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess
	FromRequest bool `json:"from_request,omitempty"`
	// Optional. Name of the Web App, if the access was granted when the Web App was launched from a link
	WebAppName string `json:"web_app_name,omitempty"`
	// Optional. True, if the access was granted when the bot was added to the attachment or side menu
	FromAttachmentMenu bool `json:"from_attachment_menu,omitempty"`
}
